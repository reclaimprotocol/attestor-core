/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IRewardsCoordinatorTypes {
  export type StrategyAndMultiplierStruct = {
    strategy: string;
    multiplier: BigNumberish;
  };

  export type StrategyAndMultiplierStructOutput = [string, BigNumber] & {
    strategy: string;
    multiplier: BigNumber;
  };

  export type RewardsSubmissionStruct = {
    strategiesAndMultipliers: IRewardsCoordinatorTypes.StrategyAndMultiplierStruct[];
    token: string;
    amount: BigNumberish;
    startTimestamp: BigNumberish;
    duration: BigNumberish;
  };

  export type RewardsSubmissionStructOutput = [
    IRewardsCoordinatorTypes.StrategyAndMultiplierStructOutput[],
    string,
    BigNumber,
    number,
    number
  ] & {
    strategiesAndMultipliers: IRewardsCoordinatorTypes.StrategyAndMultiplierStructOutput[];
    token: string;
    amount: BigNumber;
    startTimestamp: number;
    duration: number;
  };

  export type OperatorRewardStruct = { operator: string; amount: BigNumberish };

  export type OperatorRewardStructOutput = [string, BigNumber] & {
    operator: string;
    amount: BigNumber;
  };

  export type OperatorDirectedRewardsSubmissionStruct = {
    strategiesAndMultipliers: IRewardsCoordinatorTypes.StrategyAndMultiplierStruct[];
    token: string;
    operatorRewards: IRewardsCoordinatorTypes.OperatorRewardStruct[];
    startTimestamp: BigNumberish;
    duration: BigNumberish;
    description: string;
  };

  export type OperatorDirectedRewardsSubmissionStructOutput = [
    IRewardsCoordinatorTypes.StrategyAndMultiplierStructOutput[],
    string,
    IRewardsCoordinatorTypes.OperatorRewardStructOutput[],
    number,
    number,
    string
  ] & {
    strategiesAndMultipliers: IRewardsCoordinatorTypes.StrategyAndMultiplierStructOutput[];
    token: string;
    operatorRewards: IRewardsCoordinatorTypes.OperatorRewardStructOutput[];
    startTimestamp: number;
    duration: number;
    description: string;
  };
}

export declare namespace ISignatureUtilsMixinTypes {
  export type SignatureWithSaltAndExpiryStruct = {
    signature: BytesLike;
    salt: BytesLike;
    expiry: BigNumberish;
  };

  export type SignatureWithSaltAndExpiryStructOutput = [
    string,
    string,
    BigNumber
  ] & { signature: string; salt: string; expiry: BigNumber };
}

export interface ReclaimServiceManagerInterface extends utils.Interface {
  functions: {
    "addOperatorToWhitelist(address)": FunctionFragment;
    "addPendingAdmin(address)": FunctionFragment;
    "avsDirectory()": FunctionFragment;
    "createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])": FunctionFragment;
    "createOperatorDirectedAVSRewardsSubmission(((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])": FunctionFragment;
    "deregisterOperatorFromAVS(address)": FunctionFragment;
    "deregisterOperatorFromOperatorSets(address,uint32[])": FunctionFragment;
    "getOperatorRestakedStrategies(address)": FunctionFragment;
    "getRestakeableStrategies()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isOperatorWhitelisted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerOperatorToAVS(address,(bytes,bytes32,uint256))": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeAppointee(address,address,bytes4)": FunctionFragment;
    "removeOperatorFromWhitelist(address)": FunctionFragment;
    "removePendingAdmin(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsInitiator()": FunctionFragment;
    "setAppointee(address,address,bytes4)": FunctionFragment;
    "setClaimerFor(address)": FunctionFragment;
    "setRewardsInitiator(address)": FunctionFragment;
    "slashingRegistryCoordinator()": FunctionFragment;
    "taskManager()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAVSMetadataURI(string)": FunctionFragment;
    "whitelistedOperators(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOperatorToWhitelist"
      | "addPendingAdmin"
      | "avsDirectory"
      | "createAVSRewardsSubmission"
      | "createOperatorDirectedAVSRewardsSubmission"
      | "deregisterOperatorFromAVS"
      | "deregisterOperatorFromOperatorSets"
      | "getOperatorRestakedStrategies"
      | "getRestakeableStrategies"
      | "initialize"
      | "isOperatorWhitelisted"
      | "owner"
      | "registerOperatorToAVS"
      | "removeAdmin"
      | "removeAppointee"
      | "removeOperatorFromWhitelist"
      | "removePendingAdmin"
      | "renounceOwnership"
      | "rewardsInitiator"
      | "setAppointee"
      | "setClaimerFor"
      | "setRewardsInitiator"
      | "slashingRegistryCoordinator"
      | "taskManager"
      | "transferOwnership"
      | "updateAVSMetadataURI"
      | "whitelistedOperators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOperatorToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPendingAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "avsDirectory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAVSRewardsSubmission",
    values: [IRewardsCoordinatorTypes.RewardsSubmissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createOperatorDirectedAVSRewardsSubmission",
    values: [IRewardsCoordinatorTypes.OperatorDirectedRewardsSubmissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterOperatorFromAVS",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterOperatorFromOperatorSets",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorRestakedStrategies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRestakeableStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerOperatorToAVS",
    values: [string, ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct]
  ): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeAppointee",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperatorFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePendingAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsInitiator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAppointee",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimerFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsInitiator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashingRegistryCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taskManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAVSMetadataURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedOperators",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOperatorToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avsDirectory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAVSRewardsSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOperatorDirectedAVSRewardsSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterOperatorFromAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterOperatorFromOperatorSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorRestakedStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRestakeableStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOperatorToAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAppointee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperatorFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsInitiator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAppointee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsInitiator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashingRegistryCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAVSMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedOperators",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardsInitiatorUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsInitiatorUpdated"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardsInitiatorUpdatedEventObject {
  prevRewardsInitiator: string;
  newRewardsInitiator: string;
}
export type RewardsInitiatorUpdatedEvent = TypedEvent<
  [string, string],
  RewardsInitiatorUpdatedEventObject
>;

export type RewardsInitiatorUpdatedEventFilter =
  TypedEventFilter<RewardsInitiatorUpdatedEvent>;

export interface ReclaimServiceManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReclaimServiceManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOperatorToWhitelist(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addPendingAdmin(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    avsDirectory(overrides?: CallOverrides): Promise<[string]>;

    createAVSRewardsSubmission(
      rewardsSubmissions: IRewardsCoordinatorTypes.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createOperatorDirectedAVSRewardsSubmission(
      operatorDirectedRewardsSubmissions: IRewardsCoordinatorTypes.OperatorDirectedRewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deregisterOperatorFromOperatorSets(
      operator: string,
      operatorSetIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getOperatorRestakedStrategies(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRestakeableStrategies(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      initialOwner: string,
      rewardsInitiator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isOperatorWhitelisted(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeAdmin(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeAppointee(
      appointee: string,
      target: string,
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeOperatorFromWhitelist(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removePendingAdmin(
      pendingAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardsInitiator(overrides?: CallOverrides): Promise<[string]>;

    setAppointee(
      appointee: string,
      target: string,
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setClaimerFor(
      claimer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRewardsInitiator(
      newRewardsInitiator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    slashingRegistryCoordinator(overrides?: CallOverrides): Promise<[string]>;

    taskManager(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAVSMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    whitelistedOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addOperatorToWhitelist(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addPendingAdmin(
    admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  avsDirectory(overrides?: CallOverrides): Promise<string>;

  createAVSRewardsSubmission(
    rewardsSubmissions: IRewardsCoordinatorTypes.RewardsSubmissionStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createOperatorDirectedAVSRewardsSubmission(
    operatorDirectedRewardsSubmissions: IRewardsCoordinatorTypes.OperatorDirectedRewardsSubmissionStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deregisterOperatorFromAVS(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deregisterOperatorFromOperatorSets(
    operator: string,
    operatorSetIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getOperatorRestakedStrategies(
    operator: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRestakeableStrategies(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    initialOwner: string,
    rewardsInitiator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isOperatorWhitelisted(
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerOperatorToAVS(
    operator: string,
    operatorSignature: ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeAdmin(
    admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeAppointee(
    appointee: string,
    target: string,
    selector: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeOperatorFromWhitelist(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removePendingAdmin(
    pendingAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardsInitiator(overrides?: CallOverrides): Promise<string>;

  setAppointee(
    appointee: string,
    target: string,
    selector: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setClaimerFor(
    claimer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRewardsInitiator(
    newRewardsInitiator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  slashingRegistryCoordinator(overrides?: CallOverrides): Promise<string>;

  taskManager(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAVSMetadataURI(
    _metadataURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  whitelistedOperators(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addOperatorToWhitelist(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPendingAdmin(admin: string, overrides?: CallOverrides): Promise<void>;

    avsDirectory(overrides?: CallOverrides): Promise<string>;

    createAVSRewardsSubmission(
      rewardsSubmissions: IRewardsCoordinatorTypes.RewardsSubmissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    createOperatorDirectedAVSRewardsSubmission(
      operatorDirectedRewardsSubmissions: IRewardsCoordinatorTypes.OperatorDirectedRewardsSubmissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deregisterOperatorFromOperatorSets(
      operator: string,
      operatorSetIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getOperatorRestakedStrategies(
      operator: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRestakeableStrategies(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      initialOwner: string,
      rewardsInitiator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isOperatorWhitelisted(
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(admin: string, overrides?: CallOverrides): Promise<void>;

    removeAppointee(
      appointee: string,
      target: string,
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOperatorFromWhitelist(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removePendingAdmin(
      pendingAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsInitiator(overrides?: CallOverrides): Promise<string>;

    setAppointee(
      appointee: string,
      target: string,
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimerFor(claimer: string, overrides?: CallOverrides): Promise<void>;

    setRewardsInitiator(
      newRewardsInitiator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    slashingRegistryCoordinator(overrides?: CallOverrides): Promise<string>;

    taskManager(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAVSMetadataURI(
      _metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RewardsInitiatorUpdated(address,address)"(
      prevRewardsInitiator?: null,
      newRewardsInitiator?: null
    ): RewardsInitiatorUpdatedEventFilter;
    RewardsInitiatorUpdated(
      prevRewardsInitiator?: null,
      newRewardsInitiator?: null
    ): RewardsInitiatorUpdatedEventFilter;
  };

  estimateGas: {
    addOperatorToWhitelist(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addPendingAdmin(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    avsDirectory(overrides?: CallOverrides): Promise<BigNumber>;

    createAVSRewardsSubmission(
      rewardsSubmissions: IRewardsCoordinatorTypes.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createOperatorDirectedAVSRewardsSubmission(
      operatorDirectedRewardsSubmissions: IRewardsCoordinatorTypes.OperatorDirectedRewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deregisterOperatorFromOperatorSets(
      operator: string,
      operatorSetIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getOperatorRestakedStrategies(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRestakeableStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initialOwner: string,
      rewardsInitiator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isOperatorWhitelisted(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeAdmin(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeAppointee(
      appointee: string,
      target: string,
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeOperatorFromWhitelist(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removePendingAdmin(
      pendingAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardsInitiator(overrides?: CallOverrides): Promise<BigNumber>;

    setAppointee(
      appointee: string,
      target: string,
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setClaimerFor(
      claimer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRewardsInitiator(
      newRewardsInitiator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    slashingRegistryCoordinator(overrides?: CallOverrides): Promise<BigNumber>;

    taskManager(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAVSMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    whitelistedOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOperatorToWhitelist(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addPendingAdmin(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    avsDirectory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAVSRewardsSubmission(
      rewardsSubmissions: IRewardsCoordinatorTypes.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createOperatorDirectedAVSRewardsSubmission(
      operatorDirectedRewardsSubmissions: IRewardsCoordinatorTypes.OperatorDirectedRewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deregisterOperatorFromOperatorSets(
      operator: string,
      operatorSetIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getOperatorRestakedStrategies(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRestakeableStrategies(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      initialOwner: string,
      rewardsInitiator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isOperatorWhitelisted(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeAppointee(
      appointee: string,
      target: string,
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeOperatorFromWhitelist(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removePendingAdmin(
      pendingAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardsInitiator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAppointee(
      appointee: string,
      target: string,
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setClaimerFor(
      claimer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRewardsInitiator(
      newRewardsInitiator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    slashingRegistryCoordinator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taskManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAVSMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    whitelistedOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
