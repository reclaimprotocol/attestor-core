/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IRewardsCoordinator {
  export type EarnerTreeMerkleLeafStruct = {
    earner: string;
    earnerTokenRoot: BytesLike;
  };

  export type EarnerTreeMerkleLeafStructOutput = [string, string] & {
    earner: string;
    earnerTokenRoot: string;
  };

  export type TokenTreeMerkleLeafStruct = {
    token: string;
    cumulativeEarnings: BigNumberish;
  };

  export type TokenTreeMerkleLeafStructOutput = [string, BigNumber] & {
    token: string;
    cumulativeEarnings: BigNumber;
  };

  export type RewardsMerkleClaimStruct = {
    rootIndex: BigNumberish;
    earnerIndex: BigNumberish;
    earnerTreeProof: BytesLike;
    earnerLeaf: IRewardsCoordinator.EarnerTreeMerkleLeafStruct;
    tokenIndices: BigNumberish[];
    tokenTreeProofs: BytesLike[];
    tokenLeaves: IRewardsCoordinator.TokenTreeMerkleLeafStruct[];
  };

  export type RewardsMerkleClaimStructOutput = [
    number,
    number,
    string,
    IRewardsCoordinator.EarnerTreeMerkleLeafStructOutput,
    number[],
    string[],
    IRewardsCoordinator.TokenTreeMerkleLeafStructOutput[]
  ] & {
    rootIndex: number;
    earnerIndex: number;
    earnerTreeProof: string;
    earnerLeaf: IRewardsCoordinator.EarnerTreeMerkleLeafStructOutput;
    tokenIndices: number[];
    tokenTreeProofs: string[];
    tokenLeaves: IRewardsCoordinator.TokenTreeMerkleLeafStructOutput[];
  };

  export type StrategyAndMultiplierStruct = {
    strategy: string;
    multiplier: BigNumberish;
  };

  export type StrategyAndMultiplierStructOutput = [string, BigNumber] & {
    strategy: string;
    multiplier: BigNumber;
  };

  export type RewardsSubmissionStruct = {
    strategiesAndMultipliers: IRewardsCoordinator.StrategyAndMultiplierStruct[];
    token: string;
    amount: BigNumberish;
    startTimestamp: BigNumberish;
    duration: BigNumberish;
  };

  export type RewardsSubmissionStructOutput = [
    IRewardsCoordinator.StrategyAndMultiplierStructOutput[],
    string,
    BigNumber,
    number,
    number
  ] & {
    strategiesAndMultipliers: IRewardsCoordinator.StrategyAndMultiplierStructOutput[];
    token: string;
    amount: BigNumber;
    startTimestamp: number;
    duration: number;
  };

  export type OperatorRewardStruct = { operator: string; amount: BigNumberish };

  export type OperatorRewardStructOutput = [string, BigNumber] & {
    operator: string;
    amount: BigNumber;
  };

  export type OperatorDirectedRewardsSubmissionStruct = {
    strategiesAndMultipliers: IRewardsCoordinator.StrategyAndMultiplierStruct[];
    token: string;
    operatorRewards: IRewardsCoordinator.OperatorRewardStruct[];
    startTimestamp: BigNumberish;
    duration: BigNumberish;
    description: string;
  };

  export type OperatorDirectedRewardsSubmissionStructOutput = [
    IRewardsCoordinator.StrategyAndMultiplierStructOutput[],
    string,
    IRewardsCoordinator.OperatorRewardStructOutput[],
    number,
    number,
    string
  ] & {
    strategiesAndMultipliers: IRewardsCoordinator.StrategyAndMultiplierStructOutput[];
    token: string;
    operatorRewards: IRewardsCoordinator.OperatorRewardStructOutput[];
    startTimestamp: number;
    duration: number;
    description: string;
  };

  export type DistributionRootStruct = {
    root: BytesLike;
    rewardsCalculationEndTimestamp: BigNumberish;
    activatedAt: BigNumberish;
    disabled: boolean;
  };

  export type DistributionRootStructOutput = [
    string,
    number,
    number,
    boolean
  ] & {
    root: string;
    rewardsCalculationEndTimestamp: number;
    activatedAt: number;
    disabled: boolean;
  };
}

export interface RewardsCoordinatorInterface extends utils.Interface {
  functions: {
    "CALCULATION_INTERVAL_SECONDS()": FunctionFragment;
    "GENESIS_REWARDS_TIMESTAMP()": FunctionFragment;
    "MAX_FUTURE_LENGTH()": FunctionFragment;
    "MAX_RETROACTIVE_LENGTH()": FunctionFragment;
    "MAX_REWARDS_DURATION()": FunctionFragment;
    "activationDelay()": FunctionFragment;
    "beaconChainETHStrategy()": FunctionFragment;
    "calculateEarnerLeafHash((address,bytes32))": FunctionFragment;
    "calculateTokenLeafHash((address,uint256))": FunctionFragment;
    "checkClaim((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[]))": FunctionFragment;
    "claimerFor(address)": FunctionFragment;
    "createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])": FunctionFragment;
    "createOperatorDirectedAVSRewardsSubmission(address,((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])": FunctionFragment;
    "createRewardsForAllEarners(((address,uint96)[],address,uint256,uint32,uint32)[])": FunctionFragment;
    "createRewardsForAllSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])": FunctionFragment;
    "cumulativeClaimed(address,address)": FunctionFragment;
    "currRewardsCalculationEndTimestamp()": FunctionFragment;
    "defaultOperatorSplitBips()": FunctionFragment;
    "delegationManager()": FunctionFragment;
    "disableRoot(uint32)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "getCurrentClaimableDistributionRoot()": FunctionFragment;
    "getCurrentDistributionRoot()": FunctionFragment;
    "getDistributionRootAtIndex(uint256)": FunctionFragment;
    "getDistributionRootsLength()": FunctionFragment;
    "getOperatorAVSSplit(address,address)": FunctionFragment;
    "getOperatorPISplit(address)": FunctionFragment;
    "getRootIndexFromHash(bytes32)": FunctionFragment;
    "initialize(address,address,uint256,address,uint32,uint16)": FunctionFragment;
    "isAVSRewardsSubmissionHash(address,bytes32)": FunctionFragment;
    "isOperatorDirectedAVSRewardsSubmissionHash(address,bytes32)": FunctionFragment;
    "isRewardsForAllSubmitter(address)": FunctionFragment;
    "isRewardsSubmissionForAllEarnersHash(address,bytes32)": FunctionFragment;
    "isRewardsSubmissionForAllHash(address,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "pauseAll()": FunctionFragment;
    "paused(uint8)": FunctionFragment;
    "paused()": FunctionFragment;
    "pauserRegistry()": FunctionFragment;
    "processClaim((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[]),address)": FunctionFragment;
    "processClaims((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[])[],address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsUpdater()": FunctionFragment;
    "setActivationDelay(uint32)": FunctionFragment;
    "setClaimerFor(address)": FunctionFragment;
    "setDefaultOperatorSplit(uint16)": FunctionFragment;
    "setOperatorAVSSplit(address,address,uint16)": FunctionFragment;
    "setOperatorPISplit(address,uint16)": FunctionFragment;
    "setPauserRegistry(address)": FunctionFragment;
    "setRewardsForAllSubmitter(address,bool)": FunctionFragment;
    "setRewardsUpdater(address)": FunctionFragment;
    "strategyManager()": FunctionFragment;
    "submissionNonce(address)": FunctionFragment;
    "submitRoot(bytes32,uint32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CALCULATION_INTERVAL_SECONDS"
      | "GENESIS_REWARDS_TIMESTAMP"
      | "MAX_FUTURE_LENGTH"
      | "MAX_RETROACTIVE_LENGTH"
      | "MAX_REWARDS_DURATION"
      | "activationDelay"
      | "beaconChainETHStrategy"
      | "calculateEarnerLeafHash"
      | "calculateTokenLeafHash"
      | "checkClaim"
      | "claimerFor"
      | "createAVSRewardsSubmission"
      | "createOperatorDirectedAVSRewardsSubmission"
      | "createRewardsForAllEarners"
      | "createRewardsForAllSubmission"
      | "cumulativeClaimed"
      | "currRewardsCalculationEndTimestamp"
      | "defaultOperatorSplitBips"
      | "delegationManager"
      | "disableRoot"
      | "domainSeparator"
      | "getCurrentClaimableDistributionRoot"
      | "getCurrentDistributionRoot"
      | "getDistributionRootAtIndex"
      | "getDistributionRootsLength"
      | "getOperatorAVSSplit"
      | "getOperatorPISplit"
      | "getRootIndexFromHash"
      | "initialize"
      | "isAVSRewardsSubmissionHash"
      | "isOperatorDirectedAVSRewardsSubmissionHash"
      | "isRewardsForAllSubmitter"
      | "isRewardsSubmissionForAllEarnersHash"
      | "isRewardsSubmissionForAllHash"
      | "owner"
      | "pause"
      | "pauseAll"
      | "paused(uint8)"
      | "paused()"
      | "pauserRegistry"
      | "processClaim"
      | "processClaims"
      | "renounceOwnership"
      | "rewardsUpdater"
      | "setActivationDelay"
      | "setClaimerFor"
      | "setDefaultOperatorSplit"
      | "setOperatorAVSSplit"
      | "setOperatorPISplit"
      | "setPauserRegistry"
      | "setRewardsForAllSubmitter"
      | "setRewardsUpdater"
      | "strategyManager"
      | "submissionNonce"
      | "submitRoot"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CALCULATION_INTERVAL_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GENESIS_REWARDS_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FUTURE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_RETROACTIVE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARDS_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activationDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beaconChainETHStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateEarnerLeafHash",
    values: [IRewardsCoordinator.EarnerTreeMerkleLeafStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenLeafHash",
    values: [IRewardsCoordinator.TokenTreeMerkleLeafStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "checkClaim",
    values: [IRewardsCoordinator.RewardsMerkleClaimStruct]
  ): string;
  encodeFunctionData(functionFragment: "claimerFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createAVSRewardsSubmission",
    values: [IRewardsCoordinator.RewardsSubmissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createOperatorDirectedAVSRewardsSubmission",
    values: [
      string,
      IRewardsCoordinator.OperatorDirectedRewardsSubmissionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRewardsForAllEarners",
    values: [IRewardsCoordinator.RewardsSubmissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createRewardsForAllSubmission",
    values: [IRewardsCoordinator.RewardsSubmissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeClaimed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "currRewardsCalculationEndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOperatorSplitBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentClaimableDistributionRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDistributionRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionRootAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionRootsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorAVSSplit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorPISplit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRootIndexFromHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAVSRewardsSubmissionHash",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorDirectedAVSRewardsSubmissionHash",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRewardsForAllSubmitter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRewardsSubmissionForAllEarnersHash",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRewardsSubmissionForAllHash",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pauseAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paused(uint8)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauserRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processClaim",
    values: [IRewardsCoordinator.RewardsMerkleClaimStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "processClaims",
    values: [IRewardsCoordinator.RewardsMerkleClaimStruct[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActivationDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimerFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultOperatorSplit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorAVSSplit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorPISplit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauserRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsForAllSubmitter",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsUpdater",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissionNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitRoot",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CALCULATION_INTERVAL_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GENESIS_REWARDS_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FUTURE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RETROACTIVE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARDS_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beaconChainETHStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateEarnerLeafHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenLeafHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimerFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAVSRewardsSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOperatorDirectedAVSRewardsSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRewardsForAllEarners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRewardsForAllSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currRewardsCalculationEndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOperatorSplitBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentClaimableDistributionRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDistributionRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionRootAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionRootsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorAVSSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorPISplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRootIndexFromHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAVSRewardsSubmissionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorDirectedAVSRewardsSubmissionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRewardsForAllSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRewardsSubmissionForAllEarnersHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRewardsSubmissionForAllHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paused(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActivationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultOperatorSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorAVSSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorPISplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsForAllSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AVSRewardsSubmissionCreated(address,uint256,bytes32,((address,uint96)[],address,uint256,uint32,uint32))": EventFragment;
    "ActivationDelaySet(uint32,uint32)": EventFragment;
    "ClaimerForSet(address,address,address)": EventFragment;
    "DefaultOperatorSplitBipsSet(uint16,uint16)": EventFragment;
    "DistributionRootDisabled(uint32)": EventFragment;
    "DistributionRootSubmitted(uint32,bytes32,uint32,uint32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OperatorAVSSplitBipsSet(address,address,address,uint32,uint16,uint16)": EventFragment;
    "OperatorDirectedAVSRewardsSubmissionCreated(address,address,bytes32,uint256,((address,uint96)[],address,(address,uint256)[],uint32,uint32,string))": EventFragment;
    "OperatorPISplitBipsSet(address,address,uint32,uint16,uint16)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address,uint256)": EventFragment;
    "PauserRegistrySet(address,address)": EventFragment;
    "RewardsClaimed(bytes32,address,address,address,address,uint256)": EventFragment;
    "RewardsForAllSubmitterSet(address,bool,bool)": EventFragment;
    "RewardsSubmissionForAllCreated(address,uint256,bytes32,((address,uint96)[],address,uint256,uint32,uint32))": EventFragment;
    "RewardsSubmissionForAllEarnersCreated(address,uint256,bytes32,((address,uint96)[],address,uint256,uint32,uint32))": EventFragment;
    "RewardsUpdaterSet(address,address)": EventFragment;
    "Unpaused(address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AVSRewardsSubmissionCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActivationDelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimerForSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultOperatorSplitBipsSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionRootDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionRootSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorAVSSplitBipsSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OperatorDirectedAVSRewardsSubmissionCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorPISplitBipsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsForAllSubmitterSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardsSubmissionForAllCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardsSubmissionForAllEarnersCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsUpdaterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AVSRewardsSubmissionCreatedEventObject {
  avs: string;
  submissionNonce: BigNumber;
  rewardsSubmissionHash: string;
  rewardsSubmission: IRewardsCoordinator.RewardsSubmissionStructOutput;
}
export type AVSRewardsSubmissionCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    IRewardsCoordinator.RewardsSubmissionStructOutput
  ],
  AVSRewardsSubmissionCreatedEventObject
>;

export type AVSRewardsSubmissionCreatedEventFilter =
  TypedEventFilter<AVSRewardsSubmissionCreatedEvent>;

export interface ActivationDelaySetEventObject {
  oldActivationDelay: number;
  newActivationDelay: number;
}
export type ActivationDelaySetEvent = TypedEvent<
  [number, number],
  ActivationDelaySetEventObject
>;

export type ActivationDelaySetEventFilter =
  TypedEventFilter<ActivationDelaySetEvent>;

export interface ClaimerForSetEventObject {
  earner: string;
  oldClaimer: string;
  claimer: string;
}
export type ClaimerForSetEvent = TypedEvent<
  [string, string, string],
  ClaimerForSetEventObject
>;

export type ClaimerForSetEventFilter = TypedEventFilter<ClaimerForSetEvent>;

export interface DefaultOperatorSplitBipsSetEventObject {
  oldDefaultOperatorSplitBips: number;
  newDefaultOperatorSplitBips: number;
}
export type DefaultOperatorSplitBipsSetEvent = TypedEvent<
  [number, number],
  DefaultOperatorSplitBipsSetEventObject
>;

export type DefaultOperatorSplitBipsSetEventFilter =
  TypedEventFilter<DefaultOperatorSplitBipsSetEvent>;

export interface DistributionRootDisabledEventObject {
  rootIndex: number;
}
export type DistributionRootDisabledEvent = TypedEvent<
  [number],
  DistributionRootDisabledEventObject
>;

export type DistributionRootDisabledEventFilter =
  TypedEventFilter<DistributionRootDisabledEvent>;

export interface DistributionRootSubmittedEventObject {
  rootIndex: number;
  root: string;
  rewardsCalculationEndTimestamp: number;
  activatedAt: number;
}
export type DistributionRootSubmittedEvent = TypedEvent<
  [number, string, number, number],
  DistributionRootSubmittedEventObject
>;

export type DistributionRootSubmittedEventFilter =
  TypedEventFilter<DistributionRootSubmittedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OperatorAVSSplitBipsSetEventObject {
  caller: string;
  operator: string;
  avs: string;
  activatedAt: number;
  oldOperatorAVSSplitBips: number;
  newOperatorAVSSplitBips: number;
}
export type OperatorAVSSplitBipsSetEvent = TypedEvent<
  [string, string, string, number, number, number],
  OperatorAVSSplitBipsSetEventObject
>;

export type OperatorAVSSplitBipsSetEventFilter =
  TypedEventFilter<OperatorAVSSplitBipsSetEvent>;

export interface OperatorDirectedAVSRewardsSubmissionCreatedEventObject {
  caller: string;
  avs: string;
  operatorDirectedRewardsSubmissionHash: string;
  submissionNonce: BigNumber;
  operatorDirectedRewardsSubmission: IRewardsCoordinator.OperatorDirectedRewardsSubmissionStructOutput;
}
export type OperatorDirectedAVSRewardsSubmissionCreatedEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    IRewardsCoordinator.OperatorDirectedRewardsSubmissionStructOutput
  ],
  OperatorDirectedAVSRewardsSubmissionCreatedEventObject
>;

export type OperatorDirectedAVSRewardsSubmissionCreatedEventFilter =
  TypedEventFilter<OperatorDirectedAVSRewardsSubmissionCreatedEvent>;

export interface OperatorPISplitBipsSetEventObject {
  caller: string;
  operator: string;
  activatedAt: number;
  oldOperatorPISplitBips: number;
  newOperatorPISplitBips: number;
}
export type OperatorPISplitBipsSetEvent = TypedEvent<
  [string, string, number, number, number],
  OperatorPISplitBipsSetEventObject
>;

export type OperatorPISplitBipsSetEventFilter =
  TypedEventFilter<OperatorPISplitBipsSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type PausedEvent = TypedEvent<[string, BigNumber], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PauserRegistrySetEventObject {
  pauserRegistry: string;
  newPauserRegistry: string;
}
export type PauserRegistrySetEvent = TypedEvent<
  [string, string],
  PauserRegistrySetEventObject
>;

export type PauserRegistrySetEventFilter =
  TypedEventFilter<PauserRegistrySetEvent>;

export interface RewardsClaimedEventObject {
  root: string;
  earner: string;
  claimer: string;
  recipient: string;
  token: string;
  claimedAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface RewardsForAllSubmitterSetEventObject {
  rewardsForAllSubmitter: string;
  oldValue: boolean;
  newValue: boolean;
}
export type RewardsForAllSubmitterSetEvent = TypedEvent<
  [string, boolean, boolean],
  RewardsForAllSubmitterSetEventObject
>;

export type RewardsForAllSubmitterSetEventFilter =
  TypedEventFilter<RewardsForAllSubmitterSetEvent>;

export interface RewardsSubmissionForAllCreatedEventObject {
  submitter: string;
  submissionNonce: BigNumber;
  rewardsSubmissionHash: string;
  rewardsSubmission: IRewardsCoordinator.RewardsSubmissionStructOutput;
}
export type RewardsSubmissionForAllCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    IRewardsCoordinator.RewardsSubmissionStructOutput
  ],
  RewardsSubmissionForAllCreatedEventObject
>;

export type RewardsSubmissionForAllCreatedEventFilter =
  TypedEventFilter<RewardsSubmissionForAllCreatedEvent>;

export interface RewardsSubmissionForAllEarnersCreatedEventObject {
  tokenHopper: string;
  submissionNonce: BigNumber;
  rewardsSubmissionHash: string;
  rewardsSubmission: IRewardsCoordinator.RewardsSubmissionStructOutput;
}
export type RewardsSubmissionForAllEarnersCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    IRewardsCoordinator.RewardsSubmissionStructOutput
  ],
  RewardsSubmissionForAllEarnersCreatedEventObject
>;

export type RewardsSubmissionForAllEarnersCreatedEventFilter =
  TypedEventFilter<RewardsSubmissionForAllEarnersCreatedEvent>;

export interface RewardsUpdaterSetEventObject {
  oldRewardsUpdater: string;
  newRewardsUpdater: string;
}
export type RewardsUpdaterSetEvent = TypedEvent<
  [string, string],
  RewardsUpdaterSetEventObject
>;

export type RewardsUpdaterSetEventFilter =
  TypedEventFilter<RewardsUpdaterSetEvent>;

export interface UnpausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type UnpausedEvent = TypedEvent<
  [string, BigNumber],
  UnpausedEventObject
>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface RewardsCoordinator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardsCoordinatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CALCULATION_INTERVAL_SECONDS(overrides?: CallOverrides): Promise<[number]>;

    GENESIS_REWARDS_TIMESTAMP(overrides?: CallOverrides): Promise<[number]>;

    MAX_FUTURE_LENGTH(overrides?: CallOverrides): Promise<[number]>;

    MAX_RETROACTIVE_LENGTH(overrides?: CallOverrides): Promise<[number]>;

    MAX_REWARDS_DURATION(overrides?: CallOverrides): Promise<[number]>;

    activationDelay(overrides?: CallOverrides): Promise<[number]>;

    beaconChainETHStrategy(overrides?: CallOverrides): Promise<[string]>;

    calculateEarnerLeafHash(
      leaf: IRewardsCoordinator.EarnerTreeMerkleLeafStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    calculateTokenLeafHash(
      leaf: IRewardsCoordinator.TokenTreeMerkleLeafStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkClaim(
      claim: IRewardsCoordinator.RewardsMerkleClaimStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimerFor(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    createAVSRewardsSubmission(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createOperatorDirectedAVSRewardsSubmission(
      avs: string,
      operatorDirectedRewardsSubmissions: IRewardsCoordinator.OperatorDirectedRewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createRewardsForAllEarners(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createRewardsForAllSubmission(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cumulativeClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currRewardsCalculationEndTimestamp(
      overrides?: CallOverrides
    ): Promise<[number]>;

    defaultOperatorSplitBips(overrides?: CallOverrides): Promise<[number]>;

    delegationManager(overrides?: CallOverrides): Promise<[string]>;

    disableRoot(
      rootIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getCurrentClaimableDistributionRoot(
      overrides?: CallOverrides
    ): Promise<[IRewardsCoordinator.DistributionRootStructOutput]>;

    getCurrentDistributionRoot(
      overrides?: CallOverrides
    ): Promise<[IRewardsCoordinator.DistributionRootStructOutput]>;

    getDistributionRootAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IRewardsCoordinator.DistributionRootStructOutput]>;

    getDistributionRootsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOperatorAVSSplit(
      operator: string,
      avs: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getOperatorPISplit(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getRootIndexFromHash(
      rootHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initialize(
      initialOwner: string,
      _pauserRegistry: string,
      initialPausedStatus: BigNumberish,
      _rewardsUpdater: string,
      _activationDelay: BigNumberish,
      _defaultSplitBips: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isAVSRewardsSubmissionHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperatorDirectedAVSRewardsSubmissionHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRewardsForAllSubmitter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRewardsSubmissionForAllEarnersHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRewardsSubmissionForAllHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pauserRegistry(overrides?: CallOverrides): Promise<[string]>;

    processClaim(
      claim: IRewardsCoordinator.RewardsMerkleClaimStruct,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    processClaims(
      claims: IRewardsCoordinator.RewardsMerkleClaimStruct[],
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardsUpdater(overrides?: CallOverrides): Promise<[string]>;

    setActivationDelay(
      _activationDelay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setClaimerFor(
      claimer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDefaultOperatorSplit(
      split: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOperatorAVSSplit(
      operator: string,
      avs: string,
      split: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOperatorPISplit(
      operator: string,
      split: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPauserRegistry(
      newPauserRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRewardsForAllSubmitter(
      _submitter: string,
      _newValue: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRewardsUpdater(
      _rewardsUpdater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    strategyManager(overrides?: CallOverrides): Promise<[string]>;

    submissionNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    submitRoot(
      root: BytesLike,
      rewardsCalculationEndTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CALCULATION_INTERVAL_SECONDS(overrides?: CallOverrides): Promise<number>;

  GENESIS_REWARDS_TIMESTAMP(overrides?: CallOverrides): Promise<number>;

  MAX_FUTURE_LENGTH(overrides?: CallOverrides): Promise<number>;

  MAX_RETROACTIVE_LENGTH(overrides?: CallOverrides): Promise<number>;

  MAX_REWARDS_DURATION(overrides?: CallOverrides): Promise<number>;

  activationDelay(overrides?: CallOverrides): Promise<number>;

  beaconChainETHStrategy(overrides?: CallOverrides): Promise<string>;

  calculateEarnerLeafHash(
    leaf: IRewardsCoordinator.EarnerTreeMerkleLeafStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  calculateTokenLeafHash(
    leaf: IRewardsCoordinator.TokenTreeMerkleLeafStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  checkClaim(
    claim: IRewardsCoordinator.RewardsMerkleClaimStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimerFor(arg0: string, overrides?: CallOverrides): Promise<string>;

  createAVSRewardsSubmission(
    rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createOperatorDirectedAVSRewardsSubmission(
    avs: string,
    operatorDirectedRewardsSubmissions: IRewardsCoordinator.OperatorDirectedRewardsSubmissionStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createRewardsForAllEarners(
    rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createRewardsForAllSubmission(
    rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cumulativeClaimed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currRewardsCalculationEndTimestamp(
    overrides?: CallOverrides
  ): Promise<number>;

  defaultOperatorSplitBips(overrides?: CallOverrides): Promise<number>;

  delegationManager(overrides?: CallOverrides): Promise<string>;

  disableRoot(
    rootIndex: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  getCurrentClaimableDistributionRoot(
    overrides?: CallOverrides
  ): Promise<IRewardsCoordinator.DistributionRootStructOutput>;

  getCurrentDistributionRoot(
    overrides?: CallOverrides
  ): Promise<IRewardsCoordinator.DistributionRootStructOutput>;

  getDistributionRootAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IRewardsCoordinator.DistributionRootStructOutput>;

  getDistributionRootsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getOperatorAVSSplit(
    operator: string,
    avs: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getOperatorPISplit(
    operator: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getRootIndexFromHash(
    rootHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  initialize(
    initialOwner: string,
    _pauserRegistry: string,
    initialPausedStatus: BigNumberish,
    _rewardsUpdater: string,
    _activationDelay: BigNumberish,
    _defaultSplitBips: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isAVSRewardsSubmissionHash(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorDirectedAVSRewardsSubmissionHash(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRewardsForAllSubmitter(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRewardsSubmissionForAllEarnersHash(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRewardsSubmissionForAllHash(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseAll(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "paused(uint8)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

  pauserRegistry(overrides?: CallOverrides): Promise<string>;

  processClaim(
    claim: IRewardsCoordinator.RewardsMerkleClaimStruct,
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  processClaims(
    claims: IRewardsCoordinator.RewardsMerkleClaimStruct[],
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardsUpdater(overrides?: CallOverrides): Promise<string>;

  setActivationDelay(
    _activationDelay: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setClaimerFor(
    claimer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDefaultOperatorSplit(
    split: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOperatorAVSSplit(
    operator: string,
    avs: string,
    split: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOperatorPISplit(
    operator: string,
    split: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPauserRegistry(
    newPauserRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRewardsForAllSubmitter(
    _submitter: string,
    _newValue: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRewardsUpdater(
    _rewardsUpdater: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  strategyManager(overrides?: CallOverrides): Promise<string>;

  submissionNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  submitRoot(
    root: BytesLike,
    rewardsCalculationEndTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CALCULATION_INTERVAL_SECONDS(overrides?: CallOverrides): Promise<number>;

    GENESIS_REWARDS_TIMESTAMP(overrides?: CallOverrides): Promise<number>;

    MAX_FUTURE_LENGTH(overrides?: CallOverrides): Promise<number>;

    MAX_RETROACTIVE_LENGTH(overrides?: CallOverrides): Promise<number>;

    MAX_REWARDS_DURATION(overrides?: CallOverrides): Promise<number>;

    activationDelay(overrides?: CallOverrides): Promise<number>;

    beaconChainETHStrategy(overrides?: CallOverrides): Promise<string>;

    calculateEarnerLeafHash(
      leaf: IRewardsCoordinator.EarnerTreeMerkleLeafStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    calculateTokenLeafHash(
      leaf: IRewardsCoordinator.TokenTreeMerkleLeafStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    checkClaim(
      claim: IRewardsCoordinator.RewardsMerkleClaimStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimerFor(arg0: string, overrides?: CallOverrides): Promise<string>;

    createAVSRewardsSubmission(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    createOperatorDirectedAVSRewardsSubmission(
      avs: string,
      operatorDirectedRewardsSubmissions: IRewardsCoordinator.OperatorDirectedRewardsSubmissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    createRewardsForAllEarners(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    createRewardsForAllSubmission(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    cumulativeClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currRewardsCalculationEndTimestamp(
      overrides?: CallOverrides
    ): Promise<number>;

    defaultOperatorSplitBips(overrides?: CallOverrides): Promise<number>;

    delegationManager(overrides?: CallOverrides): Promise<string>;

    disableRoot(
      rootIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    getCurrentClaimableDistributionRoot(
      overrides?: CallOverrides
    ): Promise<IRewardsCoordinator.DistributionRootStructOutput>;

    getCurrentDistributionRoot(
      overrides?: CallOverrides
    ): Promise<IRewardsCoordinator.DistributionRootStructOutput>;

    getDistributionRootAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IRewardsCoordinator.DistributionRootStructOutput>;

    getDistributionRootsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getOperatorAVSSplit(
      operator: string,
      avs: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getOperatorPISplit(
      operator: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getRootIndexFromHash(
      rootHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    initialize(
      initialOwner: string,
      _pauserRegistry: string,
      initialPausedStatus: BigNumberish,
      _rewardsUpdater: string,
      _activationDelay: BigNumberish,
      _defaultSplitBips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isAVSRewardsSubmissionHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorDirectedAVSRewardsSubmissionHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRewardsForAllSubmitter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRewardsSubmissionForAllEarnersHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRewardsSubmissionForAllHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseAll(overrides?: CallOverrides): Promise<void>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<string>;

    processClaim(
      claim: IRewardsCoordinator.RewardsMerkleClaimStruct,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    processClaims(
      claims: IRewardsCoordinator.RewardsMerkleClaimStruct[],
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsUpdater(overrides?: CallOverrides): Promise<string>;

    setActivationDelay(
      _activationDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimerFor(claimer: string, overrides?: CallOverrides): Promise<void>;

    setDefaultOperatorSplit(
      split: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperatorAVSSplit(
      operator: string,
      avs: string,
      split: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperatorPISplit(
      operator: string,
      split: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauserRegistry(
      newPauserRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsForAllSubmitter(
      _submitter: string,
      _newValue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsUpdater(
      _rewardsUpdater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyManager(overrides?: CallOverrides): Promise<string>;

    submissionNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitRoot(
      root: BytesLike,
      rewardsCalculationEndTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AVSRewardsSubmissionCreated(address,uint256,bytes32,((address,uint96)[],address,uint256,uint32,uint32))"(
      avs?: string | null,
      submissionNonce?: BigNumberish | null,
      rewardsSubmissionHash?: BytesLike | null,
      rewardsSubmission?: null
    ): AVSRewardsSubmissionCreatedEventFilter;
    AVSRewardsSubmissionCreated(
      avs?: string | null,
      submissionNonce?: BigNumberish | null,
      rewardsSubmissionHash?: BytesLike | null,
      rewardsSubmission?: null
    ): AVSRewardsSubmissionCreatedEventFilter;

    "ActivationDelaySet(uint32,uint32)"(
      oldActivationDelay?: null,
      newActivationDelay?: null
    ): ActivationDelaySetEventFilter;
    ActivationDelaySet(
      oldActivationDelay?: null,
      newActivationDelay?: null
    ): ActivationDelaySetEventFilter;

    "ClaimerForSet(address,address,address)"(
      earner?: string | null,
      oldClaimer?: string | null,
      claimer?: string | null
    ): ClaimerForSetEventFilter;
    ClaimerForSet(
      earner?: string | null,
      oldClaimer?: string | null,
      claimer?: string | null
    ): ClaimerForSetEventFilter;

    "DefaultOperatorSplitBipsSet(uint16,uint16)"(
      oldDefaultOperatorSplitBips?: null,
      newDefaultOperatorSplitBips?: null
    ): DefaultOperatorSplitBipsSetEventFilter;
    DefaultOperatorSplitBipsSet(
      oldDefaultOperatorSplitBips?: null,
      newDefaultOperatorSplitBips?: null
    ): DefaultOperatorSplitBipsSetEventFilter;

    "DistributionRootDisabled(uint32)"(
      rootIndex?: BigNumberish | null
    ): DistributionRootDisabledEventFilter;
    DistributionRootDisabled(
      rootIndex?: BigNumberish | null
    ): DistributionRootDisabledEventFilter;

    "DistributionRootSubmitted(uint32,bytes32,uint32,uint32)"(
      rootIndex?: BigNumberish | null,
      root?: BytesLike | null,
      rewardsCalculationEndTimestamp?: BigNumberish | null,
      activatedAt?: null
    ): DistributionRootSubmittedEventFilter;
    DistributionRootSubmitted(
      rootIndex?: BigNumberish | null,
      root?: BytesLike | null,
      rewardsCalculationEndTimestamp?: BigNumberish | null,
      activatedAt?: null
    ): DistributionRootSubmittedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OperatorAVSSplitBipsSet(address,address,address,uint32,uint16,uint16)"(
      caller?: string | null,
      operator?: string | null,
      avs?: string | null,
      activatedAt?: null,
      oldOperatorAVSSplitBips?: null,
      newOperatorAVSSplitBips?: null
    ): OperatorAVSSplitBipsSetEventFilter;
    OperatorAVSSplitBipsSet(
      caller?: string | null,
      operator?: string | null,
      avs?: string | null,
      activatedAt?: null,
      oldOperatorAVSSplitBips?: null,
      newOperatorAVSSplitBips?: null
    ): OperatorAVSSplitBipsSetEventFilter;

    "OperatorDirectedAVSRewardsSubmissionCreated(address,address,bytes32,uint256,((address,uint96)[],address,(address,uint256)[],uint32,uint32,string))"(
      caller?: string | null,
      avs?: string | null,
      operatorDirectedRewardsSubmissionHash?: BytesLike | null,
      submissionNonce?: null,
      operatorDirectedRewardsSubmission?: null
    ): OperatorDirectedAVSRewardsSubmissionCreatedEventFilter;
    OperatorDirectedAVSRewardsSubmissionCreated(
      caller?: string | null,
      avs?: string | null,
      operatorDirectedRewardsSubmissionHash?: BytesLike | null,
      submissionNonce?: null,
      operatorDirectedRewardsSubmission?: null
    ): OperatorDirectedAVSRewardsSubmissionCreatedEventFilter;

    "OperatorPISplitBipsSet(address,address,uint32,uint16,uint16)"(
      caller?: string | null,
      operator?: string | null,
      activatedAt?: null,
      oldOperatorPISplitBips?: null,
      newOperatorPISplitBips?: null
    ): OperatorPISplitBipsSetEventFilter;
    OperatorPISplitBipsSet(
      caller?: string | null,
      operator?: string | null,
      activatedAt?: null,
      oldOperatorPISplitBips?: null,
      newOperatorPISplitBips?: null
    ): OperatorPISplitBipsSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): PausedEventFilter;
    Paused(account?: string | null, newPausedStatus?: null): PausedEventFilter;

    "PauserRegistrySet(address,address)"(
      pauserRegistry?: null,
      newPauserRegistry?: null
    ): PauserRegistrySetEventFilter;
    PauserRegistrySet(
      pauserRegistry?: null,
      newPauserRegistry?: null
    ): PauserRegistrySetEventFilter;

    "RewardsClaimed(bytes32,address,address,address,address,uint256)"(
      root?: null,
      earner?: string | null,
      claimer?: string | null,
      recipient?: string | null,
      token?: null,
      claimedAmount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      root?: null,
      earner?: string | null,
      claimer?: string | null,
      recipient?: string | null,
      token?: null,
      claimedAmount?: null
    ): RewardsClaimedEventFilter;

    "RewardsForAllSubmitterSet(address,bool,bool)"(
      rewardsForAllSubmitter?: string | null,
      oldValue?: boolean | null,
      newValue?: boolean | null
    ): RewardsForAllSubmitterSetEventFilter;
    RewardsForAllSubmitterSet(
      rewardsForAllSubmitter?: string | null,
      oldValue?: boolean | null,
      newValue?: boolean | null
    ): RewardsForAllSubmitterSetEventFilter;

    "RewardsSubmissionForAllCreated(address,uint256,bytes32,((address,uint96)[],address,uint256,uint32,uint32))"(
      submitter?: string | null,
      submissionNonce?: BigNumberish | null,
      rewardsSubmissionHash?: BytesLike | null,
      rewardsSubmission?: null
    ): RewardsSubmissionForAllCreatedEventFilter;
    RewardsSubmissionForAllCreated(
      submitter?: string | null,
      submissionNonce?: BigNumberish | null,
      rewardsSubmissionHash?: BytesLike | null,
      rewardsSubmission?: null
    ): RewardsSubmissionForAllCreatedEventFilter;

    "RewardsSubmissionForAllEarnersCreated(address,uint256,bytes32,((address,uint96)[],address,uint256,uint32,uint32))"(
      tokenHopper?: string | null,
      submissionNonce?: BigNumberish | null,
      rewardsSubmissionHash?: BytesLike | null,
      rewardsSubmission?: null
    ): RewardsSubmissionForAllEarnersCreatedEventFilter;
    RewardsSubmissionForAllEarnersCreated(
      tokenHopper?: string | null,
      submissionNonce?: BigNumberish | null,
      rewardsSubmissionHash?: BytesLike | null,
      rewardsSubmission?: null
    ): RewardsSubmissionForAllEarnersCreatedEventFilter;

    "RewardsUpdaterSet(address,address)"(
      oldRewardsUpdater?: string | null,
      newRewardsUpdater?: string | null
    ): RewardsUpdaterSetEventFilter;
    RewardsUpdaterSet(
      oldRewardsUpdater?: string | null,
      newRewardsUpdater?: string | null
    ): RewardsUpdaterSetEventFilter;

    "Unpaused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
    Unpaused(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
  };

  estimateGas: {
    CALCULATION_INTERVAL_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    GENESIS_REWARDS_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUTURE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RETROACTIVE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARDS_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    activationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    beaconChainETHStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    calculateEarnerLeafHash(
      leaf: IRewardsCoordinator.EarnerTreeMerkleLeafStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenLeafHash(
      leaf: IRewardsCoordinator.TokenTreeMerkleLeafStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkClaim(
      claim: IRewardsCoordinator.RewardsMerkleClaimStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimerFor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createAVSRewardsSubmission(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createOperatorDirectedAVSRewardsSubmission(
      avs: string,
      operatorDirectedRewardsSubmissions: IRewardsCoordinator.OperatorDirectedRewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createRewardsForAllEarners(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createRewardsForAllSubmission(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cumulativeClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currRewardsCalculationEndTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultOperatorSplitBips(overrides?: CallOverrides): Promise<BigNumber>;

    delegationManager(overrides?: CallOverrides): Promise<BigNumber>;

    disableRoot(
      rootIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentClaimableDistributionRoot(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentDistributionRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionRootAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionRootsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getOperatorAVSSplit(
      operator: string,
      avs: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorPISplit(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRootIndexFromHash(
      rootHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      initialOwner: string,
      _pauserRegistry: string,
      initialPausedStatus: BigNumberish,
      _rewardsUpdater: string,
      _activationDelay: BigNumberish,
      _defaultSplitBips: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isAVSRewardsSubmissionHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorDirectedAVSRewardsSubmissionHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRewardsForAllSubmitter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRewardsSubmissionForAllEarnersHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRewardsSubmissionForAllHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseAll(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    processClaim(
      claim: IRewardsCoordinator.RewardsMerkleClaimStruct,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    processClaims(
      claims: IRewardsCoordinator.RewardsMerkleClaimStruct[],
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardsUpdater(overrides?: CallOverrides): Promise<BigNumber>;

    setActivationDelay(
      _activationDelay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setClaimerFor(
      claimer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDefaultOperatorSplit(
      split: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOperatorAVSSplit(
      operator: string,
      avs: string,
      split: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOperatorPISplit(
      operator: string,
      split: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPauserRegistry(
      newPauserRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRewardsForAllSubmitter(
      _submitter: string,
      _newValue: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRewardsUpdater(
      _rewardsUpdater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    strategyManager(overrides?: CallOverrides): Promise<BigNumber>;

    submissionNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitRoot(
      root: BytesLike,
      rewardsCalculationEndTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CALCULATION_INTERVAL_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GENESIS_REWARDS_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FUTURE_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_RETROACTIVE_LENGTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_REWARDS_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activationDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beaconChainETHStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateEarnerLeafHash(
      leaf: IRewardsCoordinator.EarnerTreeMerkleLeafStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTokenLeafHash(
      leaf: IRewardsCoordinator.TokenTreeMerkleLeafStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkClaim(
      claim: IRewardsCoordinator.RewardsMerkleClaimStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimerFor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAVSRewardsSubmission(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createOperatorDirectedAVSRewardsSubmission(
      avs: string,
      operatorDirectedRewardsSubmissions: IRewardsCoordinator.OperatorDirectedRewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createRewardsForAllEarners(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createRewardsForAllSubmission(
      rewardsSubmissions: IRewardsCoordinator.RewardsSubmissionStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cumulativeClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currRewardsCalculationEndTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultOperatorSplitBips(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegationManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableRoot(
      rootIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentClaimableDistributionRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDistributionRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionRootAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionRootsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorAVSSplit(
      operator: string,
      avs: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorPISplit(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRootIndexFromHash(
      rootHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      initialOwner: string,
      _pauserRegistry: string,
      initialPausedStatus: BigNumberish,
      _rewardsUpdater: string,
      _activationDelay: BigNumberish,
      _defaultSplitBips: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isAVSRewardsSubmissionHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorDirectedAVSRewardsSubmissionHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRewardsForAllSubmitter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRewardsSubmissionForAllEarnersHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRewardsSubmissionForAllHash(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauserRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processClaim(
      claim: IRewardsCoordinator.RewardsMerkleClaimStruct,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    processClaims(
      claims: IRewardsCoordinator.RewardsMerkleClaimStruct[],
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardsUpdater(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setActivationDelay(
      _activationDelay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setClaimerFor(
      claimer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDefaultOperatorSplit(
      split: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOperatorAVSSplit(
      operator: string,
      avs: string,
      split: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOperatorPISplit(
      operator: string,
      split: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPauserRegistry(
      newPauserRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRewardsForAllSubmitter(
      _submitter: string,
      _newValue: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRewardsUpdater(
      _rewardsUpdater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    strategyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submissionNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitRoot(
      root: BytesLike,
      rewardsCalculationEndTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
