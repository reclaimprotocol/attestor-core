/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ECDSAStakeRegistry,
  ECDSAStakeRegistryInterface,
} from "../ECDSAStakeRegistry";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_delegationManager",
        type: "address",
        internalType: "contract IDelegationManager",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deregisterOperator",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getLastCheckpointOperatorWeight",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointThresholdWeight",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointThresholdWeightAtBlock",
    inputs: [
      {
        name: "_blockNumber",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointTotalWeight",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointTotalWeightAtBlock",
    inputs: [
      {
        name: "_blockNumber",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastestOperatorSigningKey",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOperatorSigningKeyAtBlock",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "_blockNumber",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOperatorWeight",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOperatorWeightAtBlock",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "_blockNumber",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_serviceManager",
        type: "address",
        internalType: "address",
      },
      {
        name: "_thresholdWeight",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_quorum",
        type: "tuple",
        internalType: "struct Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "isValidSignature",
    inputs: [
      {
        name: "_dataHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_signatureData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "minimumWeight",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "operatorRegistered",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "quorum",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "registerOperatorWithSignature",
    inputs: [
      {
        name: "_operatorSignature",
        type: "tuple",
        internalType: "struct ISignatureUtils.SignatureWithSaltAndExpiry",
        components: [
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "salt",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "expiry",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "_signingKey",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateMinimumWeight",
    inputs: [
      {
        name: "_newMinimumWeight",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_operators",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateOperatorSigningKey",
    inputs: [
      {
        name: "_newSigningKey",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateOperators",
    inputs: [
      {
        name: "_operators",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateOperatorsForQuorum",
    inputs: [
      {
        name: "operatorsPerQuorum",
        type: "address[][]",
        internalType: "address[][]",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateQuorumConfig",
    inputs: [
      {
        name: "_quorum",
        type: "tuple",
        internalType: "struct Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
      {
        name: "_operators",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateStakeThreshold",
    inputs: [
      {
        name: "_thresholdWeight",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "MinimumWeightUpdated",
    inputs: [
      {
        name: "_old",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "_new",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorDeregistered",
    inputs: [
      {
        name: "_operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "_avs",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorRegistered",
    inputs: [
      {
        name: "_operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "_avs",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorWeightUpdated",
    inputs: [
      {
        name: "_operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "oldWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "QuorumUpdated",
    inputs: [
      {
        name: "_old",
        type: "tuple",
        indexed: false,
        internalType: "struct Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
      {
        name: "_new",
        type: "tuple",
        indexed: false,
        internalType: "struct Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SigningKeyUpdate",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "updateBlock",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "newSigningKey",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "oldSigningKey",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ThresholdWeightUpdated",
    inputs: [
      {
        name: "_thresholdWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TotalWeightUpdated",
    inputs: [
      {
        name: "oldTotalWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newTotalWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "UpdateMinimumWeight",
    inputs: [
      {
        name: "oldMinimumWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newMinimumWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InsufficientSignedStake",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientWeight",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidLength",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidQuorum",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReferenceBlock",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSignature",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSignedWeight",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidThreshold",
    inputs: [],
  },
  {
    type: "error",
    name: "LengthMismatch",
    inputs: [],
  },
  {
    type: "error",
    name: "MustUpdateAllOperators",
    inputs: [],
  },
  {
    type: "error",
    name: "NotSorted",
    inputs: [],
  },
  {
    type: "error",
    name: "OperatorAlreadyRegistered",
    inputs: [],
  },
  {
    type: "error",
    name: "OperatorNotRegistered",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a080604052346100d957604051601f61280f38819003918201601f19168301916001600160401b038311848410176100c55780849260209460405283398101031261007557516001600160a01b0381168103610071576080526040516126e890816101278239608051816116560152f35b5f80fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b634e487b7160e01b5f52604160045260245ffd5b62461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fdfe60806040526004361015610071575b60405162461bcd60e51b815260206004820152603560248201527f436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b206044820152746e6f7220726563656976652066756e6374696f6e7360581b6064820152608490fd5b5f803560e01c8062cf2ab514610f815780630dba339414610f585780631626ba7e14610c495780631703a01814610bf95780631e4cd85e14610bd0578063314f3a4914610bb65780633b242e4a14610b7f5780633d5611f61461098c57806340bf2fb71461096f5780635140a548146108635780635e1042e81461081d5780635ef53329146107f8578063696255be1461077d578063715018a614610720578063743c31f4146106d8578063857dc190146105c25780638da5cb5b1461059a578063955f2d901461054957806398ec1ac91461051e578063ab11899514610389578063b933fa7414610321578063cdcd3581146102d6578063dec5d1f614610267578063ec7fbb31146102285763f2fde38b1461018e575061000e565b3461022357602036600319011261021e576101a76111c6565b6101af611acb565b6001600160a01b038116156101ca576101c790611cdb565b80f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b611006565b610fb6565b503461022357602036600319011261021e5760209060ff906040906001600160a01b036102536111c6565b168152606e84522054166040519015158152f35b503461022357604036600319011261021e576004356001600160401b0381116102d15761029890369060040161140e565b602435906001600160401b0382116102d1576102cc6102be6101c79336906004016111dc565b916102c7611acb565b611e08565b61181e565b611056565b503461022357602036600319011261021e576020906001600160a01b036102fb6111c6565b168152606a8252604090206001600160a01b039061031890611a99565b16604051908152f35b5034610223578060031936011261021e57606c54908161035357602091505b6040516001600160e01b03919091168152f35b5f198201918211610375575061036c602091606c61186d565b5054811c610340565b634e487b7160e01b81526011600452602490fd5b503461022357606036600319011261021e576103a36111c6565b6044356001600160401b0381116102d1576103c290369060040161140e565b82549060ff8260081c161592838094610511575b80156104fa575b1561049e5760ff198316600117855561042d928461048d575b5061040760ff865460081c16611da8565b60018060a01b03166001600160601b0360a01b60685416176068556102c7602435611b23565b61044660ff835460081c1661044181611da8565b611da8565b61044f33611cdb565b6104565780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b61ffff19166101011785555f6103f6565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156103dd5750600160ff8416146103dd565b50600160ff8416106103d6565b3461022357602036600319011261021e57602061054161053c6111c6565b6115de565b604051908152f35b503461022357604036600319011261021e576105636111c6565b6024359063ffffffff8216809203610596576001600160a01b03168252606d6020908152604090922061054191906119fc565b8280fd5b50346102235736600319011261021e576033546040516001600160a01b039091168152602090f35b5034610223578060031936011261021e57338152606e60205260ff604082205416156106c95760655480156106b5575f1901606555338152606e6020526040812060ff19815416905561061c61061733611f6d565b61216a565b50506068546001600160a01b0316803b156106b057818080926024604051809481936351b27a6d60e11b83523360048401525af180156106a557610690575b506068546001600160a01b0316337f31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed5808380a380f35b8161069a91611135565b61021e57805f61065b565b6040513d84823e3d90fd5b61157e565b634e487b7160e01b82526011600452602482fd5b6325ec6c1f60e01b8152600490fd5b503461022357602036600319011261021e576106f26111c6565b338252606e60205260ff60408320541615610711576101c79033611d23565b6325ec6c1f60e01b8252600482fd5b5034610223578060031936011261021e57610739611acb565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461022357604036600319011261021e576024356004356001600160401b0382116102d1577f713ca53b88d6eb63f5b1854cb8cbdd736ec51eda225e46791aa9298b0160648f60406107d76101c79436906004016111dc565b926107e0611acb565b606754908060675582519182526020820152a161181e565b503461022357602036600319011261021e57610812611acb565b6101c7600435611b23565b503461022357604036600319011261021e576020906001600160a01b036108426111c6565b168152606a8252604090206001600160a01b039061031890602435906119fc565b503461022357604036600319011261021e576004356001600160401b0381116102d15736602382011215610965578060040135906108a082611156565b906108ae6040519283611135565b82825260208201906024829460051b8201019036821161096a5760248101925b82841061093657505050506024356001600160401b0381116102d1576108f89036906004016112cd565b5051156109225751805160655403610913576101c79061181e565b63169efb5b60e11b8252600482fd5b634e487b7160e01b82526032600452602482fd5b83356001600160401b0381116109655760209161095a8392602436918701016111dc565b8152019301926108ce565b6110a6565b61116d565b50346102235736600319011261021e576020606754604051908152f35b503461022357604036600319011261021e576004356001600160401b0381116102d15760606003198236030112610b7a57604051606081018181106001600160401b03821117610b665760405281600401356001600160401b038111610b61576109fc90600436918501016112cd565b8152602480830135602083019081526044909301356040830190815290356001600160a01b0381168103610b5d57335f52606e60205260ff60405f205416610b4e57606554905f198214610b3a576001610a7f9201606555335f52606e60205260405f20600160ff19825416179055610a7761061733611f6d565b505033611d23565b6068546001600160a01b0316803b156106b057610acb5f809460405196879586948593639926ee7d60e01b855233600486015260406024860152516060604486015260a4850190611aa7565b9151606484015251608483015203925af18015610b2f57610b1c575b506068546001600160a01b0316337fa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c18380a380f35b610b2891505f90611135565b5f80610ae7565b6040513d5f823e3d90fd5b634e487b7160e01b5f52601160045260245ffd5b6342ee68b560e01b5f5260045ffd5b5f80fd5b6113bd565b634e487b7160e01b5f52604160045260245ffd5b61136c565b3461022357602036600319011261021e576001600160a01b03610ba06111c6565b165f52606d602052602061054160405f20611a99565b34610223575f36600319011261021e576020610541611a8c565b3461022357602036600319011261021e57602061054163ffffffff610bf361124a565b1661196b565b34610223575f36600319011261021e576060604051610c17816110ff565b52610c45604051610c27816110ff565b610c2f6114df565b8152604051918291602083526020830190611313565b0390f35b3461022357604036600319011261021e576004356024356001600160401b0381116102d157610c7c9036906004016112cd565b805181016060826020830192031261021e5760208201516001600160401b0381116102d15782019181603f84011215610965576020830151610cbd81611156565b93610ccb6040519586611135565b8185526020808087019360051b830101019084821161096a57604001915b818310610f385750505060408101516001600160401b0381116102d15781019180603f8401121561096557602083015192610d2384611156565b93610d316040519586611135565b8085526020808087019260051b840101019183831161096a5760408101915b838310610ec95788888860608901519163ffffffff8316809303610b5d578051915f809582518503610eba578415610eab5743861015945f949093925b848610610df757888888610de857610da481611882565b8211610dd957610db39061196b565b11610dca57604051630b135d3f60e11b8152602090f35b63e121632f60e01b5f5260045ffd5b634b05a0f760e11b5f5260045ffd5b63e64f180f60e01b5f5260045ffd5b949793949293926001600160a01b03610e108a84611556565b511696610de857865f52606a6020528660018060a01b03610e348a60405f206119fc565b16916001600160a01b03161015610e9c57610e5b9083610e548b88611556565b51916123fb565b15610e8d576001610e8387945f985f52606d602052610e7d8a60405f206119fc565b906115d1565b9801949392610d8d565b638baa579f60e01b5f5260045ffd5b63ba50f91160e01b5f5260045ffd5b63251f56a160e21b5f5260045ffd5b631fec674760e31b5f5260045ffd5b82516001600160401b0381116109655760209083010185603f8201121561096557602081015191610ef9836112b2565b610f066040519182611135565b8381526040838501018810610f33575f602085819660408397018386015e83010152815201920191610d50565b61125d565b82516001600160a01b0381168103610b5d57815260209283019201610ce9565b3461022357602036600319011261021e57602061054163ffffffff610f7b61124a565b16611882565b34610fb657602036600319011261021e576004356001600160401b0381116102d1576102cc610fb49136906004016111dc565b005b60405162461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a20696e76616c6964207475706c65206f666673604482015261195d60f21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a1c9c985e481bd9999cd95d60aa1b6064820152608490fd5b602081019081106001600160401b03821117610b6657604052565b604081019081106001600160401b03821117610b6657604052565b90601f801991011681019081106001600160401b03821117610b6657604052565b6001600160401b038111610b665760051b60200190565b60405162461bcd60e51b815260206004820152602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a727261792073747269646560a81b6064820152608490fd5b600435906001600160a01b0382168203610b5d57565b9080601f83011215610965578135906111f482611156565b926112026040519485611135565b82845260208085019360051b82010191821161096a57602001915b81831061122a5750505090565b82356001600160a01b0381168103610b5d5781526020928301920161121d565b6004359063ffffffff82168203610b5d57565b60405162461bcd60e51b815260206004820152602760248201527f414249206465636f64696e673a20696e76616c69642062797465206172726179604482015266040d8cadccee8d60cb1b6064820152608490fd5b6001600160401b038111610b6657601f01601f191660200190565b81601f82011215610965578035906112e4826112b2565b926112f26040519485611135565b82845260208383010111610f3357815f926020809301838601378301015290565b602060408184019251938281528451809452019201905f5b8181106113385750505090565b825180516001600160a01b031685526020908101516001600160601b0316818601526040909401939092019160010161132b565b60405162461bcd60e51b815260206004820152602360248201527f414249206465636f64696e673a20737472756374206461746120746f6f2073686044820152621bdc9d60ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f414249206465636f64696e673a20696e76616c696420737472756374206f66666044820152621cd95d60ea1b6064820152608490fd5b9190602083820312610b7a57604051611426816110ff565b80938035906001600160401b038211610b61570182601f820112156109655780359061145182611156565b9361145f6040519586611135565b82855260208086019360061b8301019181831161096a57602001925b828410611489575050505052565b604084830312610b7a57604051906114a08261111a565b84356001600160a01b0381168103610b5d5782526020850135906001600160601b0382168203610b5d578260209283604095015281520193019261147b565b606654906114ec82611156565b916114fa6040519384611135565b80835260665f9081525f80516020612693833981519152602085015b8383106115235750505050565b6001602081926040516115358161111a565b8554848060a01b038116825260a01c83820152815201920192019190611516565b805182101561156a5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b60405162461bcd60e51b815260206004820152602560248201527f54617267657420636f6e747261637420646f6573206e6f7420636f6e7461696e60448201526420636f646560d81b6064820152608490fd5b91908201809211610b3a57565b6115e66114df565b805190925f61160d6115f784611156565b936116056040519586611135565b808552611156565b602084019490601f19013686375f5b865181101561164e576001906001600160a01b0361163a828a611556565b5151166116478288611556565b520161161c565b5091939092917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190823b156106b05760408051639004134760e01b81526001600160a01b0390921660048301526024820152925160448401819052839160648301915f5b8181106117e1575050509181805f9403915afa908115610b2f575f91611751575b505f915b8451831015611733576116f48383611556565b51906001600160601b03602061170a8689611556565b5101511691828102928184041490151715610b3a5760019161172b916115d1565b9201916116e1565b915050612710919250046067548110155f1461174c5790565b505f90565b90503d805f833e6117628183611135565b81019060208183031261021e578051906001600160401b0382116102d157019080601f8301121561096557815161179881611156565b926117a66040519485611135565b81845260208085019260051b82010192831161096a57602001905b8282106117d1575050505f6116dd565b81518152602091820191016117c1565b82516001600160a01b03168452869450602093840193909201916001016116bc565b9190915f8382019384129112908015821691151617610b3a57565b905f805b835182101561185c576001906118549061184e6001600160a01b036118478689611556565b5116611f6d565b90611803565b910190611822565b905061186991925061216a565b5050565b805482101561156a575f5260205f2001905f90565b4381101561192757606b54905f905b8282106118ce575050806118ae57505f5b6001600160e01b031690565b5f198101908111610b3a576118c490606b61186d565b505460201c6118a2565b90916118e181841860011c8285166115d1565b908263ffffffff6118f384606b61186d565b50541611156119055750915b90611891565b925060018101809111156118ff57634e487b7160e01b5f52601160045260245ffd5b606460405162461bcd60e51b815260206004820152602060248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152fd5b4381101561192757606c54905f905b8282106119a35750508061198d57505f90565b5f198101908111610b3a576118c490606c61186d565b90916119b681841860011c8285166115d1565b908263ffffffff6119c884606c61186d565b50541611156119da5750915b9061197a565b925060018101809111156119d457634e487b7160e01b5f52601160045260245ffd5b9043811015611927578154905f905b828210611a3457505080611a2057505f919050565b5f198101908111610b3a576118c49161186d565b9091611a4781841860011c8285166115d1565b908263ffffffff611a58848861186d565b5054161115611a6a5750915b90611a0b565b92506001810180911115611a6457634e487b7160e01b5f52601160045260245ffd5b606b54806118ae57505f90565b805480611a2057505f919050565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6033546001600160a01b03163303611adf57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b606c5490611b31606c611a99565b9082151580611cb5575b15611ba957611b4981612513565b915f198401938411610b3a57611b9f602093611b877f9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b96606c61186d565b509063ffffffff82549181199060201b169116179055565b50604051908152a1565b63ffffffff4311611c6157611bbd81612513565b9160405193611bcb8561111a565b4363ffffffff1685526001600160e01b039093166020850190815292600160401b811015610b6657806001611c059201606c55606c61186d565b949094611c4e5751925163ffffffff90931663ffffffff19602094851b16179093557f9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b92611b9f565b634e487b7160e01b5f525f60045260245ffd5b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608490fd5b505f198301838111610b3a57611cd163ffffffff91606c61186d565b5054164314611b3b565b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b6001600160a01b039081165f818152606a6020526040902090929190611d4890611a99565b6001600160a01b0390921692911690828214611da357805f52606a602052611d738360405f20612298565b50506040519182527fd061168252f441733658f09e4d8f5b2d998ed4ef24a2bbfd6ceca52ea131500260204393a4565b505050565b15611daf57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b611e1181612381565b15611f465760405191611e23836110ff565b611e2b6114df565b83526066545f60665580611f0c575b505f5b82518051821015611eb95781611e5291611556565b519060665491600160401b831015610b66576001830160665560665483101561156a5760665f5280516020919091015160a01b6001600160a01b0319166001600160a01b0391909116175f8051602061269383398151915290920191909155600101611e3d565b505091611ef990611f077f23aad4e61744ece164130aa415c1616e80136b0f0770e56589438b90b269265e93604051938493604085526040850190611313565b908382036020850152611313565b0390a1565b60665f525f80516020612693833981519152015f805160206126938339815191525b818110611f3b5750611e3a565b5f8155600101611f2e565b63d173577960e01b5f5260045ffd5b81810392915f138015828513169184121617610b3a57565b6001600160a01b0381165f818152606d602052604081209092908390611f9290611a99565b8094845f52606e60205260ff60405f205416155f1461210c57611fb6929350611f55565b92831561210657825f52606d60205260405f2090815492611fd683611a99565b841515806120e1575b1561203a57611fed5f612513565b945f198101908111610b3a577f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe59495611b8761202a9260409761186d565b505b82519182526020820152a290565b63ffffffff4311611c615761204e5f612513565b936040519561205c8761111a565b4363ffffffff1687526001600160e01b039095166020870190815294600160401b811015610b66576120939160018201815561186d565b959095611c4e5751935160201b63ffffffff191663ffffffff94909416939093179093557f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe5949260409261202a565b505f198501858111610b3a576120fc63ffffffff918661186d565b5054164314611fdf565b50505090565b505050612118906115de565b916121238184611f55565b928315612106577f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe59491604091845f52606d60205261216381845f20612298565b505061202c565b9061217d612176611a8c565b9283611803565b90606b5461218b606b611a99565b9080151580612272575b156121ee576121a384612513565b5f198201918211610b3a57611b876121bc92606b61186d565b507f86dcf86b12dfeedea74ae9300dbdaa193bcce5809369c8177ea2f4eaaa65729b60408051858152846020820152a1565b63ffffffff4311611c615761220284612513565b6040519161220f8361111a565b4363ffffffff1683526001600160e01b039091166020830190815290600160401b811015610b66578060016122499201606b55606b61186d565b919091611c4e579151915160201b63ffffffff191663ffffffff929092169190911790556121bc565b505f198101818111610b3a5761228e63ffffffff91606b61186d565b5054164314612195565b91909180546122a682611a99565b918115158061235c575b156122db576122be85612513565b905f198301928311610b3a576122d792611b879161186d565b9190565b63ffffffff4311611c61576122ef85612513565b90604051926122fd8461111a565b4363ffffffff1684526001600160e01b039092166020840190815291600160401b811015610b66576123349160018201815561186d565b919091611c4e579151915160201b63ffffffff191663ffffffff929092169190911790559190565b505f198201828111610b3a5761237763ffffffff918361186d565b50541643146122b0565b51905f80805b84518210156123e4576001600160a01b036123a28387611556565b515116906001600160a01b0316811115610e9c576123db600191936001600160601b0360206123d1868a611556565b51015116906115d1565b91019091612387565b509192506127101490506123f6575f90565b600190565b9190916124088284612582565b60058110156124ff571590816124e9575b506124e1575f9261245361246185946040519283916020830195630b135d3f60e11b87526024840152604060448401526064830190611aa7565b03601f198101835282611135565b51915afa3d156124da573d612475816112b2565b906124836040519283611135565b81523d5f602083013e5b816124ce575b8161249c575090565b905060208180518101031261021e57602001516001600160e01b0319811690819003610b5d57630b135d3f60e11b1490565b80516020149150612493565b606061248d565b505050600190565b6001600160a01b0383811691161490505f612419565b634e487b7160e01b5f52602160045260245ffd5b6001600160e01b03811161252d576001600160e01b031690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608490fd5b8151604181036125ae5750906125aa91602082015190606060408401519301515f1a906125f0565b9091565b6040036125e75760406020830151920151918260ff1c91601b8301809311610b3a576125aa936001600160ff1b03169260ff16906125f0565b50505f90600290565b907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084116126875760ff1690601b8214158061267c575b612671576020935f93608093604051938452868401526040830152606082015282805260015afa15610b2f575f516001600160a01b0381161561266957905f90565b505f90600190565b505050505f90600490565b50601c821415612627565b505050505f9060039056fe46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354a2646970667358221220afd818386e982b126bce3e3bf8a998f3dd0ba6ffa50c1e8f37c83522636fbf0d64736f6c634300081a0033";

type ECDSAStakeRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECDSAStakeRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ECDSAStakeRegistry__factory extends ContractFactory {
  constructor(...args: ECDSAStakeRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _delegationManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ECDSAStakeRegistry> {
    return super.deploy(
      _delegationManager,
      overrides || {}
    ) as Promise<ECDSAStakeRegistry>;
  }
  override getDeployTransaction(
    _delegationManager: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_delegationManager, overrides || {});
  }
  override attach(address: string): ECDSAStakeRegistry {
    return super.attach(address) as ECDSAStakeRegistry;
  }
  override connect(signer: Signer): ECDSAStakeRegistry__factory {
    return super.connect(signer) as ECDSAStakeRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECDSAStakeRegistryInterface {
    return new utils.Interface(_abi) as ECDSAStakeRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ECDSAStakeRegistry {
    return new Contract(address, _abi, signerOrProvider) as ECDSAStakeRegistry;
  }
}
