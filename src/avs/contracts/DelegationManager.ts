/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IDelegationManagerTypes {
  export type WithdrawalStruct = {
    staker: string;
    delegatedTo: string;
    withdrawer: string;
    nonce: BigNumberish;
    startBlock: BigNumberish;
    strategies: string[];
    scaledShares: BigNumberish[];
  };

  export type WithdrawalStructOutput = [
    string,
    string,
    string,
    BigNumber,
    number,
    string[],
    BigNumber[]
  ] & {
    staker: string;
    delegatedTo: string;
    withdrawer: string;
    nonce: BigNumber;
    startBlock: number;
    strategies: string[];
    scaledShares: BigNumber[];
  };

  export type QueuedWithdrawalParamsStruct = {
    strategies: string[];
    depositShares: BigNumberish[];
    __deprecated_withdrawer: string;
  };

  export type QueuedWithdrawalParamsStructOutput = [
    string[],
    BigNumber[],
    string
  ] & {
    strategies: string[];
    depositShares: BigNumber[];
    __deprecated_withdrawer: string;
  };
}

export declare namespace ISignatureUtilsMixinTypes {
  export type SignatureWithExpiryStruct = {
    signature: BytesLike;
    expiry: BigNumberish;
  };

  export type SignatureWithExpiryStructOutput = [string, BigNumber] & {
    signature: string;
    expiry: BigNumber;
  };
}

export interface DelegationManagerInterface extends utils.Interface {
  functions: {
    "DELEGATION_APPROVAL_TYPEHASH()": FunctionFragment;
    "allocationManager()": FunctionFragment;
    "beaconChainETHStrategy()": FunctionFragment;
    "calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)": FunctionFragment;
    "calculateWithdrawalRoot((address,address,address,uint256,uint32,address[],uint256[]))": FunctionFragment;
    "completeQueuedWithdrawal((address,address,address,uint256,uint32,address[],uint256[]),address[],bool)": FunctionFragment;
    "completeQueuedWithdrawals((address,address,address,uint256,uint32,address[],uint256[])[],address[][],bool[])": FunctionFragment;
    "convertToDepositShares(address,address[],uint256[])": FunctionFragment;
    "cumulativeWithdrawalsQueued(address)": FunctionFragment;
    "decreaseDelegatedShares(address,uint256,uint64)": FunctionFragment;
    "delegateTo(address,(bytes,uint256),bytes32)": FunctionFragment;
    "delegatedTo(address)": FunctionFragment;
    "delegationApprover(address)": FunctionFragment;
    "delegationApproverSaltIsSpent(address,bytes32)": FunctionFragment;
    "depositScalingFactor(address,address)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "eigenPodManager()": FunctionFragment;
    "getDepositedShares(address)": FunctionFragment;
    "getOperatorShares(address,address[])": FunctionFragment;
    "getOperatorsShares(address[],address[])": FunctionFragment;
    "getQueuedWithdrawal(bytes32)": FunctionFragment;
    "getQueuedWithdrawalRoots(address)": FunctionFragment;
    "getQueuedWithdrawals(address)": FunctionFragment;
    "getSlashableSharesInQueue(address,address)": FunctionFragment;
    "getWithdrawableShares(address,address[])": FunctionFragment;
    "increaseDelegatedShares(address,address,uint256,uint256)": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "isDelegated(address)": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "minWithdrawalDelayBlocks()": FunctionFragment;
    "modifyOperatorDetails(address,address)": FunctionFragment;
    "operatorShares(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "pauseAll()": FunctionFragment;
    "paused(uint8)": FunctionFragment;
    "paused()": FunctionFragment;
    "pauserRegistry()": FunctionFragment;
    "pendingWithdrawals(bytes32)": FunctionFragment;
    "permissionController()": FunctionFragment;
    "queueWithdrawals((address[],uint256[],address)[])": FunctionFragment;
    "queuedWithdrawals(bytes32)": FunctionFragment;
    "redelegate(address,(bytes,uint256),bytes32)": FunctionFragment;
    "registerAsOperator(address,uint32,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "slashOperatorShares(address,address,uint64,uint64)": FunctionFragment;
    "strategyManager()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "undelegate(address)": FunctionFragment;
    "unpause(uint256)": FunctionFragment;
    "updateOperatorMetadataURI(address,string)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DELEGATION_APPROVAL_TYPEHASH"
      | "allocationManager"
      | "beaconChainETHStrategy"
      | "calculateDelegationApprovalDigestHash"
      | "calculateWithdrawalRoot"
      | "completeQueuedWithdrawal"
      | "completeQueuedWithdrawals"
      | "convertToDepositShares"
      | "cumulativeWithdrawalsQueued"
      | "decreaseDelegatedShares"
      | "delegateTo"
      | "delegatedTo"
      | "delegationApprover"
      | "delegationApproverSaltIsSpent"
      | "depositScalingFactor"
      | "domainSeparator"
      | "eigenPodManager"
      | "getDepositedShares"
      | "getOperatorShares"
      | "getOperatorsShares"
      | "getQueuedWithdrawal"
      | "getQueuedWithdrawalRoots"
      | "getQueuedWithdrawals"
      | "getSlashableSharesInQueue"
      | "getWithdrawableShares"
      | "increaseDelegatedShares"
      | "initialize"
      | "isDelegated"
      | "isOperator"
      | "minWithdrawalDelayBlocks"
      | "modifyOperatorDetails"
      | "operatorShares"
      | "owner"
      | "pause"
      | "pauseAll"
      | "paused(uint8)"
      | "paused()"
      | "pauserRegistry"
      | "pendingWithdrawals"
      | "permissionController"
      | "queueWithdrawals"
      | "queuedWithdrawals"
      | "redelegate"
      | "registerAsOperator"
      | "renounceOwnership"
      | "slashOperatorShares"
      | "strategyManager"
      | "transferOwnership"
      | "undelegate"
      | "unpause"
      | "updateOperatorMetadataURI"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DELEGATION_APPROVAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beaconChainETHStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDelegationApprovalDigestHash",
    values: [string, string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWithdrawalRoot",
    values: [IDelegationManagerTypes.WithdrawalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "completeQueuedWithdrawal",
    values: [IDelegationManagerTypes.WithdrawalStruct, string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "completeQueuedWithdrawals",
    values: [IDelegationManagerTypes.WithdrawalStruct[], string[][], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToDepositShares",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeWithdrawalsQueued",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseDelegatedShares",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateTo",
    values: [
      string,
      ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "delegatedTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegationApprover",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationApproverSaltIsSpent",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositScalingFactor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eigenPodManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositedShares",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorShares",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorsShares",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueuedWithdrawal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueuedWithdrawalRoots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueuedWithdrawals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlashableSharesInQueue",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableShares",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDelegatedShares",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isDelegated", values: [string]): string;
  encodeFunctionData(functionFragment: "isOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minWithdrawalDelayBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyOperatorDetails",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorShares",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pauseAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paused(uint8)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauserRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queueWithdrawals",
    values: [IDelegationManagerTypes.QueuedWithdrawalParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedWithdrawals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redelegate",
    values: [
      string,
      ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsOperator",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slashOperatorShares",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "undelegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperatorMetadataURI",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_APPROVAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beaconChainETHStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDelegationApprovalDigestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWithdrawalRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeQueuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToDepositShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeWithdrawalsQueued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseDelegatedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegateTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegatedTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationApproverSaltIsSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositScalingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eigenPodManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorsShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueuedWithdrawalRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlashableSharesInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDelegatedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDelegated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minWithdrawalDelayBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyOperatorDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paused(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAsOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashOperatorShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOperatorMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "DelegationApproverUpdated(address,address)": EventFragment;
    "DepositScalingFactorUpdated(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OperatorMetadataURIUpdated(address,string)": EventFragment;
    "OperatorRegistered(address,address)": EventFragment;
    "OperatorSharesDecreased(address,address,address,uint256)": EventFragment;
    "OperatorSharesIncreased(address,address,address,uint256)": EventFragment;
    "OperatorSharesSlashed(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address,uint256)": EventFragment;
    "SlashingWithdrawalCompleted(bytes32)": EventFragment;
    "SlashingWithdrawalQueued(bytes32,(address,address,address,uint256,uint32,address[],uint256[]),uint256[])": EventFragment;
    "StakerDelegated(address,address)": EventFragment;
    "StakerForceUndelegated(address,address)": EventFragment;
    "StakerUndelegated(address,address)": EventFragment;
    "Unpaused(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegationApproverUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DepositScalingFactorUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorMetadataURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSharesDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSharesIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSharesSlashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SlashingWithdrawalCompleted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlashingWithdrawalQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerDelegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerForceUndelegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerUndelegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface DelegationApproverUpdatedEventObject {
  operator: string;
  newDelegationApprover: string;
}
export type DelegationApproverUpdatedEvent = TypedEvent<
  [string, string],
  DelegationApproverUpdatedEventObject
>;

export type DelegationApproverUpdatedEventFilter =
  TypedEventFilter<DelegationApproverUpdatedEvent>;

export interface DepositScalingFactorUpdatedEventObject {
  staker: string;
  strategy: string;
  newDepositScalingFactor: BigNumber;
}
export type DepositScalingFactorUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  DepositScalingFactorUpdatedEventObject
>;

export type DepositScalingFactorUpdatedEventFilter =
  TypedEventFilter<DepositScalingFactorUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OperatorMetadataURIUpdatedEventObject {
  operator: string;
  metadataURI: string;
}
export type OperatorMetadataURIUpdatedEvent = TypedEvent<
  [string, string],
  OperatorMetadataURIUpdatedEventObject
>;

export type OperatorMetadataURIUpdatedEventFilter =
  TypedEventFilter<OperatorMetadataURIUpdatedEvent>;

export interface OperatorRegisteredEventObject {
  operator: string;
  delegationApprover: string;
}
export type OperatorRegisteredEvent = TypedEvent<
  [string, string],
  OperatorRegisteredEventObject
>;

export type OperatorRegisteredEventFilter =
  TypedEventFilter<OperatorRegisteredEvent>;

export interface OperatorSharesDecreasedEventObject {
  operator: string;
  staker: string;
  strategy: string;
  shares: BigNumber;
}
export type OperatorSharesDecreasedEvent = TypedEvent<
  [string, string, string, BigNumber],
  OperatorSharesDecreasedEventObject
>;

export type OperatorSharesDecreasedEventFilter =
  TypedEventFilter<OperatorSharesDecreasedEvent>;

export interface OperatorSharesIncreasedEventObject {
  operator: string;
  staker: string;
  strategy: string;
  shares: BigNumber;
}
export type OperatorSharesIncreasedEvent = TypedEvent<
  [string, string, string, BigNumber],
  OperatorSharesIncreasedEventObject
>;

export type OperatorSharesIncreasedEventFilter =
  TypedEventFilter<OperatorSharesIncreasedEvent>;

export interface OperatorSharesSlashedEventObject {
  operator: string;
  strategy: string;
  totalSlashedShares: BigNumber;
}
export type OperatorSharesSlashedEvent = TypedEvent<
  [string, string, BigNumber],
  OperatorSharesSlashedEventObject
>;

export type OperatorSharesSlashedEventFilter =
  TypedEventFilter<OperatorSharesSlashedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type PausedEvent = TypedEvent<[string, BigNumber], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SlashingWithdrawalCompletedEventObject {
  withdrawalRoot: string;
}
export type SlashingWithdrawalCompletedEvent = TypedEvent<
  [string],
  SlashingWithdrawalCompletedEventObject
>;

export type SlashingWithdrawalCompletedEventFilter =
  TypedEventFilter<SlashingWithdrawalCompletedEvent>;

export interface SlashingWithdrawalQueuedEventObject {
  withdrawalRoot: string;
  withdrawal: IDelegationManagerTypes.WithdrawalStructOutput;
  sharesToWithdraw: BigNumber[];
}
export type SlashingWithdrawalQueuedEvent = TypedEvent<
  [string, IDelegationManagerTypes.WithdrawalStructOutput, BigNumber[]],
  SlashingWithdrawalQueuedEventObject
>;

export type SlashingWithdrawalQueuedEventFilter =
  TypedEventFilter<SlashingWithdrawalQueuedEvent>;

export interface StakerDelegatedEventObject {
  staker: string;
  operator: string;
}
export type StakerDelegatedEvent = TypedEvent<
  [string, string],
  StakerDelegatedEventObject
>;

export type StakerDelegatedEventFilter = TypedEventFilter<StakerDelegatedEvent>;

export interface StakerForceUndelegatedEventObject {
  staker: string;
  operator: string;
}
export type StakerForceUndelegatedEvent = TypedEvent<
  [string, string],
  StakerForceUndelegatedEventObject
>;

export type StakerForceUndelegatedEventFilter =
  TypedEventFilter<StakerForceUndelegatedEvent>;

export interface StakerUndelegatedEventObject {
  staker: string;
  operator: string;
}
export type StakerUndelegatedEvent = TypedEvent<
  [string, string],
  StakerUndelegatedEventObject
>;

export type StakerUndelegatedEventFilter =
  TypedEventFilter<StakerUndelegatedEvent>;

export interface UnpausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type UnpausedEvent = TypedEvent<
  [string, BigNumber],
  UnpausedEventObject
>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface DelegationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DelegationManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELEGATION_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    allocationManager(overrides?: CallOverrides): Promise<[string]>;

    beaconChainETHStrategy(overrides?: CallOverrides): Promise<[string]>;

    calculateDelegationApprovalDigestHash(
      staker: string,
      operator: string,
      approver: string,
      approverSalt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    calculateWithdrawalRoot(
      withdrawal: IDelegationManagerTypes.WithdrawalStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    completeQueuedWithdrawal(
      withdrawal: IDelegationManagerTypes.WithdrawalStruct,
      tokens: string[],
      receiveAsTokens: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    completeQueuedWithdrawals(
      withdrawals: IDelegationManagerTypes.WithdrawalStruct[],
      tokens: string[][],
      receiveAsTokens: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    convertToDepositShares(
      staker: string,
      strategies: string[],
      withdrawableShares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    cumulativeWithdrawalsQueued(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalQueued: BigNumber }>;

    decreaseDelegatedShares(
      staker: string,
      curDepositShares: BigNumberish,
      beaconChainSlashingFactorDecrease: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegateTo(
      operator: string,
      approverSignatureAndExpiry: ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegatedTo(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[string] & { operator: string }>;

    delegationApprover(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delegationApproverSaltIsSpent(
      delegationApprover: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { spent: boolean }>;

    depositScalingFactor(
      staker: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    eigenPodManager(overrides?: CallOverrides): Promise<[string]>;

    getDepositedShares(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getOperatorShares(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getOperatorsShares(
      operators: string[],
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[][]]>;

    getQueuedWithdrawal(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IDelegationManagerTypes.WithdrawalStructOutput, BigNumber[]] & {
        withdrawal: IDelegationManagerTypes.WithdrawalStructOutput;
        shares: BigNumber[];
      }
    >;

    getQueuedWithdrawalRoots(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getQueuedWithdrawals(
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [IDelegationManagerTypes.WithdrawalStructOutput[], BigNumber[][]] & {
        withdrawals: IDelegationManagerTypes.WithdrawalStructOutput[];
        shares: BigNumber[][];
      }
    >;

    getSlashableSharesInQueue(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawableShares(
      staker: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        withdrawableShares: BigNumber[];
        depositShares: BigNumber[];
      }
    >;

    increaseDelegatedShares(
      staker: string,
      strategy: string,
      prevDepositShares: BigNumberish,
      addedShares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      initialOwner: string,
      initialPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isDelegated(staker: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOperator(operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    minWithdrawalDelayBlocks(overrides?: CallOverrides): Promise<[number]>;

    modifyOperatorDetails(
      operator: string,
      newDelegationApprover: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    operatorShares(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pauserRegistry(overrides?: CallOverrides): Promise<[string]>;

    pendingWithdrawals(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { pending: boolean }>;

    permissionController(overrides?: CallOverrides): Promise<[string]>;

    queueWithdrawals(
      params: IDelegationManagerTypes.QueuedWithdrawalParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    queuedWithdrawals(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IDelegationManagerTypes.WithdrawalStructOutput] & {
        withdrawal: IDelegationManagerTypes.WithdrawalStructOutput;
      }
    >;

    redelegate(
      newOperator: string,
      newOperatorApproverSig: ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerAsOperator(
      initDelegationApprover: string,
      allocationDelay: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    slashOperatorShares(
      operator: string,
      strategy: string,
      prevMaxMagnitude: BigNumberish,
      newMaxMagnitude: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    strategyManager(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    undelegate(
      staker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateOperatorMetadataURI(
      operator: string,
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  DELEGATION_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  allocationManager(overrides?: CallOverrides): Promise<string>;

  beaconChainETHStrategy(overrides?: CallOverrides): Promise<string>;

  calculateDelegationApprovalDigestHash(
    staker: string,
    operator: string,
    approver: string,
    approverSalt: BytesLike,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  calculateWithdrawalRoot(
    withdrawal: IDelegationManagerTypes.WithdrawalStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  completeQueuedWithdrawal(
    withdrawal: IDelegationManagerTypes.WithdrawalStruct,
    tokens: string[],
    receiveAsTokens: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  completeQueuedWithdrawals(
    withdrawals: IDelegationManagerTypes.WithdrawalStruct[],
    tokens: string[][],
    receiveAsTokens: boolean[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  convertToDepositShares(
    staker: string,
    strategies: string[],
    withdrawableShares: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  cumulativeWithdrawalsQueued(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreaseDelegatedShares(
    staker: string,
    curDepositShares: BigNumberish,
    beaconChainSlashingFactorDecrease: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegateTo(
    operator: string,
    approverSignatureAndExpiry: ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
    approverSalt: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegatedTo(staker: string, overrides?: CallOverrides): Promise<string>;

  delegationApprover(
    operator: string,
    overrides?: CallOverrides
  ): Promise<string>;

  delegationApproverSaltIsSpent(
    delegationApprover: string,
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  depositScalingFactor(
    staker: string,
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  eigenPodManager(overrides?: CallOverrides): Promise<string>;

  getDepositedShares(
    staker: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getOperatorShares(
    operator: string,
    strategies: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOperatorsShares(
    operators: string[],
    strategies: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  getQueuedWithdrawal(
    withdrawalRoot: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [IDelegationManagerTypes.WithdrawalStructOutput, BigNumber[]] & {
      withdrawal: IDelegationManagerTypes.WithdrawalStructOutput;
      shares: BigNumber[];
    }
  >;

  getQueuedWithdrawalRoots(
    staker: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getQueuedWithdrawals(
    staker: string,
    overrides?: CallOverrides
  ): Promise<
    [IDelegationManagerTypes.WithdrawalStructOutput[], BigNumber[][]] & {
      withdrawals: IDelegationManagerTypes.WithdrawalStructOutput[];
      shares: BigNumber[][];
    }
  >;

  getSlashableSharesInQueue(
    operator: string,
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawableShares(
    staker: string,
    strategies: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      withdrawableShares: BigNumber[];
      depositShares: BigNumber[];
    }
  >;

  increaseDelegatedShares(
    staker: string,
    strategy: string,
    prevDepositShares: BigNumberish,
    addedShares: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    initialOwner: string,
    initialPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isDelegated(staker: string, overrides?: CallOverrides): Promise<boolean>;

  isOperator(operator: string, overrides?: CallOverrides): Promise<boolean>;

  minWithdrawalDelayBlocks(overrides?: CallOverrides): Promise<number>;

  modifyOperatorDetails(
    operator: string,
    newDelegationApprover: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  operatorShares(
    operator: string,
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseAll(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "paused(uint8)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

  pauserRegistry(overrides?: CallOverrides): Promise<string>;

  pendingWithdrawals(
    withdrawalRoot: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  permissionController(overrides?: CallOverrides): Promise<string>;

  queueWithdrawals(
    params: IDelegationManagerTypes.QueuedWithdrawalParamsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  queuedWithdrawals(
    withdrawalRoot: BytesLike,
    overrides?: CallOverrides
  ): Promise<IDelegationManagerTypes.WithdrawalStructOutput>;

  redelegate(
    newOperator: string,
    newOperatorApproverSig: ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
    approverSalt: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerAsOperator(
    initDelegationApprover: string,
    allocationDelay: BigNumberish,
    metadataURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  slashOperatorShares(
    operator: string,
    strategy: string,
    prevMaxMagnitude: BigNumberish,
    newMaxMagnitude: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  strategyManager(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  undelegate(
    staker: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateOperatorMetadataURI(
    operator: string,
    metadataURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DELEGATION_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    allocationManager(overrides?: CallOverrides): Promise<string>;

    beaconChainETHStrategy(overrides?: CallOverrides): Promise<string>;

    calculateDelegationApprovalDigestHash(
      staker: string,
      operator: string,
      approver: string,
      approverSalt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    calculateWithdrawalRoot(
      withdrawal: IDelegationManagerTypes.WithdrawalStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    completeQueuedWithdrawal(
      withdrawal: IDelegationManagerTypes.WithdrawalStruct,
      tokens: string[],
      receiveAsTokens: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    completeQueuedWithdrawals(
      withdrawals: IDelegationManagerTypes.WithdrawalStruct[],
      tokens: string[][],
      receiveAsTokens: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    convertToDepositShares(
      staker: string,
      strategies: string[],
      withdrawableShares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    cumulativeWithdrawalsQueued(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseDelegatedShares(
      staker: string,
      curDepositShares: BigNumberish,
      beaconChainSlashingFactorDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateTo(
      operator: string,
      approverSignatureAndExpiry: ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegatedTo(staker: string, overrides?: CallOverrides): Promise<string>;

    delegationApprover(
      operator: string,
      overrides?: CallOverrides
    ): Promise<string>;

    delegationApproverSaltIsSpent(
      delegationApprover: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositScalingFactor(
      staker: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    eigenPodManager(overrides?: CallOverrides): Promise<string>;

    getDepositedShares(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getOperatorShares(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOperatorsShares(
      operators: string[],
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    getQueuedWithdrawal(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IDelegationManagerTypes.WithdrawalStructOutput, BigNumber[]] & {
        withdrawal: IDelegationManagerTypes.WithdrawalStructOutput;
        shares: BigNumber[];
      }
    >;

    getQueuedWithdrawalRoots(
      staker: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getQueuedWithdrawals(
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [IDelegationManagerTypes.WithdrawalStructOutput[], BigNumber[][]] & {
        withdrawals: IDelegationManagerTypes.WithdrawalStructOutput[];
        shares: BigNumber[][];
      }
    >;

    getSlashableSharesInQueue(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableShares(
      staker: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        withdrawableShares: BigNumber[];
        depositShares: BigNumber[];
      }
    >;

    increaseDelegatedShares(
      staker: string,
      strategy: string,
      prevDepositShares: BigNumberish,
      addedShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      initialOwner: string,
      initialPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isDelegated(staker: string, overrides?: CallOverrides): Promise<boolean>;

    isOperator(operator: string, overrides?: CallOverrides): Promise<boolean>;

    minWithdrawalDelayBlocks(overrides?: CallOverrides): Promise<number>;

    modifyOperatorDetails(
      operator: string,
      newDelegationApprover: string,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorShares(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseAll(overrides?: CallOverrides): Promise<void>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<string>;

    pendingWithdrawals(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permissionController(overrides?: CallOverrides): Promise<string>;

    queueWithdrawals(
      params: IDelegationManagerTypes.QueuedWithdrawalParamsStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    queuedWithdrawals(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<IDelegationManagerTypes.WithdrawalStructOutput>;

    redelegate(
      newOperator: string,
      newOperatorApproverSig: ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    registerAsOperator(
      initDelegationApprover: string,
      allocationDelay: BigNumberish,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    slashOperatorShares(
      operator: string,
      strategy: string,
      prevMaxMagnitude: BigNumberish,
      newMaxMagnitude: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyManager(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    undelegate(staker: string, overrides?: CallOverrides): Promise<string[]>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperatorMetadataURI(
      operator: string,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DelegationApproverUpdated(address,address)"(
      operator?: string | null,
      newDelegationApprover?: null
    ): DelegationApproverUpdatedEventFilter;
    DelegationApproverUpdated(
      operator?: string | null,
      newDelegationApprover?: null
    ): DelegationApproverUpdatedEventFilter;

    "DepositScalingFactorUpdated(address,address,uint256)"(
      staker?: null,
      strategy?: null,
      newDepositScalingFactor?: null
    ): DepositScalingFactorUpdatedEventFilter;
    DepositScalingFactorUpdated(
      staker?: null,
      strategy?: null,
      newDepositScalingFactor?: null
    ): DepositScalingFactorUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OperatorMetadataURIUpdated(address,string)"(
      operator?: string | null,
      metadataURI?: null
    ): OperatorMetadataURIUpdatedEventFilter;
    OperatorMetadataURIUpdated(
      operator?: string | null,
      metadataURI?: null
    ): OperatorMetadataURIUpdatedEventFilter;

    "OperatorRegistered(address,address)"(
      operator?: string | null,
      delegationApprover?: null
    ): OperatorRegisteredEventFilter;
    OperatorRegistered(
      operator?: string | null,
      delegationApprover?: null
    ): OperatorRegisteredEventFilter;

    "OperatorSharesDecreased(address,address,address,uint256)"(
      operator?: string | null,
      staker?: null,
      strategy?: null,
      shares?: null
    ): OperatorSharesDecreasedEventFilter;
    OperatorSharesDecreased(
      operator?: string | null,
      staker?: null,
      strategy?: null,
      shares?: null
    ): OperatorSharesDecreasedEventFilter;

    "OperatorSharesIncreased(address,address,address,uint256)"(
      operator?: string | null,
      staker?: null,
      strategy?: null,
      shares?: null
    ): OperatorSharesIncreasedEventFilter;
    OperatorSharesIncreased(
      operator?: string | null,
      staker?: null,
      strategy?: null,
      shares?: null
    ): OperatorSharesIncreasedEventFilter;

    "OperatorSharesSlashed(address,address,uint256)"(
      operator?: string | null,
      strategy?: null,
      totalSlashedShares?: null
    ): OperatorSharesSlashedEventFilter;
    OperatorSharesSlashed(
      operator?: string | null,
      strategy?: null,
      totalSlashedShares?: null
    ): OperatorSharesSlashedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): PausedEventFilter;
    Paused(account?: string | null, newPausedStatus?: null): PausedEventFilter;

    "SlashingWithdrawalCompleted(bytes32)"(
      withdrawalRoot?: null
    ): SlashingWithdrawalCompletedEventFilter;
    SlashingWithdrawalCompleted(
      withdrawalRoot?: null
    ): SlashingWithdrawalCompletedEventFilter;

    "SlashingWithdrawalQueued(bytes32,(address,address,address,uint256,uint32,address[],uint256[]),uint256[])"(
      withdrawalRoot?: null,
      withdrawal?: null,
      sharesToWithdraw?: null
    ): SlashingWithdrawalQueuedEventFilter;
    SlashingWithdrawalQueued(
      withdrawalRoot?: null,
      withdrawal?: null,
      sharesToWithdraw?: null
    ): SlashingWithdrawalQueuedEventFilter;

    "StakerDelegated(address,address)"(
      staker?: string | null,
      operator?: string | null
    ): StakerDelegatedEventFilter;
    StakerDelegated(
      staker?: string | null,
      operator?: string | null
    ): StakerDelegatedEventFilter;

    "StakerForceUndelegated(address,address)"(
      staker?: string | null,
      operator?: string | null
    ): StakerForceUndelegatedEventFilter;
    StakerForceUndelegated(
      staker?: string | null,
      operator?: string | null
    ): StakerForceUndelegatedEventFilter;

    "StakerUndelegated(address,address)"(
      staker?: string | null,
      operator?: string | null
    ): StakerUndelegatedEventFilter;
    StakerUndelegated(
      staker?: string | null,
      operator?: string | null
    ): StakerUndelegatedEventFilter;

    "Unpaused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
    Unpaused(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
  };

  estimateGas: {
    DELEGATION_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    allocationManager(overrides?: CallOverrides): Promise<BigNumber>;

    beaconChainETHStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    calculateDelegationApprovalDigestHash(
      staker: string,
      operator: string,
      approver: string,
      approverSalt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWithdrawalRoot(
      withdrawal: IDelegationManagerTypes.WithdrawalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeQueuedWithdrawal(
      withdrawal: IDelegationManagerTypes.WithdrawalStruct,
      tokens: string[],
      receiveAsTokens: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    completeQueuedWithdrawals(
      withdrawals: IDelegationManagerTypes.WithdrawalStruct[],
      tokens: string[][],
      receiveAsTokens: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    convertToDepositShares(
      staker: string,
      strategies: string[],
      withdrawableShares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeWithdrawalsQueued(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseDelegatedShares(
      staker: string,
      curDepositShares: BigNumberish,
      beaconChainSlashingFactorDecrease: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegateTo(
      operator: string,
      approverSignatureAndExpiry: ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegatedTo(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegationApprover(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegationApproverSaltIsSpent(
      delegationApprover: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositScalingFactor(
      staker: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    eigenPodManager(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositedShares(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorShares(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorsShares(
      operators: string[],
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueuedWithdrawal(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueuedWithdrawalRoots(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQueuedWithdrawals(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSlashableSharesInQueue(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableShares(
      staker: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseDelegatedShares(
      staker: string,
      strategy: string,
      prevDepositShares: BigNumberish,
      addedShares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      initialOwner: string,
      initialPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isDelegated(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    minWithdrawalDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    modifyOperatorDetails(
      operator: string,
      newDelegationApprover: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    operatorShares(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseAll(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdrawals(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permissionController(overrides?: CallOverrides): Promise<BigNumber>;

    queueWithdrawals(
      params: IDelegationManagerTypes.QueuedWithdrawalParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    queuedWithdrawals(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redelegate(
      newOperator: string,
      newOperatorApproverSig: ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerAsOperator(
      initDelegationApprover: string,
      allocationDelay: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    slashOperatorShares(
      operator: string,
      strategy: string,
      prevMaxMagnitude: BigNumberish,
      newMaxMagnitude: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    strategyManager(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    undelegate(
      staker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateOperatorMetadataURI(
      operator: string,
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATION_APPROVAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocationManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beaconChainETHStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateDelegationApprovalDigestHash(
      staker: string,
      operator: string,
      approver: string,
      approverSalt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateWithdrawalRoot(
      withdrawal: IDelegationManagerTypes.WithdrawalStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeQueuedWithdrawal(
      withdrawal: IDelegationManagerTypes.WithdrawalStruct,
      tokens: string[],
      receiveAsTokens: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    completeQueuedWithdrawals(
      withdrawals: IDelegationManagerTypes.WithdrawalStruct[],
      tokens: string[][],
      receiveAsTokens: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    convertToDepositShares(
      staker: string,
      strategies: string[],
      withdrawableShares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeWithdrawalsQueued(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseDelegatedShares(
      staker: string,
      curDepositShares: BigNumberish,
      beaconChainSlashingFactorDecrease: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegateTo(
      operator: string,
      approverSignatureAndExpiry: ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegatedTo(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegationApprover(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegationApproverSaltIsSpent(
      delegationApprover: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositScalingFactor(
      staker: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eigenPodManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositedShares(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorShares(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorsShares(
      operators: string[],
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueuedWithdrawal(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueuedWithdrawalRoots(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQueuedWithdrawals(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSlashableSharesInQueue(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawableShares(
      staker: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseDelegatedShares(
      staker: string,
      strategy: string,
      prevDepositShares: BigNumberish,
      addedShares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      initialOwner: string,
      initialPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isDelegated(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minWithdrawalDelayBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyOperatorDetails(
      operator: string,
      newDelegationApprover: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    operatorShares(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauserRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingWithdrawals(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissionController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueWithdrawals(
      params: IDelegationManagerTypes.QueuedWithdrawalParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    queuedWithdrawals(
      withdrawalRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redelegate(
      newOperator: string,
      newOperatorApproverSig: ISignatureUtilsMixinTypes.SignatureWithExpiryStruct,
      approverSalt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerAsOperator(
      initDelegationApprover: string,
      allocationDelay: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    slashOperatorShares(
      operator: string,
      strategy: string,
      prevMaxMagnitude: BigNumberish,
      newMaxMagnitude: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    strategyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    undelegate(
      staker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateOperatorMetadataURI(
      operator: string,
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
