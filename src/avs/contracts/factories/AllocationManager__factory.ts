/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AllocationManager,
  AllocationManagerInterface,
} from "../AllocationManager";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_delegation",
        type: "address",
        internalType: "contract IDelegationManager",
      },
      {
        name: "_pauserRegistry",
        type: "address",
        internalType: "contract IPauserRegistry",
      },
      {
        name: "_permissionController",
        type: "address",
        internalType: "contract IPermissionController",
      },
      {
        name: "_DEALLOCATION_DELAY",
        type: "uint32",
        internalType: "uint32",
      },
      {
        name: "_ALLOCATION_CONFIGURATION_DELAY",
        type: "uint32",
        internalType: "uint32",
      },
      {
        name: "_version",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "ALLOCATION_CONFIGURATION_DELAY",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "DEALLOCATION_DELAY",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "addStrategiesToOperatorSet",
    inputs: [
      {
        name: "avs",
        type: "address",
        internalType: "address",
      },
      {
        name: "operatorSetId",
        type: "uint32",
        internalType: "uint32",
      },
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IStrategy[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "clearDeallocationQueue",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IStrategy[]",
      },
      {
        name: "numToClear",
        type: "uint16[]",
        internalType: "uint16[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "createOperatorSets",
    inputs: [
      {
        name: "avs",
        type: "address",
        internalType: "address",
      },
      {
        name: "params",
        type: "tuple[]",
        internalType: "struct IAllocationManagerTypes.CreateSetParams[]",
        components: [
          {
            name: "operatorSetId",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "strategies",
            type: "address[]",
            internalType: "contract IStrategy[]",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "delegation",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IDelegationManager",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "deregisterFromOperatorSets",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct IAllocationManagerTypes.DeregisterParams",
        components: [
          {
            name: "operator",
            type: "address",
            internalType: "address",
          },
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "operatorSetIds",
            type: "uint32[]",
            internalType: "uint32[]",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAVSRegistrar",
    inputs: [
      {
        name: "avs",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IAVSRegistrar",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllocatableMagnitude",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "strategy",
        type: "address",
        internalType: "contract IStrategy",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllocatedSets",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct OperatorSet[]",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllocatedStake",
    inputs: [
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
      {
        name: "operators",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IStrategy[]",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256[][]",
        internalType: "uint256[][]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllocatedStrategies",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "contract IStrategy[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllocation",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
      {
        name: "strategy",
        type: "address",
        internalType: "contract IStrategy",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IAllocationManagerTypes.Allocation",
        components: [
          {
            name: "currentMagnitude",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "pendingDiff",
            type: "int128",
            internalType: "int128",
          },
          {
            name: "effectBlock",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllocationDelay",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAllocations",
    inputs: [
      {
        name: "operators",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
      {
        name: "strategy",
        type: "address",
        internalType: "contract IStrategy",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct IAllocationManagerTypes.Allocation[]",
        components: [
          {
            name: "currentMagnitude",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "pendingDiff",
            type: "int128",
            internalType: "int128",
          },
          {
            name: "effectBlock",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getEncumberedMagnitude",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "strategy",
        type: "address",
        internalType: "contract IStrategy",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMaxMagnitude",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "strategy",
        type: "address",
        internalType: "contract IStrategy",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMaxMagnitudes",
    inputs: [
      {
        name: "operators",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "strategy",
        type: "address",
        internalType: "contract IStrategy",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint64[]",
        internalType: "uint64[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMaxMagnitudes",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IStrategy[]",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint64[]",
        internalType: "uint64[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMaxMagnitudesAtBlock",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IStrategy[]",
      },
      {
        name: "blockNumber",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint64[]",
        internalType: "uint64[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMemberCount",
    inputs: [
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMembers",
    inputs: [
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMinimumSlashableStake",
    inputs: [
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
      {
        name: "operators",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IStrategy[]",
      },
      {
        name: "futureBlock",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "slashableStake",
        type: "uint256[][]",
        internalType: "uint256[][]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOperatorSetCount",
    inputs: [
      {
        name: "avs",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getRegisteredSets",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct OperatorSet[]",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStrategiesInOperatorSet",
    inputs: [
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "contract IStrategy[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getStrategyAllocations",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "strategy",
        type: "address",
        internalType: "contract IStrategy",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct OperatorSet[]",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
      {
        name: "",
        type: "tuple[]",
        internalType: "struct IAllocationManagerTypes.Allocation[]",
        components: [
          {
            name: "currentMagnitude",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "pendingDiff",
            type: "int128",
            internalType: "int128",
          },
          {
            name: "effectBlock",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "initialOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "initialPausedStatus",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "isMemberOfOperatorSet",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isOperatorSet",
    inputs: [
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isOperatorSlashable",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "operatorSet",
        type: "tuple",
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "modifyAllocations",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "params",
        type: "tuple[]",
        internalType: "struct IAllocationManagerTypes.AllocateParams[]",
        components: [
          {
            name: "operatorSet",
            type: "tuple",
            internalType: "struct OperatorSet",
            components: [
              {
                name: "avs",
                type: "address",
                internalType: "address",
              },
              {
                name: "id",
                type: "uint32",
                internalType: "uint32",
              },
            ],
          },
          {
            name: "strategies",
            type: "address[]",
            internalType: "contract IStrategy[]",
          },
          {
            name: "newMagnitudes",
            type: "uint64[]",
            internalType: "uint64[]",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pause",
    inputs: [
      {
        name: "newPausedStatus",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "pauseAll",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "paused",
    inputs: [
      {
        name: "index",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "paused",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pauserRegistry",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IPauserRegistry",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "permissionController",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IPermissionController",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "registerForOperatorSets",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "params",
        type: "tuple",
        internalType: "struct IAllocationManagerTypes.RegisterParams",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "operatorSetIds",
            type: "uint32[]",
            internalType: "uint32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "removeStrategiesFromOperatorSet",
    inputs: [
      {
        name: "avs",
        type: "address",
        internalType: "address",
      },
      {
        name: "operatorSetId",
        type: "uint32",
        internalType: "uint32",
      },
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IStrategy[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setAVSRegistrar",
    inputs: [
      {
        name: "avs",
        type: "address",
        internalType: "address",
      },
      {
        name: "registrar",
        type: "address",
        internalType: "contract IAVSRegistrar",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setAllocationDelay",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "delay",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "slashOperator",
    inputs: [
      {
        name: "avs",
        type: "address",
        internalType: "address",
      },
      {
        name: "params",
        type: "tuple",
        internalType: "struct IAllocationManagerTypes.SlashingParams",
        components: [
          {
            name: "operator",
            type: "address",
            internalType: "address",
          },
          {
            name: "operatorSetId",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "strategies",
            type: "address[]",
            internalType: "contract IStrategy[]",
          },
          {
            name: "wadsToSlash",
            type: "uint256[]",
            internalType: "uint256[]",
          },
          {
            name: "description",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "unpause",
    inputs: [
      {
        name: "newPausedStatus",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateAVSMetadataURI",
    inputs: [
      {
        name: "avs",
        type: "address",
        internalType: "address",
      },
      {
        name: "metadataURI",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "AVSMetadataURIUpdated",
    inputs: [
      {
        name: "avs",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "metadataURI",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AVSRegistrarSet",
    inputs: [
      {
        name: "avs",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "registrar",
        type: "address",
        indexed: false,
        internalType: "contract IAVSRegistrar",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AllocationDelaySet",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "delay",
        type: "uint32",
        indexed: false,
        internalType: "uint32",
      },
      {
        name: "effectBlock",
        type: "uint32",
        indexed: false,
        internalType: "uint32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AllocationUpdated",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "operatorSet",
        type: "tuple",
        indexed: false,
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
      {
        name: "strategy",
        type: "address",
        indexed: false,
        internalType: "contract IStrategy",
      },
      {
        name: "magnitude",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
      {
        name: "effectBlock",
        type: "uint32",
        indexed: false,
        internalType: "uint32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "EncumberedMagnitudeUpdated",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "strategy",
        type: "address",
        indexed: false,
        internalType: "contract IStrategy",
      },
      {
        name: "encumberedMagnitude",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "MaxMagnitudeUpdated",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "strategy",
        type: "address",
        indexed: false,
        internalType: "contract IStrategy",
      },
      {
        name: "maxMagnitude",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorAddedToOperatorSet",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operatorSet",
        type: "tuple",
        indexed: false,
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorRemovedFromOperatorSet",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operatorSet",
        type: "tuple",
        indexed: false,
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorSetCreated",
    inputs: [
      {
        name: "operatorSet",
        type: "tuple",
        indexed: false,
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorSlashed",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "operatorSet",
        type: "tuple",
        indexed: false,
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
      {
        name: "strategies",
        type: "address[]",
        indexed: false,
        internalType: "contract IStrategy[]",
      },
      {
        name: "wadSlashed",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
      {
        name: "description",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Paused",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newPausedStatus",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "StrategyAddedToOperatorSet",
    inputs: [
      {
        name: "operatorSet",
        type: "tuple",
        indexed: false,
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
      {
        name: "strategy",
        type: "address",
        indexed: false,
        internalType: "contract IStrategy",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "StrategyRemovedFromOperatorSet",
    inputs: [
      {
        name: "operatorSet",
        type: "tuple",
        indexed: false,
        internalType: "struct OperatorSet",
        components: [
          {
            name: "avs",
            type: "address",
            internalType: "address",
          },
          {
            name: "id",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
      {
        name: "strategy",
        type: "address",
        indexed: false,
        internalType: "contract IStrategy",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Unpaused",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newPausedStatus",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AlreadyMemberOfSet",
    inputs: [],
  },
  {
    type: "error",
    name: "CurrentlyPaused",
    inputs: [],
  },
  {
    type: "error",
    name: "Empty",
    inputs: [],
  },
  {
    type: "error",
    name: "InputAddressZero",
    inputs: [],
  },
  {
    type: "error",
    name: "InputArrayLengthMismatch",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientMagnitude",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidAVSRegistrar",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidCaller",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidNewPausedStatus",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidOperator",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidOperatorSet",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPermissions",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidShortString",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSnapshotOrdering",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidWadToSlash",
    inputs: [],
  },
  {
    type: "error",
    name: "ModificationAlreadyPending",
    inputs: [],
  },
  {
    type: "error",
    name: "NonexistentAVSMetadata",
    inputs: [],
  },
  {
    type: "error",
    name: "NotMemberOfSet",
    inputs: [],
  },
  {
    type: "error",
    name: "OnlyPauser",
    inputs: [],
  },
  {
    type: "error",
    name: "OnlyUnpauser",
    inputs: [],
  },
  {
    type: "error",
    name: "OperatorNotSlashable",
    inputs: [],
  },
  {
    type: "error",
    name: "OutOfBounds",
    inputs: [],
  },
  {
    type: "error",
    name: "SameMagnitude",
    inputs: [],
  },
  {
    type: "error",
    name: "StrategiesMustBeInAscendingOrder",
    inputs: [],
  },
  {
    type: "error",
    name: "StrategyAlreadyInOperatorSet",
    inputs: [],
  },
  {
    type: "error",
    name: "StrategyNotInOperatorSet",
    inputs: [],
  },
  {
    type: "error",
    name: "StringTooLong",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "UninitializedAllocationDelay",
    inputs: [],
  },
] as const;

const _bytecode =
  "";

type AllocationManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AllocationManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AllocationManager__factory extends ContractFactory {
  constructor(...args: AllocationManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _delegation: string,
    _pauserRegistry: string,
    _permissionController: string,
    _DEALLOCATION_DELAY: BigNumberish,
    _ALLOCATION_CONFIGURATION_DELAY: BigNumberish,
    _version: string,
    overrides?: Overrides & { from?: string }
  ): Promise<AllocationManager> {
    return super.deploy(
      _delegation,
      _pauserRegistry,
      _permissionController,
      _DEALLOCATION_DELAY,
      _ALLOCATION_CONFIGURATION_DELAY,
      _version,
      overrides || {}
    ) as Promise<AllocationManager>;
  }
  override getDeployTransaction(
    _delegation: string,
    _pauserRegistry: string,
    _permissionController: string,
    _DEALLOCATION_DELAY: BigNumberish,
    _ALLOCATION_CONFIGURATION_DELAY: BigNumberish,
    _version: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _delegation,
      _pauserRegistry,
      _permissionController,
      _DEALLOCATION_DELAY,
      _ALLOCATION_CONFIGURATION_DELAY,
      _version,
      overrides || {}
    );
  }
  override attach(address: string): AllocationManager {
    return super.attach(address) as AllocationManager;
  }
  override connect(signer: Signer): AllocationManager__factory {
    return super.connect(signer) as AllocationManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllocationManagerInterface {
    return new utils.Interface(_abi) as AllocationManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AllocationManager {
    return new Contract(address, _abi, signerOrProvider) as AllocationManager;
  }
}
