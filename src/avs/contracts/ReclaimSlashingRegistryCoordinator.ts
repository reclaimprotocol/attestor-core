/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ISlashingRegistryCoordinatorTypes {
  export type OperatorKickParamStruct = {
    quorumNumber: BigNumberish;
    operator: string;
  };

  export type OperatorKickParamStructOutput = [number, string] & {
    quorumNumber: number;
    operator: string;
  };

  export type OperatorSetParamStruct = {
    maxOperatorCount: BigNumberish;
    kickBIPsOfOperatorStake: BigNumberish;
    kickBIPsOfTotalStake: BigNumberish;
  };

  export type OperatorSetParamStructOutput = [number, number, number] & {
    maxOperatorCount: number;
    kickBIPsOfOperatorStake: number;
    kickBIPsOfTotalStake: number;
  };

  export type OperatorInfoStruct = {
    operatorId: BytesLike;
    status: BigNumberish;
  };

  export type OperatorInfoStructOutput = [string, number] & {
    operatorId: string;
    status: number;
  };

  export type QuorumBitmapUpdateStruct = {
    updateBlockNumber: BigNumberish;
    nextUpdateBlockNumber: BigNumberish;
    quorumBitmap: BigNumberish;
  };

  export type QuorumBitmapUpdateStructOutput = [number, number, BigNumber] & {
    updateBlockNumber: number;
    nextUpdateBlockNumber: number;
    quorumBitmap: BigNumber;
  };
}

export declare namespace IStakeRegistryTypes {
  export type StrategyParamsStruct = {
    strategy: string;
    multiplier: BigNumberish;
  };

  export type StrategyParamsStructOutput = [string, BigNumber] & {
    strategy: string;
    multiplier: BigNumber;
  };
}

export declare namespace BN254 {
  export type G1PointStruct = { X: BigNumberish; Y: BigNumberish };

  export type G1PointStructOutput = [BigNumber, BigNumber] & {
    X: BigNumber;
    Y: BigNumber;
  };
}

export interface ReclaimSlashingRegistryCoordinatorInterface
  extends utils.Interface {
  functions: {
    "OPERATOR_CHURN_APPROVAL_TYPEHASH()": FunctionFragment;
    "PUBKEY_REGISTRATION_TYPEHASH()": FunctionFragment;
    "allocationManager()": FunctionFragment;
    "avs()": FunctionFragment;
    "blsApkRegistry()": FunctionFragment;
    "calculateOperatorChurnApprovalDigestHash(address,bytes32,(uint8,address)[],bytes32,uint256)": FunctionFragment;
    "calculatePubkeyRegistrationMessageHash(address)": FunctionFragment;
    "churnApprover()": FunctionFragment;
    "createSlashableStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[],uint32)": FunctionFragment;
    "createTotalDelegatedStakeQuorum((uint32,uint16,uint16),uint96,(address,uint96)[])": FunctionFragment;
    "deregisterOperator(address,address,uint32[])": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "ejectOperator(address,bytes)": FunctionFragment;
    "ejectionCooldown()": FunctionFragment;
    "ejector()": FunctionFragment;
    "getCurrentQuorumBitmap(bytes32)": FunctionFragment;
    "getOperator(address)": FunctionFragment;
    "getOperatorFromId(bytes32)": FunctionFragment;
    "getOperatorId(address)": FunctionFragment;
    "getOperatorSetParams(uint8)": FunctionFragment;
    "getOperatorStatus(address)": FunctionFragment;
    "getQuorumBitmapAtBlockNumberByIndex(bytes32,uint32,uint256)": FunctionFragment;
    "getQuorumBitmapHistoryLength(bytes32)": FunctionFragment;
    "getQuorumBitmapIndicesAtBlockNumber(uint32,bytes32[])": FunctionFragment;
    "getQuorumBitmapUpdateByIndex(bytes32,uint256)": FunctionFragment;
    "indexRegistry()": FunctionFragment;
    "initialize(address,address,address,uint256,address)": FunctionFragment;
    "isChurnApproverSaltUsed(bytes32)": FunctionFragment;
    "lastEjectionTimestamp(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "pauseAll()": FunctionFragment;
    "paused(uint8)": FunctionFragment;
    "paused()": FunctionFragment;
    "pauserRegistry()": FunctionFragment;
    "pubkeyRegistrationMessageHash(address)": FunctionFragment;
    "quorumCount()": FunctionFragment;
    "quorumUpdateBlockNumber(uint8)": FunctionFragment;
    "registerOperator(address,address,uint32[],bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAVS(address)": FunctionFragment;
    "setChurnApprover(address)": FunctionFragment;
    "setEjectionCooldown(uint256)": FunctionFragment;
    "setEjector(address)": FunctionFragment;
    "setOperatorSetParams(uint8,(uint32,uint16,uint16))": FunctionFragment;
    "socketRegistry()": FunctionFragment;
    "stakeRegistry()": FunctionFragment;
    "supportsAVS(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause(uint256)": FunctionFragment;
    "updateOperators(address[])": FunctionFragment;
    "updateOperatorsForQuorum(address[][],bytes)": FunctionFragment;
    "updateSocket(string)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "OPERATOR_CHURN_APPROVAL_TYPEHASH"
      | "PUBKEY_REGISTRATION_TYPEHASH"
      | "allocationManager"
      | "avs"
      | "blsApkRegistry"
      | "calculateOperatorChurnApprovalDigestHash"
      | "calculatePubkeyRegistrationMessageHash"
      | "churnApprover"
      | "createSlashableStakeQuorum"
      | "createTotalDelegatedStakeQuorum"
      | "deregisterOperator"
      | "domainSeparator"
      | "eip712Domain"
      | "ejectOperator"
      | "ejectionCooldown"
      | "ejector"
      | "getCurrentQuorumBitmap"
      | "getOperator"
      | "getOperatorFromId"
      | "getOperatorId"
      | "getOperatorSetParams"
      | "getOperatorStatus"
      | "getQuorumBitmapAtBlockNumberByIndex"
      | "getQuorumBitmapHistoryLength"
      | "getQuorumBitmapIndicesAtBlockNumber"
      | "getQuorumBitmapUpdateByIndex"
      | "indexRegistry"
      | "initialize"
      | "isChurnApproverSaltUsed"
      | "lastEjectionTimestamp"
      | "owner"
      | "pause"
      | "pauseAll"
      | "paused(uint8)"
      | "paused()"
      | "pauserRegistry"
      | "pubkeyRegistrationMessageHash"
      | "quorumCount"
      | "quorumUpdateBlockNumber"
      | "registerOperator"
      | "renounceOwnership"
      | "setAVS"
      | "setChurnApprover"
      | "setEjectionCooldown"
      | "setEjector"
      | "setOperatorSetParams"
      | "socketRegistry"
      | "stakeRegistry"
      | "supportsAVS"
      | "transferOwnership"
      | "unpause"
      | "updateOperators"
      | "updateOperatorsForQuorum"
      | "updateSocket"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "OPERATOR_CHURN_APPROVAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBKEY_REGISTRATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocationManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "avs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blsApkRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOperatorChurnApprovalDigestHash",
    values: [
      string,
      BytesLike,
      ISlashingRegistryCoordinatorTypes.OperatorKickParamStruct[],
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePubkeyRegistrationMessageHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "churnApprover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSlashableStakeQuorum",
    values: [
      ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      BigNumberish,
      IStakeRegistryTypes.StrategyParamsStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTotalDelegatedStakeQuorum",
    values: [
      ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      BigNumberish,
      IStakeRegistryTypes.StrategyParamsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterOperator",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ejectOperator",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ejectionCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ejector", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentQuorumBitmap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOperatorFromId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorSetParams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuorumBitmapAtBlockNumberByIndex",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuorumBitmapHistoryLength",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuorumBitmapIndicesAtBlockNumber",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuorumBitmapUpdateByIndex",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isChurnApproverSaltUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEjectionTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pauseAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paused(uint8)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauserRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pubkeyRegistrationMessageHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumUpdateBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [string, string, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAVS", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setChurnApprover",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEjectionCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setEjector", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOperatorSetParams",
    values: [
      BigNumberish,
      ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "socketRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "supportsAVS", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperators",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperatorsForQuorum",
    values: [string[][], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSocket",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "OPERATOR_CHURN_APPROVAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBKEY_REGISTRATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "avs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blsApkRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOperatorChurnApprovalDigestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePubkeyRegistrationMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "churnApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSlashableStakeQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTotalDelegatedStakeQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ejectOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ejectionCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ejector", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentQuorumBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorSetParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuorumBitmapAtBlockNumberByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuorumBitmapHistoryLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuorumBitmapIndicesAtBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuorumBitmapUpdateByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isChurnApproverSaltUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEjectionTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paused(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pubkeyRegistrationMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumUpdateBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAVS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChurnApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEjectionCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEjector", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorSetParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "socketRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperatorsForQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AVSUpdated(address,address)": EventFragment;
    "ChurnApproverUpdated(address,address)": EventFragment;
    "EIP712DomainChanged()": EventFragment;
    "EjectionCooldownUpdated(uint256,uint256)": EventFragment;
    "EjectorUpdated(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OperatorDeregistered(address,bytes32)": EventFragment;
    "OperatorRegistered(address,bytes32)": EventFragment;
    "OperatorSetParamsUpdated(uint8,(uint32,uint16,uint16))": EventFragment;
    "OperatorSocketUpdate(bytes32,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address,uint256)": EventFragment;
    "QuorumBlockNumberUpdated(uint8,uint256)": EventFragment;
    "QuorumCreated(uint8,(uint32,uint16,uint16),uint96,(address,uint96)[],uint8,uint32)": EventFragment;
    "Unpaused(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AVSUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChurnApproverUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EjectionCooldownUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EjectorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSetParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSocketUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumBlockNumberUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AVSUpdatedEventObject {
  prevAVS: string;
  newAVS: string;
}
export type AVSUpdatedEvent = TypedEvent<
  [string, string],
  AVSUpdatedEventObject
>;

export type AVSUpdatedEventFilter = TypedEventFilter<AVSUpdatedEvent>;

export interface ChurnApproverUpdatedEventObject {
  prevChurnApprover: string;
  newChurnApprover: string;
}
export type ChurnApproverUpdatedEvent = TypedEvent<
  [string, string],
  ChurnApproverUpdatedEventObject
>;

export type ChurnApproverUpdatedEventFilter =
  TypedEventFilter<ChurnApproverUpdatedEvent>;

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface EjectionCooldownUpdatedEventObject {
  prevEjectionCooldown: BigNumber;
  newEjectionCooldown: BigNumber;
}
export type EjectionCooldownUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  EjectionCooldownUpdatedEventObject
>;

export type EjectionCooldownUpdatedEventFilter =
  TypedEventFilter<EjectionCooldownUpdatedEvent>;

export interface EjectorUpdatedEventObject {
  prevEjector: string;
  newEjector: string;
}
export type EjectorUpdatedEvent = TypedEvent<
  [string, string],
  EjectorUpdatedEventObject
>;

export type EjectorUpdatedEventFilter = TypedEventFilter<EjectorUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OperatorDeregisteredEventObject {
  operator: string;
  operatorId: string;
}
export type OperatorDeregisteredEvent = TypedEvent<
  [string, string],
  OperatorDeregisteredEventObject
>;

export type OperatorDeregisteredEventFilter =
  TypedEventFilter<OperatorDeregisteredEvent>;

export interface OperatorRegisteredEventObject {
  operator: string;
  operatorId: string;
}
export type OperatorRegisteredEvent = TypedEvent<
  [string, string],
  OperatorRegisteredEventObject
>;

export type OperatorRegisteredEventFilter =
  TypedEventFilter<OperatorRegisteredEvent>;

export interface OperatorSetParamsUpdatedEventObject {
  quorumNumber: number;
  operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStructOutput;
}
export type OperatorSetParamsUpdatedEvent = TypedEvent<
  [number, ISlashingRegistryCoordinatorTypes.OperatorSetParamStructOutput],
  OperatorSetParamsUpdatedEventObject
>;

export type OperatorSetParamsUpdatedEventFilter =
  TypedEventFilter<OperatorSetParamsUpdatedEvent>;

export interface OperatorSocketUpdateEventObject {
  operatorId: string;
  socket: string;
}
export type OperatorSocketUpdateEvent = TypedEvent<
  [string, string],
  OperatorSocketUpdateEventObject
>;

export type OperatorSocketUpdateEventFilter =
  TypedEventFilter<OperatorSocketUpdateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type PausedEvent = TypedEvent<[string, BigNumber], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface QuorumBlockNumberUpdatedEventObject {
  quorumNumber: number;
  blocknumber: BigNumber;
}
export type QuorumBlockNumberUpdatedEvent = TypedEvent<
  [number, BigNumber],
  QuorumBlockNumberUpdatedEventObject
>;

export type QuorumBlockNumberUpdatedEventFilter =
  TypedEventFilter<QuorumBlockNumberUpdatedEvent>;

export interface QuorumCreatedEventObject {
  quorumNumber: number;
  operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStructOutput;
  minimumStake: BigNumber;
  strategyParams: IStakeRegistryTypes.StrategyParamsStructOutput[];
  stakeType: number;
  lookAheadPeriod: number;
}
export type QuorumCreatedEvent = TypedEvent<
  [
    number,
    ISlashingRegistryCoordinatorTypes.OperatorSetParamStructOutput,
    BigNumber,
    IStakeRegistryTypes.StrategyParamsStructOutput[],
    number,
    number
  ],
  QuorumCreatedEventObject
>;

export type QuorumCreatedEventFilter = TypedEventFilter<QuorumCreatedEvent>;

export interface UnpausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type UnpausedEvent = TypedEvent<
  [string, BigNumber],
  UnpausedEventObject
>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ReclaimSlashingRegistryCoordinator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReclaimSlashingRegistryCoordinatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    OPERATOR_CHURN_APPROVAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    PUBKEY_REGISTRATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    allocationManager(overrides?: CallOverrides): Promise<[string]>;

    avs(overrides?: CallOverrides): Promise<[string]>;

    blsApkRegistry(overrides?: CallOverrides): Promise<[string]>;

    calculateOperatorChurnApprovalDigestHash(
      registeringOperator: string,
      registeringOperatorId: BytesLike,
      operatorKickParams: ISlashingRegistryCoordinatorTypes.OperatorKickParamStruct[],
      salt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    calculatePubkeyRegistrationMessageHash(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    churnApprover(overrides?: CallOverrides): Promise<[string]>;

    createSlashableStakeQuorum(
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      minimumStake: BigNumberish,
      strategyParams: IStakeRegistryTypes.StrategyParamsStruct[],
      lookAheadPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createTotalDelegatedStakeQuorum(
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      minimumStake: BigNumberish,
      strategyParams: IStakeRegistryTypes.StrategyParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deregisterOperator(
      operator: string,
      avs: string,
      operatorSetIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    ejectOperator(
      operator: string,
      quorumNumbers: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ejectionCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    ejector(overrides?: CallOverrides): Promise<[string]>;

    getCurrentQuorumBitmap(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[ISlashingRegistryCoordinatorTypes.OperatorInfoStructOutput]>;

    getOperatorFromId(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOperatorId(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOperatorSetParams(
      quorumNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ISlashingRegistryCoordinatorTypes.OperatorSetParamStructOutput]
    >;

    getOperatorStatus(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getQuorumBitmapAtBlockNumberByIndex(
      operatorId: BytesLike,
      blockNumber: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQuorumBitmapHistoryLength(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQuorumBitmapIndicesAtBlockNumber(
      blockNumber: BigNumberish,
      operatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    getQuorumBitmapUpdateByIndex(
      operatorId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ISlashingRegistryCoordinatorTypes.QuorumBitmapUpdateStructOutput]
    >;

    indexRegistry(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      initialOwner: string,
      churnApprover: string,
      ejector: string,
      initialPausedStatus: BigNumberish,
      avs: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isChurnApproverSaltUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastEjectionTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pauserRegistry(overrides?: CallOverrides): Promise<[string]>;

    pubkeyRegistrationMessageHash(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[BN254.G1PointStructOutput]>;

    quorumCount(overrides?: CallOverrides): Promise<[number]>;

    quorumUpdateBlockNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerOperator(
      operator: string,
      avs: string,
      operatorSetIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAVS(
      _avs: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setChurnApprover(
      _churnApprover: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEjectionCooldown(
      _ejectionCooldown: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEjector(
      _ejector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOperatorSetParams(
      quorumNumber: BigNumberish,
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    socketRegistry(overrides?: CallOverrides): Promise<[string]>;

    stakeRegistry(overrides?: CallOverrides): Promise<[string]>;

    supportsAVS(_avs: string, overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateOperators(
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      quorumNumbers: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSocket(
      socket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  OPERATOR_CHURN_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  PUBKEY_REGISTRATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  allocationManager(overrides?: CallOverrides): Promise<string>;

  avs(overrides?: CallOverrides): Promise<string>;

  blsApkRegistry(overrides?: CallOverrides): Promise<string>;

  calculateOperatorChurnApprovalDigestHash(
    registeringOperator: string,
    registeringOperatorId: BytesLike,
    operatorKickParams: ISlashingRegistryCoordinatorTypes.OperatorKickParamStruct[],
    salt: BytesLike,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  calculatePubkeyRegistrationMessageHash(
    operator: string,
    overrides?: CallOverrides
  ): Promise<string>;

  churnApprover(overrides?: CallOverrides): Promise<string>;

  createSlashableStakeQuorum(
    operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
    minimumStake: BigNumberish,
    strategyParams: IStakeRegistryTypes.StrategyParamsStruct[],
    lookAheadPeriod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createTotalDelegatedStakeQuorum(
    operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
    minimumStake: BigNumberish,
    strategyParams: IStakeRegistryTypes.StrategyParamsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deregisterOperator(
    operator: string,
    avs: string,
    operatorSetIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  ejectOperator(
    operator: string,
    quorumNumbers: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ejectionCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  ejector(overrides?: CallOverrides): Promise<string>;

  getCurrentQuorumBitmap(
    operatorId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOperator(
    operator: string,
    overrides?: CallOverrides
  ): Promise<ISlashingRegistryCoordinatorTypes.OperatorInfoStructOutput>;

  getOperatorFromId(
    operatorId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getOperatorId(operator: string, overrides?: CallOverrides): Promise<string>;

  getOperatorSetParams(
    quorumNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ISlashingRegistryCoordinatorTypes.OperatorSetParamStructOutput>;

  getOperatorStatus(
    operator: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getQuorumBitmapAtBlockNumberByIndex(
    operatorId: BytesLike,
    blockNumber: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuorumBitmapHistoryLength(
    operatorId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuorumBitmapIndicesAtBlockNumber(
    blockNumber: BigNumberish,
    operatorIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<number[]>;

  getQuorumBitmapUpdateByIndex(
    operatorId: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ISlashingRegistryCoordinatorTypes.QuorumBitmapUpdateStructOutput>;

  indexRegistry(overrides?: CallOverrides): Promise<string>;

  initialize(
    initialOwner: string,
    churnApprover: string,
    ejector: string,
    initialPausedStatus: BigNumberish,
    avs: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isChurnApproverSaltUsed(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastEjectionTimestamp(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseAll(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "paused(uint8)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

  pauserRegistry(overrides?: CallOverrides): Promise<string>;

  pubkeyRegistrationMessageHash(
    operator: string,
    overrides?: CallOverrides
  ): Promise<BN254.G1PointStructOutput>;

  quorumCount(overrides?: CallOverrides): Promise<number>;

  quorumUpdateBlockNumber(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerOperator(
    operator: string,
    avs: string,
    operatorSetIds: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAVS(
    _avs: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setChurnApprover(
    _churnApprover: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEjectionCooldown(
    _ejectionCooldown: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEjector(
    _ejector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOperatorSetParams(
    quorumNumber: BigNumberish,
    operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  socketRegistry(overrides?: CallOverrides): Promise<string>;

  stakeRegistry(overrides?: CallOverrides): Promise<string>;

  supportsAVS(_avs: string, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateOperators(
    operators: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateOperatorsForQuorum(
    operatorsPerQuorum: string[][],
    quorumNumbers: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSocket(
    socket: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    OPERATOR_CHURN_APPROVAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    PUBKEY_REGISTRATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    allocationManager(overrides?: CallOverrides): Promise<string>;

    avs(overrides?: CallOverrides): Promise<string>;

    blsApkRegistry(overrides?: CallOverrides): Promise<string>;

    calculateOperatorChurnApprovalDigestHash(
      registeringOperator: string,
      registeringOperatorId: BytesLike,
      operatorKickParams: ISlashingRegistryCoordinatorTypes.OperatorKickParamStruct[],
      salt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    calculatePubkeyRegistrationMessageHash(
      operator: string,
      overrides?: CallOverrides
    ): Promise<string>;

    churnApprover(overrides?: CallOverrides): Promise<string>;

    createSlashableStakeQuorum(
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      minimumStake: BigNumberish,
      strategyParams: IStakeRegistryTypes.StrategyParamsStruct[],
      lookAheadPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createTotalDelegatedStakeQuorum(
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      minimumStake: BigNumberish,
      strategyParams: IStakeRegistryTypes.StrategyParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    deregisterOperator(
      operator: string,
      avs: string,
      operatorSetIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    ejectOperator(
      operator: string,
      quorumNumbers: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ejectionCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    ejector(overrides?: CallOverrides): Promise<string>;

    getCurrentQuorumBitmap(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<ISlashingRegistryCoordinatorTypes.OperatorInfoStructOutput>;

    getOperatorFromId(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getOperatorId(operator: string, overrides?: CallOverrides): Promise<string>;

    getOperatorSetParams(
      quorumNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ISlashingRegistryCoordinatorTypes.OperatorSetParamStructOutput>;

    getOperatorStatus(
      operator: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getQuorumBitmapAtBlockNumberByIndex(
      operatorId: BytesLike,
      blockNumber: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumBitmapHistoryLength(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumBitmapIndicesAtBlockNumber(
      blockNumber: BigNumberish,
      operatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<number[]>;

    getQuorumBitmapUpdateByIndex(
      operatorId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ISlashingRegistryCoordinatorTypes.QuorumBitmapUpdateStructOutput>;

    indexRegistry(overrides?: CallOverrides): Promise<string>;

    initialize(
      initialOwner: string,
      churnApprover: string,
      ejector: string,
      initialPausedStatus: BigNumberish,
      avs: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isChurnApproverSaltUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastEjectionTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseAll(overrides?: CallOverrides): Promise<void>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<string>;

    pubkeyRegistrationMessageHash(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BN254.G1PointStructOutput>;

    quorumCount(overrides?: CallOverrides): Promise<number>;

    quorumUpdateBlockNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerOperator(
      operator: string,
      avs: string,
      operatorSetIds: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAVS(_avs: string, overrides?: CallOverrides): Promise<void>;

    setChurnApprover(
      _churnApprover: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEjectionCooldown(
      _ejectionCooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEjector(_ejector: string, overrides?: CallOverrides): Promise<void>;

    setOperatorSetParams(
      quorumNumber: BigNumberish,
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    socketRegistry(overrides?: CallOverrides): Promise<string>;

    stakeRegistry(overrides?: CallOverrides): Promise<string>;

    supportsAVS(_avs: string, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperators(
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      quorumNumbers: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSocket(socket: string, overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AVSUpdated(address,address)"(
      prevAVS?: null,
      newAVS?: null
    ): AVSUpdatedEventFilter;
    AVSUpdated(prevAVS?: null, newAVS?: null): AVSUpdatedEventFilter;

    "ChurnApproverUpdated(address,address)"(
      prevChurnApprover?: null,
      newChurnApprover?: null
    ): ChurnApproverUpdatedEventFilter;
    ChurnApproverUpdated(
      prevChurnApprover?: null,
      newChurnApprover?: null
    ): ChurnApproverUpdatedEventFilter;

    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "EjectionCooldownUpdated(uint256,uint256)"(
      prevEjectionCooldown?: null,
      newEjectionCooldown?: null
    ): EjectionCooldownUpdatedEventFilter;
    EjectionCooldownUpdated(
      prevEjectionCooldown?: null,
      newEjectionCooldown?: null
    ): EjectionCooldownUpdatedEventFilter;

    "EjectorUpdated(address,address)"(
      prevEjector?: null,
      newEjector?: null
    ): EjectorUpdatedEventFilter;
    EjectorUpdated(
      prevEjector?: null,
      newEjector?: null
    ): EjectorUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OperatorDeregistered(address,bytes32)"(
      operator?: string | null,
      operatorId?: BytesLike | null
    ): OperatorDeregisteredEventFilter;
    OperatorDeregistered(
      operator?: string | null,
      operatorId?: BytesLike | null
    ): OperatorDeregisteredEventFilter;

    "OperatorRegistered(address,bytes32)"(
      operator?: string | null,
      operatorId?: BytesLike | null
    ): OperatorRegisteredEventFilter;
    OperatorRegistered(
      operator?: string | null,
      operatorId?: BytesLike | null
    ): OperatorRegisteredEventFilter;

    "OperatorSetParamsUpdated(uint8,(uint32,uint16,uint16))"(
      quorumNumber?: BigNumberish | null,
      operatorSetParams?: null
    ): OperatorSetParamsUpdatedEventFilter;
    OperatorSetParamsUpdated(
      quorumNumber?: BigNumberish | null,
      operatorSetParams?: null
    ): OperatorSetParamsUpdatedEventFilter;

    "OperatorSocketUpdate(bytes32,string)"(
      operatorId?: BytesLike | null,
      socket?: null
    ): OperatorSocketUpdateEventFilter;
    OperatorSocketUpdate(
      operatorId?: BytesLike | null,
      socket?: null
    ): OperatorSocketUpdateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): PausedEventFilter;
    Paused(account?: string | null, newPausedStatus?: null): PausedEventFilter;

    "QuorumBlockNumberUpdated(uint8,uint256)"(
      quorumNumber?: BigNumberish | null,
      blocknumber?: null
    ): QuorumBlockNumberUpdatedEventFilter;
    QuorumBlockNumberUpdated(
      quorumNumber?: BigNumberish | null,
      blocknumber?: null
    ): QuorumBlockNumberUpdatedEventFilter;

    "QuorumCreated(uint8,(uint32,uint16,uint16),uint96,(address,uint96)[],uint8,uint32)"(
      quorumNumber?: BigNumberish | null,
      operatorSetParams?: null,
      minimumStake?: null,
      strategyParams?: null,
      stakeType?: null,
      lookAheadPeriod?: null
    ): QuorumCreatedEventFilter;
    QuorumCreated(
      quorumNumber?: BigNumberish | null,
      operatorSetParams?: null,
      minimumStake?: null,
      strategyParams?: null,
      stakeType?: null,
      lookAheadPeriod?: null
    ): QuorumCreatedEventFilter;

    "Unpaused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
    Unpaused(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
  };

  estimateGas: {
    OPERATOR_CHURN_APPROVAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PUBKEY_REGISTRATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    allocationManager(overrides?: CallOverrides): Promise<BigNumber>;

    avs(overrides?: CallOverrides): Promise<BigNumber>;

    blsApkRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    calculateOperatorChurnApprovalDigestHash(
      registeringOperator: string,
      registeringOperatorId: BytesLike,
      operatorKickParams: ISlashingRegistryCoordinatorTypes.OperatorKickParamStruct[],
      salt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePubkeyRegistrationMessageHash(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    churnApprover(overrides?: CallOverrides): Promise<BigNumber>;

    createSlashableStakeQuorum(
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      minimumStake: BigNumberish,
      strategyParams: IStakeRegistryTypes.StrategyParamsStruct[],
      lookAheadPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createTotalDelegatedStakeQuorum(
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      minimumStake: BigNumberish,
      strategyParams: IStakeRegistryTypes.StrategyParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deregisterOperator(
      operator: string,
      avs: string,
      operatorSetIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    ejectOperator(
      operator: string,
      quorumNumbers: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ejectionCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    ejector(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentQuorumBitmap(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorFromId(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorId(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorSetParams(
      quorumNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorStatus(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumBitmapAtBlockNumberByIndex(
      operatorId: BytesLike,
      blockNumber: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumBitmapHistoryLength(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumBitmapIndicesAtBlockNumber(
      blockNumber: BigNumberish,
      operatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumBitmapUpdateByIndex(
      operatorId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initialOwner: string,
      churnApprover: string,
      ejector: string,
      initialPausedStatus: BigNumberish,
      avs: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isChurnApproverSaltUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastEjectionTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseAll(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    pubkeyRegistrationMessageHash(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumCount(overrides?: CallOverrides): Promise<BigNumber>;

    quorumUpdateBlockNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerOperator(
      operator: string,
      avs: string,
      operatorSetIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAVS(
      _avs: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setChurnApprover(
      _churnApprover: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEjectionCooldown(
      _ejectionCooldown: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEjector(
      _ejector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOperatorSetParams(
      quorumNumber: BigNumberish,
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    socketRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    stakeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    supportsAVS(_avs: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateOperators(
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      quorumNumbers: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSocket(
      socket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    OPERATOR_CHURN_APPROVAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PUBKEY_REGISTRATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocationManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blsApkRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateOperatorChurnApprovalDigestHash(
      registeringOperator: string,
      registeringOperatorId: BytesLike,
      operatorKickParams: ISlashingRegistryCoordinatorTypes.OperatorKickParamStruct[],
      salt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePubkeyRegistrationMessageHash(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    churnApprover(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createSlashableStakeQuorum(
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      minimumStake: BigNumberish,
      strategyParams: IStakeRegistryTypes.StrategyParamsStruct[],
      lookAheadPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createTotalDelegatedStakeQuorum(
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      minimumStake: BigNumberish,
      strategyParams: IStakeRegistryTypes.StrategyParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deregisterOperator(
      operator: string,
      avs: string,
      operatorSetIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ejectOperator(
      operator: string,
      quorumNumbers: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ejectionCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ejector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentQuorumBitmap(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorFromId(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorId(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorSetParams(
      quorumNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorStatus(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuorumBitmapAtBlockNumberByIndex(
      operatorId: BytesLike,
      blockNumber: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuorumBitmapHistoryLength(
      operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuorumBitmapIndicesAtBlockNumber(
      blockNumber: BigNumberish,
      operatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuorumBitmapUpdateByIndex(
      operatorId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      initialOwner: string,
      churnApprover: string,
      ejector: string,
      initialPausedStatus: BigNumberish,
      avs: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isChurnApproverSaltUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastEjectionTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauserRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pubkeyRegistrationMessageHash(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorumUpdateBlockNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerOperator(
      operator: string,
      avs: string,
      operatorSetIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAVS(
      _avs: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setChurnApprover(
      _churnApprover: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEjectionCooldown(
      _ejectionCooldown: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEjector(
      _ejector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOperatorSetParams(
      quorumNumber: BigNumberish,
      operatorSetParams: ISlashingRegistryCoordinatorTypes.OperatorSetParamStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    socketRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsAVS(
      _avs: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateOperators(
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      quorumNumbers: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSocket(
      socket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
