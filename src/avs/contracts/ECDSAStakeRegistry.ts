/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IECDSAStakeRegistryTypes {
  export type StrategyParamsStruct = {
    strategy: string;
    multiplier: BigNumberish;
  };

  export type StrategyParamsStructOutput = [string, BigNumber] & {
    strategy: string;
    multiplier: BigNumber;
  };

  export type QuorumStruct = {
    strategies: IECDSAStakeRegistryTypes.StrategyParamsStruct[];
  };

  export type QuorumStructOutput = [
    IECDSAStakeRegistryTypes.StrategyParamsStructOutput[]
  ] & { strategies: IECDSAStakeRegistryTypes.StrategyParamsStructOutput[] };
}

export declare namespace ISignatureUtilsMixinTypes {
  export type SignatureWithSaltAndExpiryStruct = {
    signature: BytesLike;
    salt: BytesLike;
    expiry: BigNumberish;
  };

  export type SignatureWithSaltAndExpiryStructOutput = [
    string,
    string,
    BigNumber
  ] & { signature: string; salt: string; expiry: BigNumber };
}

export interface ECDSAStakeRegistryInterface extends utils.Interface {
  functions: {
    "deregisterOperator()": FunctionFragment;
    "getLastCheckpointOperatorWeight(address)": FunctionFragment;
    "getLastCheckpointThresholdWeight()": FunctionFragment;
    "getLastCheckpointThresholdWeightAtBlock(uint32)": FunctionFragment;
    "getLastCheckpointTotalWeight()": FunctionFragment;
    "getLastCheckpointTotalWeightAtBlock(uint32)": FunctionFragment;
    "getLatestOperatorSigningKey(address)": FunctionFragment;
    "getOperatorSigningKeyAtBlock(address,uint256)": FunctionFragment;
    "getOperatorWeight(address)": FunctionFragment;
    "getOperatorWeightAtBlock(address,uint32)": FunctionFragment;
    "initialize(address,uint256,((address,uint96)[]))": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "minimumWeight()": FunctionFragment;
    "operatorRegistered(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "quorum()": FunctionFragment;
    "registerOperatorWithSignature((bytes,bytes32,uint256),address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMinimumWeight(uint256,address[])": FunctionFragment;
    "updateOperatorSigningKey(address)": FunctionFragment;
    "updateOperators(address[])": FunctionFragment;
    "updateOperatorsForQuorum(address[][],bytes)": FunctionFragment;
    "updateQuorumConfig(((address,uint96)[]),address[])": FunctionFragment;
    "updateStakeThreshold(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deregisterOperator"
      | "getLastCheckpointOperatorWeight"
      | "getLastCheckpointThresholdWeight"
      | "getLastCheckpointThresholdWeightAtBlock"
      | "getLastCheckpointTotalWeight"
      | "getLastCheckpointTotalWeightAtBlock"
      | "getLatestOperatorSigningKey"
      | "getOperatorSigningKeyAtBlock"
      | "getOperatorWeight"
      | "getOperatorWeightAtBlock"
      | "initialize"
      | "isValidSignature"
      | "minimumWeight"
      | "operatorRegistered"
      | "owner"
      | "quorum"
      | "registerOperatorWithSignature"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateMinimumWeight"
      | "updateOperatorSigningKey"
      | "updateOperators"
      | "updateOperatorsForQuorum"
      | "updateQuorumConfig"
      | "updateStakeThreshold"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deregisterOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCheckpointOperatorWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCheckpointThresholdWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCheckpointThresholdWeightAtBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCheckpointTotalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCheckpointTotalWeightAtBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestOperatorSigningKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorSigningKeyAtBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorWeightAtBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, IECDSAStakeRegistryTypes.QuorumStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorRegistered",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerOperatorWithSignature",
    values: [ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumWeight",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperatorSigningKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperators",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperatorsForQuorum",
    values: [string[][], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuorumConfig",
    values: [IECDSAStakeRegistryTypes.QuorumStruct, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakeThreshold",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCheckpointOperatorWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCheckpointThresholdWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCheckpointThresholdWeightAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCheckpointTotalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCheckpointTotalWeightAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestOperatorSigningKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorSigningKeyAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorWeightAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOperatorWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperatorSigningKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperatorsForQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuorumConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakeThreshold",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "MinimumWeightUpdated(uint256,uint256)": EventFragment;
    "OperatorDeregistered(address,address)": EventFragment;
    "OperatorRegistered(address,address)": EventFragment;
    "OperatorWeightUpdated(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "QuorumUpdated(((address,uint96)[]),((address,uint96)[]))": EventFragment;
    "SigningKeyUpdate(address,uint256,address,address)": EventFragment;
    "ThresholdWeightUpdated(uint256)": EventFragment;
    "TotalWeightUpdated(uint256,uint256)": EventFragment;
    "UpdateMinimumWeight(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumWeightUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorWeightUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SigningKeyUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdWeightUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalWeightUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinimumWeight"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MinimumWeightUpdatedEventObject {
  previous: BigNumber;
  current: BigNumber;
}
export type MinimumWeightUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinimumWeightUpdatedEventObject
>;

export type MinimumWeightUpdatedEventFilter =
  TypedEventFilter<MinimumWeightUpdatedEvent>;

export interface OperatorDeregisteredEventObject {
  operator: string;
  avs: string;
}
export type OperatorDeregisteredEvent = TypedEvent<
  [string, string],
  OperatorDeregisteredEventObject
>;

export type OperatorDeregisteredEventFilter =
  TypedEventFilter<OperatorDeregisteredEvent>;

export interface OperatorRegisteredEventObject {
  operator: string;
  avs: string;
}
export type OperatorRegisteredEvent = TypedEvent<
  [string, string],
  OperatorRegisteredEventObject
>;

export type OperatorRegisteredEventFilter =
  TypedEventFilter<OperatorRegisteredEvent>;

export interface OperatorWeightUpdatedEventObject {
  operator: string;
  oldWeight: BigNumber;
  newWeight: BigNumber;
}
export type OperatorWeightUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OperatorWeightUpdatedEventObject
>;

export type OperatorWeightUpdatedEventFilter =
  TypedEventFilter<OperatorWeightUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface QuorumUpdatedEventObject {
  previous: IECDSAStakeRegistryTypes.QuorumStructOutput;
  current: IECDSAStakeRegistryTypes.QuorumStructOutput;
}
export type QuorumUpdatedEvent = TypedEvent<
  [
    IECDSAStakeRegistryTypes.QuorumStructOutput,
    IECDSAStakeRegistryTypes.QuorumStructOutput
  ],
  QuorumUpdatedEventObject
>;

export type QuorumUpdatedEventFilter = TypedEventFilter<QuorumUpdatedEvent>;

export interface SigningKeyUpdateEventObject {
  operator: string;
  updateBlock: BigNumber;
  newSigningKey: string;
  oldSigningKey: string;
}
export type SigningKeyUpdateEvent = TypedEvent<
  [string, BigNumber, string, string],
  SigningKeyUpdateEventObject
>;

export type SigningKeyUpdateEventFilter =
  TypedEventFilter<SigningKeyUpdateEvent>;

export interface ThresholdWeightUpdatedEventObject {
  thresholdWeight: BigNumber;
}
export type ThresholdWeightUpdatedEvent = TypedEvent<
  [BigNumber],
  ThresholdWeightUpdatedEventObject
>;

export type ThresholdWeightUpdatedEventFilter =
  TypedEventFilter<ThresholdWeightUpdatedEvent>;

export interface TotalWeightUpdatedEventObject {
  oldTotalWeight: BigNumber;
  newTotalWeight: BigNumber;
}
export type TotalWeightUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TotalWeightUpdatedEventObject
>;

export type TotalWeightUpdatedEventFilter =
  TypedEventFilter<TotalWeightUpdatedEvent>;

export interface UpdateMinimumWeightEventObject {
  oldMinimumWeight: BigNumber;
  newMinimumWeight: BigNumber;
}
export type UpdateMinimumWeightEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateMinimumWeightEventObject
>;

export type UpdateMinimumWeightEventFilter =
  TypedEventFilter<UpdateMinimumWeightEvent>;

export interface ECDSAStakeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ECDSAStakeRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deregisterOperator(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getLastCheckpointOperatorWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastCheckpointThresholdWeight(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastCheckpointThresholdWeightAtBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastCheckpointTotalWeight(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastCheckpointTotalWeightAtBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLatestOperatorSigningKey(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOperatorSigningKeyAtBlock(
      operator: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOperatorWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOperatorWeightAtBlock(
      operator: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _serviceManager: string,
      thresholdWeight: BigNumberish,
      quorum: IECDSAStakeRegistryTypes.QuorumStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isValidSignature(
      digest: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    minimumWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorRegistered(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quorum(
      overrides?: CallOverrides
    ): Promise<[IECDSAStakeRegistryTypes.QuorumStructOutput]>;

    registerOperatorWithSignature(
      operatorSignature: ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct,
      signingKey: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMinimumWeight(
      newMinimumWeight: BigNumberish,
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateOperatorSigningKey(
      newSigningKey: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateOperators(
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateQuorumConfig(
      quorum: IECDSAStakeRegistryTypes.QuorumStruct,
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStakeThreshold(
      thresholdWeight: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  deregisterOperator(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getLastCheckpointOperatorWeight(
    operator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastCheckpointThresholdWeight(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastCheckpointThresholdWeightAtBlock(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastCheckpointTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  getLastCheckpointTotalWeightAtBlock(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLatestOperatorSigningKey(
    operator: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getOperatorSigningKeyAtBlock(
    operator: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOperatorWeight(
    operator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOperatorWeightAtBlock(
    operator: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _serviceManager: string,
    thresholdWeight: BigNumberish,
    quorum: IECDSAStakeRegistryTypes.QuorumStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isValidSignature(
    digest: BytesLike,
    _signatureData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  minimumWeight(overrides?: CallOverrides): Promise<BigNumber>;

  operatorRegistered(
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  quorum(
    overrides?: CallOverrides
  ): Promise<IECDSAStakeRegistryTypes.QuorumStructOutput>;

  registerOperatorWithSignature(
    operatorSignature: ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct,
    signingKey: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMinimumWeight(
    newMinimumWeight: BigNumberish,
    operators: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateOperatorSigningKey(
    newSigningKey: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateOperators(
    operators: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateOperatorsForQuorum(
    operatorsPerQuorum: string[][],
    arg1: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateQuorumConfig(
    quorum: IECDSAStakeRegistryTypes.QuorumStruct,
    operators: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStakeThreshold(
    thresholdWeight: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    deregisterOperator(overrides?: CallOverrides): Promise<void>;

    getLastCheckpointOperatorWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastCheckpointThresholdWeight(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastCheckpointThresholdWeightAtBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastCheckpointTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCheckpointTotalWeightAtBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestOperatorSigningKey(
      operator: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getOperatorSigningKeyAtBlock(
      operator: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOperatorWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorWeightAtBlock(
      operator: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _serviceManager: string,
      thresholdWeight: BigNumberish,
      quorum: IECDSAStakeRegistryTypes.QuorumStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isValidSignature(
      digest: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    minimumWeight(overrides?: CallOverrides): Promise<BigNumber>;

    operatorRegistered(
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    quorum(
      overrides?: CallOverrides
    ): Promise<IECDSAStakeRegistryTypes.QuorumStructOutput>;

    registerOperatorWithSignature(
      operatorSignature: ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct,
      signingKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinimumWeight(
      newMinimumWeight: BigNumberish,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperatorSigningKey(
      newSigningKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperators(
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateQuorumConfig(
      quorum: IECDSAStakeRegistryTypes.QuorumStruct,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateStakeThreshold(
      thresholdWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MinimumWeightUpdated(uint256,uint256)"(
      previous?: null,
      current?: null
    ): MinimumWeightUpdatedEventFilter;
    MinimumWeightUpdated(
      previous?: null,
      current?: null
    ): MinimumWeightUpdatedEventFilter;

    "OperatorDeregistered(address,address)"(
      operator?: string | null,
      avs?: string | null
    ): OperatorDeregisteredEventFilter;
    OperatorDeregistered(
      operator?: string | null,
      avs?: string | null
    ): OperatorDeregisteredEventFilter;

    "OperatorRegistered(address,address)"(
      operator?: string | null,
      avs?: string | null
    ): OperatorRegisteredEventFilter;
    OperatorRegistered(
      operator?: string | null,
      avs?: string | null
    ): OperatorRegisteredEventFilter;

    "OperatorWeightUpdated(address,uint256,uint256)"(
      operator?: string | null,
      oldWeight?: null,
      newWeight?: null
    ): OperatorWeightUpdatedEventFilter;
    OperatorWeightUpdated(
      operator?: string | null,
      oldWeight?: null,
      newWeight?: null
    ): OperatorWeightUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "QuorumUpdated(((address,uint96)[]),((address,uint96)[]))"(
      previous?: null,
      current?: null
    ): QuorumUpdatedEventFilter;
    QuorumUpdated(previous?: null, current?: null): QuorumUpdatedEventFilter;

    "SigningKeyUpdate(address,uint256,address,address)"(
      operator?: string | null,
      updateBlock?: BigNumberish | null,
      newSigningKey?: string | null,
      oldSigningKey?: null
    ): SigningKeyUpdateEventFilter;
    SigningKeyUpdate(
      operator?: string | null,
      updateBlock?: BigNumberish | null,
      newSigningKey?: string | null,
      oldSigningKey?: null
    ): SigningKeyUpdateEventFilter;

    "ThresholdWeightUpdated(uint256)"(
      thresholdWeight?: null
    ): ThresholdWeightUpdatedEventFilter;
    ThresholdWeightUpdated(
      thresholdWeight?: null
    ): ThresholdWeightUpdatedEventFilter;

    "TotalWeightUpdated(uint256,uint256)"(
      oldTotalWeight?: null,
      newTotalWeight?: null
    ): TotalWeightUpdatedEventFilter;
    TotalWeightUpdated(
      oldTotalWeight?: null,
      newTotalWeight?: null
    ): TotalWeightUpdatedEventFilter;

    "UpdateMinimumWeight(uint256,uint256)"(
      oldMinimumWeight?: null,
      newMinimumWeight?: null
    ): UpdateMinimumWeightEventFilter;
    UpdateMinimumWeight(
      oldMinimumWeight?: null,
      newMinimumWeight?: null
    ): UpdateMinimumWeightEventFilter;
  };

  estimateGas: {
    deregisterOperator(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getLastCheckpointOperatorWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastCheckpointThresholdWeight(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastCheckpointThresholdWeightAtBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastCheckpointTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCheckpointTotalWeightAtBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestOperatorSigningKey(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorSigningKeyAtBlock(
      operator: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorWeightAtBlock(
      operator: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _serviceManager: string,
      thresholdWeight: BigNumberish,
      quorum: IECDSAStakeRegistryTypes.QuorumStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isValidSignature(
      digest: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumWeight(overrides?: CallOverrides): Promise<BigNumber>;

    operatorRegistered(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperatorWithSignature(
      operatorSignature: ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct,
      signingKey: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMinimumWeight(
      newMinimumWeight: BigNumberish,
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateOperatorSigningKey(
      newSigningKey: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateOperators(
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateQuorumConfig(
      quorum: IECDSAStakeRegistryTypes.QuorumStruct,
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateStakeThreshold(
      thresholdWeight: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deregisterOperator(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getLastCheckpointOperatorWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastCheckpointThresholdWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastCheckpointThresholdWeightAtBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastCheckpointTotalWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastCheckpointTotalWeightAtBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestOperatorSigningKey(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorSigningKeyAtBlock(
      operator: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorWeightAtBlock(
      operator: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _serviceManager: string,
      thresholdWeight: BigNumberish,
      quorum: IECDSAStakeRegistryTypes.QuorumStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      digest: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorRegistered(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOperatorWithSignature(
      operatorSignature: ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiryStruct,
      signingKey: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMinimumWeight(
      newMinimumWeight: BigNumberish,
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateOperatorSigningKey(
      newSigningKey: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateOperators(
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateQuorumConfig(
      quorum: IECDSAStakeRegistryTypes.QuorumStruct,
      operators: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStakeThreshold(
      thresholdWeight: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
