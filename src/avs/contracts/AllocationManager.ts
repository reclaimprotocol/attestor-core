/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type OperatorSetStruct = { avs: string; id: BigNumberish };

export type OperatorSetStructOutput = [string, number] & {
  avs: string;
  id: number;
};

export declare namespace IAllocationManagerTypes {
  export type CreateSetParamsStruct = {
    operatorSetId: BigNumberish;
    strategies: string[];
  };

  export type CreateSetParamsStructOutput = [number, string[]] & {
    operatorSetId: number;
    strategies: string[];
  };

  export type DeregisterParamsStruct = {
    operator: string;
    avs: string;
    operatorSetIds: BigNumberish[];
  };

  export type DeregisterParamsStructOutput = [string, string, number[]] & {
    operator: string;
    avs: string;
    operatorSetIds: number[];
  };

  export type AllocationStruct = {
    currentMagnitude: BigNumberish;
    pendingDiff: BigNumberish;
    effectBlock: BigNumberish;
  };

  export type AllocationStructOutput = [BigNumber, BigNumber, number] & {
    currentMagnitude: BigNumber;
    pendingDiff: BigNumber;
    effectBlock: number;
  };

  export type AllocateParamsStruct = {
    operatorSet: OperatorSetStruct;
    strategies: string[];
    newMagnitudes: BigNumberish[];
  };

  export type AllocateParamsStructOutput = [
    OperatorSetStructOutput,
    string[],
    BigNumber[]
  ] & {
    operatorSet: OperatorSetStructOutput;
    strategies: string[];
    newMagnitudes: BigNumber[];
  };

  export type RegisterParamsStruct = {
    avs: string;
    operatorSetIds: BigNumberish[];
    data: BytesLike;
  };

  export type RegisterParamsStructOutput = [string, number[], string] & {
    avs: string;
    operatorSetIds: number[];
    data: string;
  };

  export type SlashingParamsStruct = {
    operator: string;
    operatorSetId: BigNumberish;
    strategies: string[];
    wadsToSlash: BigNumberish[];
    description: string;
  };

  export type SlashingParamsStructOutput = [
    string,
    number,
    string[],
    BigNumber[],
    string
  ] & {
    operator: string;
    operatorSetId: number;
    strategies: string[];
    wadsToSlash: BigNumber[];
    description: string;
  };
}

export interface AllocationManagerInterface extends utils.Interface {
  functions: {
    "ALLOCATION_CONFIGURATION_DELAY()": FunctionFragment;
    "DEALLOCATION_DELAY()": FunctionFragment;
    "addStrategiesToOperatorSet(address,uint32,address[])": FunctionFragment;
    "clearDeallocationQueue(address,address[],uint16[])": FunctionFragment;
    "createOperatorSets(address,(uint32,address[])[])": FunctionFragment;
    "delegation()": FunctionFragment;
    "deregisterFromOperatorSets((address,address,uint32[]))": FunctionFragment;
    "getAVSRegistrar(address)": FunctionFragment;
    "getAllocatableMagnitude(address,address)": FunctionFragment;
    "getAllocatedSets(address)": FunctionFragment;
    "getAllocatedStake((address,uint32),address[],address[])": FunctionFragment;
    "getAllocatedStrategies(address,(address,uint32))": FunctionFragment;
    "getAllocation(address,(address,uint32),address)": FunctionFragment;
    "getAllocationDelay(address)": FunctionFragment;
    "getAllocations(address[],(address,uint32),address)": FunctionFragment;
    "getEncumberedMagnitude(address,address)": FunctionFragment;
    "getMaxMagnitude(address,address)": FunctionFragment;
    "getMaxMagnitudes(address[],address)": FunctionFragment;
    "getMaxMagnitudes(address,address[])": FunctionFragment;
    "getMaxMagnitudesAtBlock(address,address[],uint32)": FunctionFragment;
    "getMemberCount((address,uint32))": FunctionFragment;
    "getMembers((address,uint32))": FunctionFragment;
    "getMinimumSlashableStake((address,uint32),address[],address[],uint32)": FunctionFragment;
    "getOperatorSetCount(address)": FunctionFragment;
    "getRegisteredSets(address)": FunctionFragment;
    "getStrategiesInOperatorSet((address,uint32))": FunctionFragment;
    "getStrategyAllocations(address,address)": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "isMemberOfOperatorSet(address,(address,uint32))": FunctionFragment;
    "isOperatorSet((address,uint32))": FunctionFragment;
    "isOperatorSlashable(address,(address,uint32))": FunctionFragment;
    "modifyAllocations(address,((address,uint32),address[],uint64[])[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "pauseAll()": FunctionFragment;
    "paused(uint8)": FunctionFragment;
    "paused()": FunctionFragment;
    "pauserRegistry()": FunctionFragment;
    "permissionController()": FunctionFragment;
    "registerForOperatorSets(address,(address,uint32[],bytes))": FunctionFragment;
    "removeStrategiesFromOperatorSet(address,uint32,address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAVSRegistrar(address,address)": FunctionFragment;
    "setAllocationDelay(address,uint32)": FunctionFragment;
    "slashOperator(address,(address,uint32,address[],uint256[],string))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause(uint256)": FunctionFragment;
    "updateAVSMetadataURI(address,string)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ALLOCATION_CONFIGURATION_DELAY"
      | "DEALLOCATION_DELAY"
      | "addStrategiesToOperatorSet"
      | "clearDeallocationQueue"
      | "createOperatorSets"
      | "delegation"
      | "deregisterFromOperatorSets"
      | "getAVSRegistrar"
      | "getAllocatableMagnitude"
      | "getAllocatedSets"
      | "getAllocatedStake"
      | "getAllocatedStrategies"
      | "getAllocation"
      | "getAllocationDelay"
      | "getAllocations"
      | "getEncumberedMagnitude"
      | "getMaxMagnitude"
      | "getMaxMagnitudes(address[],address)"
      | "getMaxMagnitudes(address,address[])"
      | "getMaxMagnitudesAtBlock"
      | "getMemberCount"
      | "getMembers"
      | "getMinimumSlashableStake"
      | "getOperatorSetCount"
      | "getRegisteredSets"
      | "getStrategiesInOperatorSet"
      | "getStrategyAllocations"
      | "initialize"
      | "isMemberOfOperatorSet"
      | "isOperatorSet"
      | "isOperatorSlashable"
      | "modifyAllocations"
      | "owner"
      | "pause"
      | "pauseAll"
      | "paused(uint8)"
      | "paused()"
      | "pauserRegistry"
      | "permissionController"
      | "registerForOperatorSets"
      | "removeStrategiesFromOperatorSet"
      | "renounceOwnership"
      | "setAVSRegistrar"
      | "setAllocationDelay"
      | "slashOperator"
      | "transferOwnership"
      | "unpause"
      | "updateAVSMetadataURI"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ALLOCATION_CONFIGURATION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEALLOCATION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStrategiesToOperatorSet",
    values: [string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clearDeallocationQueue",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createOperatorSets",
    values: [string, IAllocationManagerTypes.CreateSetParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "delegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterFromOperatorSets",
    values: [IAllocationManagerTypes.DeregisterParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAVSRegistrar",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocatableMagnitude",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocatedSets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocatedStake",
    values: [OperatorSetStruct, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocatedStrategies",
    values: [string, OperatorSetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [string, OperatorSetStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocationDelay",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocations",
    values: [string[], OperatorSetStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncumberedMagnitude",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMagnitude",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMagnitudes(address[],address)",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMagnitudes(address,address[])",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMagnitudesAtBlock",
    values: [string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberCount",
    values: [OperatorSetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembers",
    values: [OperatorSetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumSlashableStake",
    values: [OperatorSetStruct, string[], string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorSetCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredSets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategiesInOperatorSet",
    values: [OperatorSetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyAllocations",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMemberOfOperatorSet",
    values: [string, OperatorSetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorSet",
    values: [OperatorSetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorSlashable",
    values: [string, OperatorSetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyAllocations",
    values: [string, IAllocationManagerTypes.AllocateParamsStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pauseAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paused(uint8)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauserRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permissionController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerForOperatorSets",
    values: [string, IAllocationManagerTypes.RegisterParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategiesFromOperatorSet",
    values: [string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAVSRegistrar",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocationDelay",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashOperator",
    values: [string, IAllocationManagerTypes.SlashingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAVSMetadataURI",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ALLOCATION_CONFIGURATION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEALLOCATION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategiesToOperatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearDeallocationQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOperatorSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deregisterFromOperatorSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAVSRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocatableMagnitude",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocatedSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocatedStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocatedStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncumberedMagnitude",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMagnitude",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMagnitudes(address[],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMagnitudes(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMagnitudesAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMembers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumSlashableStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorSetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategiesInOperatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMemberOfOperatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorSlashable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paused(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerForOperatorSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategiesFromOperatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAVSRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAVSMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AVSMetadataURIUpdated(address,string)": EventFragment;
    "AVSRegistrarSet(address,address)": EventFragment;
    "AllocationDelaySet(address,uint32,uint32)": EventFragment;
    "AllocationUpdated(address,(address,uint32),address,uint64,uint32)": EventFragment;
    "EncumberedMagnitudeUpdated(address,address,uint64)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MaxMagnitudeUpdated(address,address,uint64)": EventFragment;
    "OperatorAddedToOperatorSet(address,(address,uint32))": EventFragment;
    "OperatorRemovedFromOperatorSet(address,(address,uint32))": EventFragment;
    "OperatorSetCreated((address,uint32))": EventFragment;
    "OperatorSlashed(address,(address,uint32),address[],uint256[],string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address,uint256)": EventFragment;
    "StrategyAddedToOperatorSet((address,uint32),address)": EventFragment;
    "StrategyRemovedFromOperatorSet((address,uint32),address)": EventFragment;
    "Unpaused(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AVSMetadataURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AVSRegistrarSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocationDelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EncumberedMagnitudeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxMagnitudeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorAddedToOperatorSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OperatorRemovedFromOperatorSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSetCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSlashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAddedToOperatorSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategyRemovedFromOperatorSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AVSMetadataURIUpdatedEventObject {
  avs: string;
  metadataURI: string;
}
export type AVSMetadataURIUpdatedEvent = TypedEvent<
  [string, string],
  AVSMetadataURIUpdatedEventObject
>;

export type AVSMetadataURIUpdatedEventFilter =
  TypedEventFilter<AVSMetadataURIUpdatedEvent>;

export interface AVSRegistrarSetEventObject {
  avs: string;
  registrar: string;
}
export type AVSRegistrarSetEvent = TypedEvent<
  [string, string],
  AVSRegistrarSetEventObject
>;

export type AVSRegistrarSetEventFilter = TypedEventFilter<AVSRegistrarSetEvent>;

export interface AllocationDelaySetEventObject {
  operator: string;
  delay: number;
  effectBlock: number;
}
export type AllocationDelaySetEvent = TypedEvent<
  [string, number, number],
  AllocationDelaySetEventObject
>;

export type AllocationDelaySetEventFilter =
  TypedEventFilter<AllocationDelaySetEvent>;

export interface AllocationUpdatedEventObject {
  operator: string;
  operatorSet: OperatorSetStructOutput;
  strategy: string;
  magnitude: BigNumber;
  effectBlock: number;
}
export type AllocationUpdatedEvent = TypedEvent<
  [string, OperatorSetStructOutput, string, BigNumber, number],
  AllocationUpdatedEventObject
>;

export type AllocationUpdatedEventFilter =
  TypedEventFilter<AllocationUpdatedEvent>;

export interface EncumberedMagnitudeUpdatedEventObject {
  operator: string;
  strategy: string;
  encumberedMagnitude: BigNumber;
}
export type EncumberedMagnitudeUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  EncumberedMagnitudeUpdatedEventObject
>;

export type EncumberedMagnitudeUpdatedEventFilter =
  TypedEventFilter<EncumberedMagnitudeUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MaxMagnitudeUpdatedEventObject {
  operator: string;
  strategy: string;
  maxMagnitude: BigNumber;
}
export type MaxMagnitudeUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  MaxMagnitudeUpdatedEventObject
>;

export type MaxMagnitudeUpdatedEventFilter =
  TypedEventFilter<MaxMagnitudeUpdatedEvent>;

export interface OperatorAddedToOperatorSetEventObject {
  operator: string;
  operatorSet: OperatorSetStructOutput;
}
export type OperatorAddedToOperatorSetEvent = TypedEvent<
  [string, OperatorSetStructOutput],
  OperatorAddedToOperatorSetEventObject
>;

export type OperatorAddedToOperatorSetEventFilter =
  TypedEventFilter<OperatorAddedToOperatorSetEvent>;

export interface OperatorRemovedFromOperatorSetEventObject {
  operator: string;
  operatorSet: OperatorSetStructOutput;
}
export type OperatorRemovedFromOperatorSetEvent = TypedEvent<
  [string, OperatorSetStructOutput],
  OperatorRemovedFromOperatorSetEventObject
>;

export type OperatorRemovedFromOperatorSetEventFilter =
  TypedEventFilter<OperatorRemovedFromOperatorSetEvent>;

export interface OperatorSetCreatedEventObject {
  operatorSet: OperatorSetStructOutput;
}
export type OperatorSetCreatedEvent = TypedEvent<
  [OperatorSetStructOutput],
  OperatorSetCreatedEventObject
>;

export type OperatorSetCreatedEventFilter =
  TypedEventFilter<OperatorSetCreatedEvent>;

export interface OperatorSlashedEventObject {
  operator: string;
  operatorSet: OperatorSetStructOutput;
  strategies: string[];
  wadSlashed: BigNumber[];
  description: string;
}
export type OperatorSlashedEvent = TypedEvent<
  [string, OperatorSetStructOutput, string[], BigNumber[], string],
  OperatorSlashedEventObject
>;

export type OperatorSlashedEventFilter = TypedEventFilter<OperatorSlashedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type PausedEvent = TypedEvent<[string, BigNumber], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface StrategyAddedToOperatorSetEventObject {
  operatorSet: OperatorSetStructOutput;
  strategy: string;
}
export type StrategyAddedToOperatorSetEvent = TypedEvent<
  [OperatorSetStructOutput, string],
  StrategyAddedToOperatorSetEventObject
>;

export type StrategyAddedToOperatorSetEventFilter =
  TypedEventFilter<StrategyAddedToOperatorSetEvent>;

export interface StrategyRemovedFromOperatorSetEventObject {
  operatorSet: OperatorSetStructOutput;
  strategy: string;
}
export type StrategyRemovedFromOperatorSetEvent = TypedEvent<
  [OperatorSetStructOutput, string],
  StrategyRemovedFromOperatorSetEventObject
>;

export type StrategyRemovedFromOperatorSetEventFilter =
  TypedEventFilter<StrategyRemovedFromOperatorSetEvent>;

export interface UnpausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type UnpausedEvent = TypedEvent<
  [string, BigNumber],
  UnpausedEventObject
>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AllocationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AllocationManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ALLOCATION_CONFIGURATION_DELAY(
      overrides?: CallOverrides
    ): Promise<[number]>;

    DEALLOCATION_DELAY(overrides?: CallOverrides): Promise<[number]>;

    addStrategiesToOperatorSet(
      avs: string,
      operatorSetId: BigNumberish,
      strategies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    clearDeallocationQueue(
      operator: string,
      strategies: string[],
      numToClear: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createOperatorSets(
      avs: string,
      params: IAllocationManagerTypes.CreateSetParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegation(overrides?: CallOverrides): Promise<[string]>;

    deregisterFromOperatorSets(
      params: IAllocationManagerTypes.DeregisterParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAVSRegistrar(avs: string, overrides?: CallOverrides): Promise<[string]>;

    getAllocatableMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllocatedSets(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[OperatorSetStructOutput[]]>;

    getAllocatedStake(
      operatorSet: OperatorSetStruct,
      operators: string[],
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[][]]>;

    getAllocatedStrategies(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAllocation(
      operator: string,
      operatorSet: OperatorSetStruct,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[IAllocationManagerTypes.AllocationStructOutput]>;

    getAllocationDelay(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    getAllocations(
      operators: string[],
      operatorSet: OperatorSetStruct,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[IAllocationManagerTypes.AllocationStructOutput[]]>;

    getEncumberedMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMaxMagnitudes(address[],address)"(
      operators: string[],
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getMaxMagnitudes(address,address[])"(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getMaxMagnitudesAtBlock(
      operator: string,
      strategies: string[],
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getMemberCount(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMembers(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getMinimumSlashableStake(
      operatorSet: OperatorSetStruct,
      operators: string[],
      strategies: string[],
      futureBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[][]] & { slashableStake: BigNumber[][] }>;

    getOperatorSetCount(
      avs: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRegisteredSets(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[OperatorSetStructOutput[]]>;

    getStrategiesInOperatorSet(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getStrategyAllocations(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<
      [
        OperatorSetStructOutput[],
        IAllocationManagerTypes.AllocationStructOutput[]
      ]
    >;

    initialize(
      initialOwner: string,
      initialPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isMemberOfOperatorSet(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperatorSet(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperatorSlashable(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    modifyAllocations(
      operator: string,
      params: IAllocationManagerTypes.AllocateParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pauserRegistry(overrides?: CallOverrides): Promise<[string]>;

    permissionController(overrides?: CallOverrides): Promise<[string]>;

    registerForOperatorSets(
      operator: string,
      params: IAllocationManagerTypes.RegisterParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeStrategiesFromOperatorSet(
      avs: string,
      operatorSetId: BigNumberish,
      strategies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAVSRegistrar(
      avs: string,
      registrar: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAllocationDelay(
      operator: string,
      delay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    slashOperator(
      avs: string,
      params: IAllocationManagerTypes.SlashingParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAVSMetadataURI(
      avs: string,
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  ALLOCATION_CONFIGURATION_DELAY(overrides?: CallOverrides): Promise<number>;

  DEALLOCATION_DELAY(overrides?: CallOverrides): Promise<number>;

  addStrategiesToOperatorSet(
    avs: string,
    operatorSetId: BigNumberish,
    strategies: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  clearDeallocationQueue(
    operator: string,
    strategies: string[],
    numToClear: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createOperatorSets(
    avs: string,
    params: IAllocationManagerTypes.CreateSetParamsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegation(overrides?: CallOverrides): Promise<string>;

  deregisterFromOperatorSets(
    params: IAllocationManagerTypes.DeregisterParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAVSRegistrar(avs: string, overrides?: CallOverrides): Promise<string>;

  getAllocatableMagnitude(
    operator: string,
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllocatedSets(
    operator: string,
    overrides?: CallOverrides
  ): Promise<OperatorSetStructOutput[]>;

  getAllocatedStake(
    operatorSet: OperatorSetStruct,
    operators: string[],
    strategies: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  getAllocatedStrategies(
    operator: string,
    operatorSet: OperatorSetStruct,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAllocation(
    operator: string,
    operatorSet: OperatorSetStruct,
    strategy: string,
    overrides?: CallOverrides
  ): Promise<IAllocationManagerTypes.AllocationStructOutput>;

  getAllocationDelay(
    operator: string,
    overrides?: CallOverrides
  ): Promise<[boolean, number]>;

  getAllocations(
    operators: string[],
    operatorSet: OperatorSetStruct,
    strategy: string,
    overrides?: CallOverrides
  ): Promise<IAllocationManagerTypes.AllocationStructOutput[]>;

  getEncumberedMagnitude(
    operator: string,
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxMagnitude(
    operator: string,
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMaxMagnitudes(address[],address)"(
    operators: string[],
    strategy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getMaxMagnitudes(address,address[])"(
    operator: string,
    strategies: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMaxMagnitudesAtBlock(
    operator: string,
    strategies: string[],
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMemberCount(
    operatorSet: OperatorSetStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMembers(
    operatorSet: OperatorSetStruct,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMinimumSlashableStake(
    operatorSet: OperatorSetStruct,
    operators: string[],
    strategies: string[],
    futureBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  getOperatorSetCount(
    avs: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegisteredSets(
    operator: string,
    overrides?: CallOverrides
  ): Promise<OperatorSetStructOutput[]>;

  getStrategiesInOperatorSet(
    operatorSet: OperatorSetStruct,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getStrategyAllocations(
    operator: string,
    strategy: string,
    overrides?: CallOverrides
  ): Promise<
    [
      OperatorSetStructOutput[],
      IAllocationManagerTypes.AllocationStructOutput[]
    ]
  >;

  initialize(
    initialOwner: string,
    initialPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isMemberOfOperatorSet(
    operator: string,
    operatorSet: OperatorSetStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorSet(
    operatorSet: OperatorSetStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorSlashable(
    operator: string,
    operatorSet: OperatorSetStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  modifyAllocations(
    operator: string,
    params: IAllocationManagerTypes.AllocateParamsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseAll(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "paused(uint8)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

  pauserRegistry(overrides?: CallOverrides): Promise<string>;

  permissionController(overrides?: CallOverrides): Promise<string>;

  registerForOperatorSets(
    operator: string,
    params: IAllocationManagerTypes.RegisterParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeStrategiesFromOperatorSet(
    avs: string,
    operatorSetId: BigNumberish,
    strategies: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAVSRegistrar(
    avs: string,
    registrar: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAllocationDelay(
    operator: string,
    delay: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  slashOperator(
    avs: string,
    params: IAllocationManagerTypes.SlashingParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAVSMetadataURI(
    avs: string,
    metadataURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ALLOCATION_CONFIGURATION_DELAY(overrides?: CallOverrides): Promise<number>;

    DEALLOCATION_DELAY(overrides?: CallOverrides): Promise<number>;

    addStrategiesToOperatorSet(
      avs: string,
      operatorSetId: BigNumberish,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    clearDeallocationQueue(
      operator: string,
      strategies: string[],
      numToClear: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createOperatorSets(
      avs: string,
      params: IAllocationManagerTypes.CreateSetParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    delegation(overrides?: CallOverrides): Promise<string>;

    deregisterFromOperatorSets(
      params: IAllocationManagerTypes.DeregisterParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAVSRegistrar(avs: string, overrides?: CallOverrides): Promise<string>;

    getAllocatableMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocatedSets(
      operator: string,
      overrides?: CallOverrides
    ): Promise<OperatorSetStructOutput[]>;

    getAllocatedStake(
      operatorSet: OperatorSetStruct,
      operators: string[],
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    getAllocatedStrategies(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAllocation(
      operator: string,
      operatorSet: OperatorSetStruct,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<IAllocationManagerTypes.AllocationStructOutput>;

    getAllocationDelay(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    getAllocations(
      operators: string[],
      operatorSet: OperatorSetStruct,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<IAllocationManagerTypes.AllocationStructOutput[]>;

    getEncumberedMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxMagnitudes(address[],address)"(
      operators: string[],
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getMaxMagnitudes(address,address[])"(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMaxMagnitudesAtBlock(
      operator: string,
      strategies: string[],
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMemberCount(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMembers(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMinimumSlashableStake(
      operatorSet: OperatorSetStruct,
      operators: string[],
      strategies: string[],
      futureBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    getOperatorSetCount(
      avs: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredSets(
      operator: string,
      overrides?: CallOverrides
    ): Promise<OperatorSetStructOutput[]>;

    getStrategiesInOperatorSet(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getStrategyAllocations(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<
      [
        OperatorSetStructOutput[],
        IAllocationManagerTypes.AllocationStructOutput[]
      ]
    >;

    initialize(
      initialOwner: string,
      initialPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isMemberOfOperatorSet(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorSet(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorSlashable(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    modifyAllocations(
      operator: string,
      params: IAllocationManagerTypes.AllocateParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseAll(overrides?: CallOverrides): Promise<void>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<string>;

    permissionController(overrides?: CallOverrides): Promise<string>;

    registerForOperatorSets(
      operator: string,
      params: IAllocationManagerTypes.RegisterParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeStrategiesFromOperatorSet(
      avs: string,
      operatorSetId: BigNumberish,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAVSRegistrar(
      avs: string,
      registrar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllocationDelay(
      operator: string,
      delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slashOperator(
      avs: string,
      params: IAllocationManagerTypes.SlashingParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAVSMetadataURI(
      avs: string,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AVSMetadataURIUpdated(address,string)"(
      avs?: string | null,
      metadataURI?: null
    ): AVSMetadataURIUpdatedEventFilter;
    AVSMetadataURIUpdated(
      avs?: string | null,
      metadataURI?: null
    ): AVSMetadataURIUpdatedEventFilter;

    "AVSRegistrarSet(address,address)"(
      avs?: null,
      registrar?: null
    ): AVSRegistrarSetEventFilter;
    AVSRegistrarSet(avs?: null, registrar?: null): AVSRegistrarSetEventFilter;

    "AllocationDelaySet(address,uint32,uint32)"(
      operator?: null,
      delay?: null,
      effectBlock?: null
    ): AllocationDelaySetEventFilter;
    AllocationDelaySet(
      operator?: null,
      delay?: null,
      effectBlock?: null
    ): AllocationDelaySetEventFilter;

    "AllocationUpdated(address,(address,uint32),address,uint64,uint32)"(
      operator?: null,
      operatorSet?: null,
      strategy?: null,
      magnitude?: null,
      effectBlock?: null
    ): AllocationUpdatedEventFilter;
    AllocationUpdated(
      operator?: null,
      operatorSet?: null,
      strategy?: null,
      magnitude?: null,
      effectBlock?: null
    ): AllocationUpdatedEventFilter;

    "EncumberedMagnitudeUpdated(address,address,uint64)"(
      operator?: null,
      strategy?: null,
      encumberedMagnitude?: null
    ): EncumberedMagnitudeUpdatedEventFilter;
    EncumberedMagnitudeUpdated(
      operator?: null,
      strategy?: null,
      encumberedMagnitude?: null
    ): EncumberedMagnitudeUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MaxMagnitudeUpdated(address,address,uint64)"(
      operator?: null,
      strategy?: null,
      maxMagnitude?: null
    ): MaxMagnitudeUpdatedEventFilter;
    MaxMagnitudeUpdated(
      operator?: null,
      strategy?: null,
      maxMagnitude?: null
    ): MaxMagnitudeUpdatedEventFilter;

    "OperatorAddedToOperatorSet(address,(address,uint32))"(
      operator?: string | null,
      operatorSet?: null
    ): OperatorAddedToOperatorSetEventFilter;
    OperatorAddedToOperatorSet(
      operator?: string | null,
      operatorSet?: null
    ): OperatorAddedToOperatorSetEventFilter;

    "OperatorRemovedFromOperatorSet(address,(address,uint32))"(
      operator?: string | null,
      operatorSet?: null
    ): OperatorRemovedFromOperatorSetEventFilter;
    OperatorRemovedFromOperatorSet(
      operator?: string | null,
      operatorSet?: null
    ): OperatorRemovedFromOperatorSetEventFilter;

    "OperatorSetCreated((address,uint32))"(
      operatorSet?: null
    ): OperatorSetCreatedEventFilter;
    OperatorSetCreated(operatorSet?: null): OperatorSetCreatedEventFilter;

    "OperatorSlashed(address,(address,uint32),address[],uint256[],string)"(
      operator?: null,
      operatorSet?: null,
      strategies?: null,
      wadSlashed?: null,
      description?: null
    ): OperatorSlashedEventFilter;
    OperatorSlashed(
      operator?: null,
      operatorSet?: null,
      strategies?: null,
      wadSlashed?: null,
      description?: null
    ): OperatorSlashedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): PausedEventFilter;
    Paused(account?: string | null, newPausedStatus?: null): PausedEventFilter;

    "StrategyAddedToOperatorSet((address,uint32),address)"(
      operatorSet?: null,
      strategy?: null
    ): StrategyAddedToOperatorSetEventFilter;
    StrategyAddedToOperatorSet(
      operatorSet?: null,
      strategy?: null
    ): StrategyAddedToOperatorSetEventFilter;

    "StrategyRemovedFromOperatorSet((address,uint32),address)"(
      operatorSet?: null,
      strategy?: null
    ): StrategyRemovedFromOperatorSetEventFilter;
    StrategyRemovedFromOperatorSet(
      operatorSet?: null,
      strategy?: null
    ): StrategyRemovedFromOperatorSetEventFilter;

    "Unpaused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
    Unpaused(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
  };

  estimateGas: {
    ALLOCATION_CONFIGURATION_DELAY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEALLOCATION_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategiesToOperatorSet(
      avs: string,
      operatorSetId: BigNumberish,
      strategies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    clearDeallocationQueue(
      operator: string,
      strategies: string[],
      numToClear: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createOperatorSets(
      avs: string,
      params: IAllocationManagerTypes.CreateSetParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegation(overrides?: CallOverrides): Promise<BigNumber>;

    deregisterFromOperatorSets(
      params: IAllocationManagerTypes.DeregisterParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAVSRegistrar(avs: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAllocatableMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocatedSets(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocatedStake(
      operatorSet: OperatorSetStruct,
      operators: string[],
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocatedStrategies(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocation(
      operator: string,
      operatorSet: OperatorSetStruct,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocationDelay(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocations(
      operators: string[],
      operatorSet: OperatorSetStruct,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEncumberedMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxMagnitudes(address[],address)"(
      operators: string[],
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxMagnitudes(address,address[])"(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxMagnitudesAtBlock(
      operator: string,
      strategies: string[],
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMemberCount(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMembers(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumSlashableStake(
      operatorSet: OperatorSetStruct,
      operators: string[],
      strategies: string[],
      futureBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorSetCount(
      avs: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredSets(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrategiesInOperatorSet(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrategyAllocations(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      initialOwner: string,
      initialPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isMemberOfOperatorSet(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorSet(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorSlashable(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyAllocations(
      operator: string,
      params: IAllocationManagerTypes.AllocateParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseAll(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    permissionController(overrides?: CallOverrides): Promise<BigNumber>;

    registerForOperatorSets(
      operator: string,
      params: IAllocationManagerTypes.RegisterParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeStrategiesFromOperatorSet(
      avs: string,
      operatorSetId: BigNumberish,
      strategies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAVSRegistrar(
      avs: string,
      registrar: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAllocationDelay(
      operator: string,
      delay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    slashOperator(
      avs: string,
      params: IAllocationManagerTypes.SlashingParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAVSMetadataURI(
      avs: string,
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ALLOCATION_CONFIGURATION_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEALLOCATION_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStrategiesToOperatorSet(
      avs: string,
      operatorSetId: BigNumberish,
      strategies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    clearDeallocationQueue(
      operator: string,
      strategies: string[],
      numToClear: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createOperatorSets(
      avs: string,
      params: IAllocationManagerTypes.CreateSetParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deregisterFromOperatorSets(
      params: IAllocationManagerTypes.DeregisterParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAVSRegistrar(
      avs: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocatableMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocatedSets(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocatedStake(
      operatorSet: OperatorSetStruct,
      operators: string[],
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocatedStrategies(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocation(
      operator: string,
      operatorSet: OperatorSetStruct,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocationDelay(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocations(
      operators: string[],
      operatorSet: OperatorSetStruct,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEncumberedMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxMagnitude(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxMagnitudes(address[],address)"(
      operators: string[],
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxMagnitudes(address,address[])"(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxMagnitudesAtBlock(
      operator: string,
      strategies: string[],
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMemberCount(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembers(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumSlashableStake(
      operatorSet: OperatorSetStruct,
      operators: string[],
      strategies: string[],
      futureBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorSetCount(
      avs: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredSets(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategiesInOperatorSet(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategyAllocations(
      operator: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      initialOwner: string,
      initialPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isMemberOfOperatorSet(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorSet(
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorSlashable(
      operator: string,
      operatorSet: OperatorSetStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyAllocations(
      operator: string,
      params: IAllocationManagerTypes.AllocateParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauserRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permissionController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerForOperatorSets(
      operator: string,
      params: IAllocationManagerTypes.RegisterParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeStrategiesFromOperatorSet(
      avs: string,
      operatorSetId: BigNumberish,
      strategies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAVSRegistrar(
      avs: string,
      registrar: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAllocationDelay(
      operator: string,
      delay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    slashOperator(
      avs: string,
      params: IAllocationManagerTypes.SlashingParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAVSMetadataURI(
      avs: string,
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
