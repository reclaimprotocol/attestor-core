/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SocketRegistryInterface extends utils.Interface {
  functions: {
    "getOperatorSocket(bytes32)": FunctionFragment;
    "operatorIdToSocket(bytes32)": FunctionFragment;
    "setOperatorSocket(bytes32,string)": FunctionFragment;
    "slashingRegistryCoordinator()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getOperatorSocket"
      | "operatorIdToSocket"
      | "setOperatorSocket"
      | "slashingRegistryCoordinator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getOperatorSocket",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorIdToSocket",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorSocket",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashingRegistryCoordinator",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getOperatorSocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorIdToSocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorSocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashingRegistryCoordinator",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SocketRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SocketRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOperatorSocket(
      _operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    operatorIdToSocket(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setOperatorSocket(
      _operatorId: BytesLike,
      _socket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    slashingRegistryCoordinator(overrides?: CallOverrides): Promise<[string]>;
  };

  getOperatorSocket(
    _operatorId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  operatorIdToSocket(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  setOperatorSocket(
    _operatorId: BytesLike,
    _socket: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  slashingRegistryCoordinator(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getOperatorSocket(
      _operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    operatorIdToSocket(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setOperatorSocket(
      _operatorId: BytesLike,
      _socket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    slashingRegistryCoordinator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getOperatorSocket(
      _operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorIdToSocket(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperatorSocket(
      _operatorId: BytesLike,
      _socket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    slashingRegistryCoordinator(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getOperatorSocket(
      _operatorId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorIdToSocket(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOperatorSocket(
      _operatorId: BytesLike,
      _socket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    slashingRegistryCoordinator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
