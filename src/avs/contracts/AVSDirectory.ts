/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ISignatureUtils {
  export type SignatureWithSaltAndExpiryStruct = {
    signature: BytesLike;
    salt: BytesLike;
    expiry: BigNumberish;
  };

  export type SignatureWithSaltAndExpiryStructOutput = [
    string,
    string,
    BigNumber
  ] & { signature: string; salt: string; expiry: BigNumber };
}

export interface AVSDirectoryInterface extends utils.Interface {
  functions: {
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "OPERATOR_AVS_REGISTRATION_TYPEHASH()": FunctionFragment;
    "avsOperatorStatus(address,address)": FunctionFragment;
    "calculateOperatorAVSRegistrationDigestHash(address,address,bytes32,uint256)": FunctionFragment;
    "cancelSalt(bytes32)": FunctionFragment;
    "delegation()": FunctionFragment;
    "deregisterOperatorFromAVS(address)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "initialize(address,address,uint256)": FunctionFragment;
    "operatorSaltIsSpent(address,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "pauseAll()": FunctionFragment;
    "paused(uint8)": FunctionFragment;
    "paused()": FunctionFragment;
    "pauserRegistry()": FunctionFragment;
    "registerOperatorToAVS(address,(bytes,bytes32,uint256))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPauserRegistry(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause(uint256)": FunctionFragment;
    "updateAVSMetadataURI(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_TYPEHASH"
      | "OPERATOR_AVS_REGISTRATION_TYPEHASH"
      | "avsOperatorStatus"
      | "calculateOperatorAVSRegistrationDigestHash"
      | "cancelSalt"
      | "delegation"
      | "deregisterOperatorFromAVS"
      | "domainSeparator"
      | "initialize"
      | "operatorSaltIsSpent"
      | "owner"
      | "pause"
      | "pauseAll"
      | "paused(uint8)"
      | "paused()"
      | "pauserRegistry"
      | "registerOperatorToAVS"
      | "renounceOwnership"
      | "setPauserRegistry"
      | "transferOwnership"
      | "unpause"
      | "updateAVSMetadataURI"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_AVS_REGISTRATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avsOperatorStatus",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOperatorAVSRegistrationDigestHash",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSalt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterOperatorFromAVS",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorSaltIsSpent",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pauseAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paused(uint8)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauserRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperatorToAVS",
    values: [string, ISignatureUtils.SignatureWithSaltAndExpiryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPauserRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAVSMetadataURI",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_AVS_REGISTRATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avsOperatorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOperatorAVSRegistrationDigestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelSalt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deregisterOperatorFromAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorSaltIsSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paused(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperatorToAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAVSMetadataURI",
    data: BytesLike
  ): Result;

  events: {
    "AVSMetadataURIUpdated(address,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OperatorAVSRegistrationStatusUpdated(address,address,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address,uint256)": EventFragment;
    "PauserRegistrySet(address,address)": EventFragment;
    "Unpaused(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AVSMetadataURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OperatorAVSRegistrationStatusUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AVSMetadataURIUpdatedEventObject {
  avs: string;
  metadataURI: string;
}
export type AVSMetadataURIUpdatedEvent = TypedEvent<
  [string, string],
  AVSMetadataURIUpdatedEventObject
>;

export type AVSMetadataURIUpdatedEventFilter =
  TypedEventFilter<AVSMetadataURIUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OperatorAVSRegistrationStatusUpdatedEventObject {
  operator: string;
  avs: string;
  status: number;
}
export type OperatorAVSRegistrationStatusUpdatedEvent = TypedEvent<
  [string, string, number],
  OperatorAVSRegistrationStatusUpdatedEventObject
>;

export type OperatorAVSRegistrationStatusUpdatedEventFilter =
  TypedEventFilter<OperatorAVSRegistrationStatusUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type PausedEvent = TypedEvent<[string, BigNumber], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PauserRegistrySetEventObject {
  pauserRegistry: string;
  newPauserRegistry: string;
}
export type PauserRegistrySetEvent = TypedEvent<
  [string, string],
  PauserRegistrySetEventObject
>;

export type PauserRegistrySetEventFilter =
  TypedEventFilter<PauserRegistrySetEvent>;

export interface UnpausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type UnpausedEvent = TypedEvent<
  [string, BigNumber],
  UnpausedEventObject
>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AVSDirectory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AVSDirectoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_AVS_REGISTRATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    avsOperatorStatus(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculateOperatorAVSRegistrationDigestHash(
      operator: string,
      avs: string,
      salt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    cancelSalt(
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegation(overrides?: CallOverrides): Promise<[string]>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      initialOwner: string,
      _pauserRegistry: string,
      initialPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    operatorSaltIsSpent(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pauserRegistry(overrides?: CallOverrides): Promise<[string]>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPauserRegistry(
      newPauserRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAVSMetadataURI(
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  OPERATOR_AVS_REGISTRATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  avsOperatorStatus(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateOperatorAVSRegistrationDigestHash(
    operator: string,
    avs: string,
    salt: BytesLike,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  cancelSalt(
    salt: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegation(overrides?: CallOverrides): Promise<string>;

  deregisterOperatorFromAVS(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  initialize(
    initialOwner: string,
    _pauserRegistry: string,
    initialPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  operatorSaltIsSpent(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseAll(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "paused(uint8)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

  pauserRegistry(overrides?: CallOverrides): Promise<string>;

  registerOperatorToAVS(
    operator: string,
    operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPauserRegistry(
    newPauserRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAVSMetadataURI(
    metadataURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    OPERATOR_AVS_REGISTRATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    avsOperatorStatus(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateOperatorAVSRegistrationDigestHash(
      operator: string,
      avs: string,
      salt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    cancelSalt(salt: BytesLike, overrides?: CallOverrides): Promise<void>;

    delegation(overrides?: CallOverrides): Promise<string>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    initialize(
      initialOwner: string,
      _pauserRegistry: string,
      initialPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorSaltIsSpent(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseAll(overrides?: CallOverrides): Promise<void>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<string>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPauserRegistry(
      newPauserRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAVSMetadataURI(
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AVSMetadataURIUpdated(address,string)"(
      avs?: string | null,
      metadataURI?: null
    ): AVSMetadataURIUpdatedEventFilter;
    AVSMetadataURIUpdated(
      avs?: string | null,
      metadataURI?: null
    ): AVSMetadataURIUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OperatorAVSRegistrationStatusUpdated(address,address,uint8)"(
      operator?: string | null,
      avs?: string | null,
      status?: null
    ): OperatorAVSRegistrationStatusUpdatedEventFilter;
    OperatorAVSRegistrationStatusUpdated(
      operator?: string | null,
      avs?: string | null,
      status?: null
    ): OperatorAVSRegistrationStatusUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): PausedEventFilter;
    Paused(account?: string | null, newPausedStatus?: null): PausedEventFilter;

    "PauserRegistrySet(address,address)"(
      pauserRegistry?: null,
      newPauserRegistry?: null
    ): PauserRegistrySetEventFilter;
    PauserRegistrySet(
      pauserRegistry?: null,
      newPauserRegistry?: null
    ): PauserRegistrySetEventFilter;

    "Unpaused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
    Unpaused(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
  };

  estimateGas: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_AVS_REGISTRATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avsOperatorStatus(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateOperatorAVSRegistrationDigestHash(
      operator: string,
      avs: string,
      salt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelSalt(
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegation(overrides?: CallOverrides): Promise<BigNumber>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initialOwner: string,
      _pauserRegistry: string,
      initialPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    operatorSaltIsSpent(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseAll(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPauserRegistry(
      newPauserRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAVSMetadataURI(
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_AVS_REGISTRATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avsOperatorStatus(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateOperatorAVSRegistrationDigestHash(
      operator: string,
      avs: string,
      salt: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelSalt(
      salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      initialOwner: string,
      _pauserRegistry: string,
      initialPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    operatorSaltIsSpent(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauserRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPauserRegistry(
      newPauserRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAVSMetadataURI(
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
