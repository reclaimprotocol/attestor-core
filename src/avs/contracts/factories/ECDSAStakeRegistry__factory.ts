/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ECDSAStakeRegistry,
  ECDSAStakeRegistryInterface,
} from "../ECDSAStakeRegistry";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_delegationManager",
        type: "address",
        internalType: "contract IDelegationManager",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deregisterOperator",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getLastCheckpointOperatorWeight",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointThresholdWeight",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointThresholdWeightAtBlock",
    inputs: [
      {
        name: "blockNumber",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointTotalWeight",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointTotalWeightAtBlock",
    inputs: [
      {
        name: "blockNumber",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLatestOperatorSigningKey",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOperatorSigningKeyAtBlock",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOperatorWeight",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOperatorWeightAtBlock",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "blockNumber",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_serviceManager",
        type: "address",
        internalType: "address",
      },
      {
        name: "thresholdWeight",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "quorum",
        type: "tuple",
        internalType: "struct IECDSAStakeRegistryTypes.Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct IECDSAStakeRegistryTypes.StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "isValidSignature",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_signatureData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "minimumWeight",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "operatorRegistered",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "quorum",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IECDSAStakeRegistryTypes.Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct IECDSAStakeRegistryTypes.StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "registerOperatorWithSignature",
    inputs: [
      {
        name: "operatorSignature",
        type: "tuple",
        internalType:
          "struct ISignatureUtilsMixinTypes.SignatureWithSaltAndExpiry",
        components: [
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "salt",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "expiry",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "signingKey",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateMinimumWeight",
    inputs: [
      {
        name: "newMinimumWeight",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "operators",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateOperatorSigningKey",
    inputs: [
      {
        name: "newSigningKey",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateOperators",
    inputs: [
      {
        name: "operators",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateOperatorsForQuorum",
    inputs: [
      {
        name: "operatorsPerQuorum",
        type: "address[][]",
        internalType: "address[][]",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateQuorumConfig",
    inputs: [
      {
        name: "quorum",
        type: "tuple",
        internalType: "struct IECDSAStakeRegistryTypes.Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct IECDSAStakeRegistryTypes.StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
      {
        name: "operators",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateStakeThreshold",
    inputs: [
      {
        name: "thresholdWeight",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "MinimumWeightUpdated",
    inputs: [
      {
        name: "previous",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "current",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorDeregistered",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "avs",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorRegistered",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "avs",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorWeightUpdated",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "oldWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "QuorumUpdated",
    inputs: [
      {
        name: "previous",
        type: "tuple",
        indexed: false,
        internalType: "struct IECDSAStakeRegistryTypes.Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct IECDSAStakeRegistryTypes.StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
      {
        name: "current",
        type: "tuple",
        indexed: false,
        internalType: "struct IECDSAStakeRegistryTypes.Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct IECDSAStakeRegistryTypes.StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SigningKeyUpdate",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "updateBlock",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "newSigningKey",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "oldSigningKey",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ThresholdWeightUpdated",
    inputs: [
      {
        name: "thresholdWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TotalWeightUpdated",
    inputs: [
      {
        name: "oldTotalWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newTotalWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "UpdateMinimumWeight",
    inputs: [
      {
        name: "oldMinimumWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newMinimumWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InsufficientSignedStake",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientWeight",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidLength",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidQuorum",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReferenceBlock",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSignature",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSignedWeight",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidThreshold",
    inputs: [],
  },
  {
    type: "error",
    name: "LengthMismatch",
    inputs: [],
  },
  {
    type: "error",
    name: "MustUpdateAllOperators",
    inputs: [],
  },
  {
    type: "error",
    name: "NotSorted",
    inputs: [],
  },
  {
    type: "error",
    name: "OperatorAlreadyRegistered",
    inputs: [],
  },
  {
    type: "error",
    name: "OperatorNotRegistered",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a080604052346100d957604051601f61297238819003918201601f19168301916001600160401b038311848410176100c55780849260209460405283398101031261007557516001600160a01b03811681036100715760805260405161284b908161012782396080518161165a0152f35b5f80fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b634e487b7160e01b5f52604160045260245ffd5b62461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fdfe608060405260043610611152575f3560e01c8062cf2ab51461019a5780630dba3394146101955780631626ba7e146101905780631703a0181461018b5780631e4cd85e14610186578063314f3a49146101815780633b242e4a1461017c5780633d5611f61461017757806340bf2fb7146101725780635140a5481461016d5780635e1042e8146101685780635ef5332914610163578063696255be1461015e578063715018a614610159578063743c31f414610154578063857dc1901461014f5780638da5cb5b1461014a578063955f2d901461014557806398ec1ac914610140578063a2ce5fd11461013b578063ab11899514610136578063b933fa7414610131578063dec5d1f61461012c578063ec7fbb31146101275763f2fde38b03611152576110c1565b611081565b61101d565b610fae565b610e9c565b610d91565b610d6a565b610d1c565b610cf4565b610bd5565b610b8a565b610b2f565b610aa4565b610a80565b610a3d565b610977565b61095a565b6108c6565b6107dc565b6107b1565b610784565b610738565b6105c1565b6104d1565b61047a565b60405162461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a20696e76616c6964207475706c65206f666673604482015261195d60f21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a1c9c985e481bd9999cd95d60aa1b6064820152608490fd5b634e487b7160e01b5f52604160045260245ffd5b602081019081106001600160401b0382111761031757604052565b6102e8565b606081019081106001600160401b0382111761031757604052565b604081019081106001600160401b0382111761031757604052565b90601f801991011681019081106001600160401b0382111761031757604052565b60405190610382604083610352565b565b6001600160401b0381116103175760051b60200190565b60405162461bcd60e51b815260206004820152602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a727261792073747269646560a81b6064820152608490fd5b6001600160a01b0381160361040557565b5f80fd5b9080601f8301121561047557813561042081610384565b9261042e6040519485610352565b81845260208085019260051b82010192831161047057602001905b8282106104565750505090565b602080918335610465816103f4565b815201910190610449565b61039b565b61028f565b346104be5760203660031901126104b9576004356001600160401b0381116104b4576104ad6104b2913690600401610409565b6117e4565b005b61023f565b6101ef565b61019f565b63ffffffff81160361040557565b346104be5760203660031901126104b95760206104fe63ffffffff6004356104f8816104c3565b16611841565b604051908152f35b60405162461bcd60e51b815260206004820152602760248201527f414249206465636f64696e673a20696e76616c69642062797465206172726179604482015266040d8cadccee8d60cb1b6064820152608490fd5b6001600160401b03811161031757601f01601f191660200190565b81601f820112156104755780359061058d8261055b565b9261059b6040519485610352565b828452602083830101116105bc57815f926020809301838601378301015290565b610506565b346104be5760403660031901126104b9576004356024356001600160401b0381116104b4576105f4903690600401610576565b908151820191606081602085019403126104b95760208101516001600160401b0381116104b457810183603f820112156104755760208101519061063782610384565b916106456040519384610352565b8083526020808085019260051b840101019186831161047057604001905b8282106106bb5750505060408201516001600160401b0381116104b45760606106976106a496602061069e948701016111b5565b930161126d565b92611ad6565b604051630b135d3f60e11b815280602081015b0390f35b6020809183516106ca816103f4565b815201910190610663565b5f9103126104b957565b602060408184019251938281528451809452019201905f5b8181106107045750505090565b825180516001600160a01b031685526020908101516001600160601b031681860152604090940193909201916001016106f7565b346104be575f3660031901126104b9576060604051610756816102fc565b526106b7604051610766816102fc565b61076e611278565b81526040519182916020835260208301906106df565b346104be5760203660031901126104b95760206104fe63ffffffff6004356107ab816104c3565b16611968565b346104be575f3660031901126104b95760206001600160e01b036107d3611bb9565b16604051908152f35b346104be5760203660031901126104b9576004356107f9816103f4565b6001600160a01b03165f908152606d602090815260409091206001600160e01b03906107d390611bfd565b60405162461bcd60e51b815260206004820152602360248201527f414249206465636f64696e673a20737472756374206461746120746f6f2073686044820152621bdc9d60ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f414249206465636f64696e673a20696e76616c696420737472756374206f66666044820152621cd95d60ea1b6064820152608490fd5b346104be5760403660031901126104b9576004356001600160401b0381116104b45760606003198236030112610955576040516109028161031c565b81600401356001600160401b038111610950576104b29261092b60449260043691840101610576565b835260248101356020840152013560408201526024359061094b826103f4565b6112ef565b610875565b610824565b346104be575f3660031901126104b9576020606754604051908152f35b346104be5760403660031901126104b9576004356001600160401b0381116104b457366023820112156104755780600401356109b281610384565b916109c06040519384610352565b8183526024602084019260051b820101903682116104705760248101925b828410610a0e57602435856001600160401b0382116104b457610a086104b2923690600401610576565b50611429565b83356001600160401b03811161047557602091610a32839260243691870101610409565b8152019301926109de565b346104be5760403660031901126104b9576020600435610a5c816103f4565b6001600160a01b039081165f908152606a8352604090206107d39060243590611a35565b346104be5760203660031901126104b9576104b2600435610a9f611c97565b611cef565b346104be5760403660031901126104b9576024356004356001600160401b0382116104b4577f713ca53b88d6eb63f5b1854cb8cbdd736ec51eda225e46791aa9298b0160648f610afb6104b2933690600401610409565b91610b04611c97565b60675481606755610b276040519283928360209093929193604081019481520152565b0390a16117e4565b346104be575f3660031901126104b957610b47611c97565b603380546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346104be5760203660031901126104b957600435610ba7816103f4565b335f52606e60205260ff60405f20541615610bc6576104b29033611de9565b6325ec6c1f60e01b5f5260045ffd5b346104be575f3660031901126104b957335f908152606e60205260409020610c0790610c03905b5460ff1690565b1590565b610bc657610c1e610c19606554611e7a565b606555565b335f908152606e60205260409020805460ff19169055610c45610c40336120be565b6121ef565b5050606854610c6a90610c5e906001600160a01b031681565b6001600160a01b031690565b803b15610cef576040516351b27a6d60e11b8152336004820152905f908290602490829084905af18015610cea57610cd0575b6068546001600160a01b0316337f31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed5805f80a3005b80610cde5f610ce493610352565b806106d5565b5f610c9d565b6115a5565b611488565b346104be575f3660031901126104b9576033546040516001600160a01b039091168152602090f35b346104be5760403660031901126104b95760206104fe600435610d3e816103f4565b60243590610d4b826104c3565b60018060a01b03165f52606d835263ffffffff60405f20911690611a35565b346104be5760203660031901126104b95760206104fe600435610d8c816103f4565b6115f2565b346104be5760203660031901126104b957600435610dae816103f4565b60018060a01b03165f52606a602052602060018060a01b036107d360405f20611bfd565b919060208382031261095557604051610dea816102fc565b80938035906001600160401b038211610950570182601f8201121561047557803590610e1582610384565b93610e236040519586610352565b82855260208086019360061b8301019181831161047057602001925b828410610e4d575050505052565b6040848303126109555760405190610e6482610337565b8435610e6f816103f4565b82526020850135906001600160601b03821682036104055782602092836040950152815201930192610e3f565b346104be5760603660031901126104b957600435610eb9816103f4565b6044356024356001600160401b0382116104b457610ede610f26923690600401610dd2565b905f5493610f0c610ef6610c038760ff9060081c1690565b80968197610fa0575b8115610f80575b50611766565b84610f1d600160ff195f5416175f55565b610f6957611ee6565b610f2c57005b610f3a61ff00195f54165f55565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b610f7b61010061ff00195f5416175f55565b611ee6565b303b15915081610f92575b505f610f06565b60ff1660011490505f610f8b565b600160ff8216109150610eff565b346104be575f3660031901126104b957606c5480610fdd575060205f5b6040516001600160e01b039091168152f35b805f1981011161101857606c5f527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0150154602090811c610fcb565b6115b0565b346104be5760403660031901126104b9576004356001600160401b0381116104b45761104d903690600401610dd2565b602435906001600160401b0382116104b4576104ad6110736104b2933690600401610409565b9161107c611c97565b611fc7565b346104be5760203660031901126104b95760043561109e816103f4565b60018060a01b03165f52606e602052602060ff60405f2054166040519015158152f35b346104be5760203660031901126104b9576004356110de816103f4565b6110e6611c97565b6001600160a01b038116156110fe576104b290611da1565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152603560248201527f436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b206044820152746e6f7220726563656976652066756e6374696f6e7360581b6064820152608490fd5b9080601f83011215610475578151916111cd83610384565b926111db6040519485610352565b80845260208085019160051b830101918383116104705760208101915b83831061120757505050505090565b82516001600160401b03811161047557820185603f82011215610475576020810151916112338361055b565b6112406040519182610352565b83815260408385010188106105bc575f602085819660408397018386015e830101528152019201916111f8565b5190610382826104c3565b6066549061128582610384565b916112936040519384610352565b80835260665f9081525f5160206127f65f395f51905f52602085015b8383106112bc5750505050565b6001602081926040516112ce81610337565b8554848060a01b038116825260a01c838201528152019201920191906112af565b335f908152606e6020526040902090919061130990610bfc565b6113ed576113529061131f610c19606554611c27565b335f908152606e6020526040902061133e90805460ff19166001179055565b61134a610c40336120be565b505033611de9565b60685461136990610c5e906001600160a01b031681565b803b15610cef57604051639926ee7d60e01b8152915f918391829084908290611396903360048401611c59565b03925af18015610cea576113d9575b506068546001600160a01b0316337fa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c15f80a3565b80610cde5f6113e793610352565b5f6113a5565b6342ee68b560e01b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b80518210156114245760209160051b010190565b6113fc565b805115611424576020015180516065540361144757610382906117e4565b63169efb5b60e11b5f5260045ffd5b9061146082610384565b61146d6040519182610352565b828152809261147e601f1991610384565b0190602036910137565b60405162461bcd60e51b815260206004820152602560248201527f54617267657420636f6e747261637420646f6573206e6f7420636f6e7461696e60448201526420636f646560d81b6064820152608490fd5b6020818303126104b9578051906001600160401b0382116104b457019080601f8301121561047557815161150e81610384565b9261151c6040519485610352565b81845260208085019260051b82010192831161047057602001905b8282106115445750505090565b8151815260209182019101611537565b6060602091604081019360018060a01b031681526040838201528451809452019201905f5b8181106115865750505090565b82516001600160a01b0316845260209384019390920191600101611579565b6040513d5f823e3d90fd5b634e487b7160e01b5f52601160045260245ffd5b8181029291811591840414171561101857565b906001820180921161101857565b9190820180921161101857565b6115fa611278565b915f906116078451611456565b915f5b8551811015611653578061164d6116346116266001948a611410565b51516001600160a01b031690565b61163e8388611410565b6001600160a01b039091169052565b0161160a565b50909290917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190823b15610cef57604051639004134760e01b8152925f928492839182916116ae9160048401611554565b03915afa908115610cea575f91611744575b505f915b84518310156117225761171a6001916117146116e08686611410565b5161170e61170260206116f38a8d611410565b5101516001600160601b031690565b6001600160601b031690565b906115c4565b906115e5565b9201916116c4565b915050611733919250612710900490565b606754811061173f5790565b505f90565b61176091503d805f833e6117588183610352565b8101906114db565b5f6116c0565b1561176d57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b9190915f838201938412911290801582169115161761101857565b905f805b83518210156118225760019061181a906118146001600160a01b0361180d8689611410565b51166120be565b906117c9565b9101906117e8565b905061182f9192506121ef565b5050565b5f1981019190821161101857565b438110156119245761185290612274565b606b549063ffffffff165f5b8281106118bf5750508061187b57505f5b6001600160e01b031690565b6118b361188a6118ba92611833565b606b5f527fbd43cb8ece8cd1863bcd6082d65c5b0d25665b1ce17980f0da43c0ed545f98b40190565b5460201c90565b61186f565b90918082169080831860011c820180921161101857606b5f527fbd43cb8ece8cd1863bcd6082d65c5b0d25665b1ce17980f0da43c0ed545f98b482015463ffffffff168410156119125750915b9061185e565b92915061191e906115d7565b9061190c565b606460405162461bcd60e51b815260206004820152602060248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152fd5b438110156119245761197990612274565b606c549063ffffffff165f5b8281106119d05750508061199857505f90565b6118b36119a76118ba92611833565b606c5f527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0160190565b90918082169080831860011c820180921161101857606c5f527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe01682015463ffffffff16841015611a235750915b90611985565b929150611a2f906115d7565b90611a1d565b904381101561192457611a4790612274565b81549063ffffffff165f5b828110611a8257505080611a6757505f919050565b6118ba91611a776118b392611833565b905f5260205f200190565b90918082169080831860011c820180921161101857845f528363ffffffff611ab48460205f200163ffffffff90541690565b161115611ac45750915b90611a52565b929150611ad0906115d7565b90611abe565b939291938151905f955f9381518403611baa578315611b9b579291905f935b838510611b0c575050505050610382929350612460565b909192939460018060a01b03611b228784611410565b51169863ffffffff88169143831015611b8c57611b77611b8192611b658d600196815f52606a602052611b5e888060a01b039160405f20611a35565b16926122dc565b87611b708b89611410565b5191612300565b611714898c612435565b950193929190611af5565b63e64f180f60e01b5f5260045ffd5b63251f56a160e21b5f5260045ffd5b631fec674760e31b5f5260045ffd5b606b5480611bc657505f90565b805f1981011161101857606b5f527fbd43cb8ece8cd1863bcd6082d65c5b0d25665b1ce17980f0da43c0ed545f98b3015460201c90565b80549081611c0b5750505f90565b815f19810111611018575f525f199060205f2001015460201c90565b5f1981146110185760010190565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9060018060a01b031681526040602082015260806040611c84845160608386015260a0850190611c35565b9360208101516060850152015191015290565b6033546001600160a01b03163303611cab57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b611cf843612274565b6001600160e01b038211611d4c577f9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b91602091611d41906001600160e01b03831690606c612620565b5050604051908152a1565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608490fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b6001600160a01b039081165f818152606a6020526040902090929190611e0e90611bfd565b6001600160a01b0390921692911690828214611e7557805f52606a602052611e398360405f206124d1565b50506040516001600160a01b03909216825243917fd061168252f441733658f09e4d8f5b2d998ed4ef24a2bbfd6ceca52ea131500290602090a4565b505050565b8015611018575f190190565b15611e8d57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b611f1f929161107c91611eff60ff5f5460081c16611e86565b60018060a01b03166001600160601b0360a01b6068541617606855611cef565b611f3860ff5f5460081c16611f3381611e86565b611e86565b61038233611da1565b606654600160401b81101561031757600181016066556066548110156114245760665f5281516020929092015160a01b6001600160a01b0319166001600160a01b0392909216919091175f5160206127f65f395f51905f5290910155565b9091611fb6611fc4936040845260408401906106df565b9160208184039101526106df565b90565b611fd0816124fb565b156120975760405191611fe2836102fc565b611fea611278565b83526066545f6066558061205d575b505f5b82518051821015612023579061201d61201782600194611410565b51611f41565b01611ffc565b505091907f23aad4e61744ece164130aa415c1616e80136b0f0770e56589438b90b269265e9161205860405192839283611f9f565b0390a1565b60665f525f5160206127f65f395f51905f52015f5160206127f65f395f51905f525b81811061208c5750611ff9565b5f815560010161207f565b63d173577960e01b5f5260045ffd5b81810392915f13801582851316918412161761101857565b6001600160a01b0381165f818152606d6020526040812090929083906120e390611bfd565b60018060e01b0316938461211260ff61210c8660018060a01b03165f52606e60205260405f2090565b54161590565b1561218757612120916120a6565b9384156121805761216a6121657f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe5949460018060a01b03165f52606d60205260405f2090565b6124ac565b50505b604080519182526020820192909252a290565b5050505090565b505050612193816115f2565b61219d84826120a6565b938415612180576121e8826121e37f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe5949560018060a01b03165f52606d60205260405f2090565b6124d1565b505061216d565b9061220b6001600160e01b03612203611bb9565b1692836117c9565b9061221543612274565b6001600160e01b038311611d4c57612239906001600160e01b03841690606b612620565b505060408051848152602081018490527f86dcf86b12dfeedea74ae9300dbdaa193bcce5809369c8177ea2f4eaaa65729b9181908101612058565b63ffffffff81116122885763ffffffff1690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608490fd5b6001600160a01b03918216911610156122f157565b63ba50f91160e01b5f5260045ffd5b91909161230d8284612736565b9390926005851015612421576123369415938461240b575b50831561234b575b50505015151590565b61233c57565b638baa579f60e01b5f5260045ffd5b5f9350906123836123918594936040519283916020830195630b135d3f60e11b87526024840152604060448401526064830190611c35565b03601f198101835282610352565b51915afa3d15612404573d6123a58161055b565b906123b36040519283610352565b81523d5f602083013e5b816123f6575b816123d2575b505f808061232d565b90506123ef630b135d3f60e11b916020808251830101910161276b565b145f6123c9565b9050602081511015906123c3565b60606123bd565b6001600160a01b0384811691161493505f612325565b634e487b7160e01b5f52602160045260245ffd5b9063ffffffff1643811015611b8c57611fc49160018060a01b03165f52606d60205260405f20611a35565b9063ffffffff1643811015611b8c5761247881611841565b821161249d5761248790611968565b1161248e57565b63e121632f60e01b5f5260045ffd5b634b05a0f760e11b5f5260045ffd5b5f6124c0916124ba43612274565b90612620565b6001600160e01b0391821692911690565b6124da43612274565b6001600160e01b038311611d4c576124c0926001600160e01b031691612620565b515f919082805b82518210156125515761251b610c5e6116268486611410565b906001600160a01b03808316911610156122f1576125486001919561171461170260206116f38789611410565b91019093612502565b5050509061271014155f14612564575f90565b600190565b805490600160401b8210156103175760018201808255821015611424575f9081526020902001815160209283015190921b63ffffffff191663ffffffff92909216919091179055565b906040516125bf81610337565b602081935463ffffffff81168352811c910152565b156125db57565b60405162461bcd60e51b815260206004820152601b60248201527f436865636b706f696e743a2064656372656173696e67206b65797300000000006044820152606490fd5b909291928382548015155f1461270c579260209291846126586126536126486126d298611833565b855f5260205f200190565b6125b2565b9363ffffffff61267d61266f875163ffffffff1690565b8284169283911611156125d4565b61269761268e875163ffffffff1690565b63ffffffff1690565b036126d657506126c492611a776126ad92611833565b9063ffffffff82549181199060201b169116179055565b01516001600160e01b031690565b9190565b915050612707916126f46126e8610373565b63ffffffff9093168352565b6001600160e01b03881682860152612569565b6126c4565b50506127319161271d6126e8610373565b6001600160e01b0385166020830152612569565b5f9190565b9060418151145f146127625761275e91602082015190606060408401519301515f1a9061277a565b9091565b50505f90600290565b908160209103126104b9575190565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084116127ea576020935f9360ff60809460405194855216868401526040830152606082015282805260015afa15610cea575f516001600160a01b038116156127e257905f90565b505f90600190565b505050505f9060039056fe46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354a264697066735822122065228802ecf42e415d7efdffc5621990f8f9b914239e66be849ad464a8dd1c2164736f6c634300081c0033";

type ECDSAStakeRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECDSAStakeRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ECDSAStakeRegistry__factory extends ContractFactory {
  constructor(...args: ECDSAStakeRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _delegationManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ECDSAStakeRegistry> {
    return super.deploy(
      _delegationManager,
      overrides || {}
    ) as Promise<ECDSAStakeRegistry>;
  }
  override getDeployTransaction(
    _delegationManager: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_delegationManager, overrides || {});
  }
  override attach(address: string): ECDSAStakeRegistry {
    return super.attach(address) as ECDSAStakeRegistry;
  }
  override connect(signer: Signer): ECDSAStakeRegistry__factory {
    return super.connect(signer) as ECDSAStakeRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECDSAStakeRegistryInterface {
    return new utils.Interface(_abi) as ECDSAStakeRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ECDSAStakeRegistry {
    return new Contract(address, _abi, signerOrProvider) as ECDSAStakeRegistry;
  }
}
