/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20Mock, ERC20MockInterface } from "../ERC20Mock";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "allowance",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "decreaseAllowance",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "subtractedValue",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "increaseAllowance",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "addedValue",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "mint",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transfer",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x608080604052346102d957610012610326565b61001a610326565b81516001600160401b0381116101e457600354600181811c911680156102cf575b60208210146101c457601f811161026a575b50602092601f821160011461020557928192936000926101fa575b50508160011b916000199060031b1c1916176003555b80516001600160401b0381116101e457600454600181811c911680156101da575b60208210146101c457601f811161015f575b50602091601f82116001146100fb579181926000926100f0575b50508160011b916000199060031b1c1916176004555b604051610a94908161034a8239f35b0151905082806100cb565b601f198216926004600052806000209160005b8581106101475750836001951061012e575b505050811b016004556100e1565b015160001960f88460031b161c19169055828080610120565b9192602060018192868501518155019401920161010e565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106101ba575b601f0160051c01905b8181106101ae57506100b1565b600081556001016101a1565b9091508190610198565b634e487b7160e01b600052602260045260246000fd5b90607f169061009f565b634e487b7160e01b600052604160045260246000fd5b015190508380610068565b601f198216936003600052806000209160005b8681106102525750836001959610610239575b505050811b0160035561007e565b015160001960f88460031b161c1916905583808061022b565b91926020600181928685015181550194019201610218565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106102c5575b601f0160051c01905b8181106102b9575061004d565b600081556001016102ac565b90915081906102a3565b90607f169061003b565b62461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fd5b60405190602082016001600160401b038111838210176101e4576040526000825256fe60806040526004361015610071575b60405162461bcd60e51b815260206004820152603560248201527f436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b206044820152746e6f7220726563656976652066756e6374696f6e7360581b6064820152608490fd5b60003560e01c806306fdde03146105bd578063095ea7b31461059757806318160ddd1461057957806323b872dd146104bb578063313ce5671461049f578063395093511461044d57806340c10f191461038857806370a082311461034e57806395d89b411461022d578063a457c2d714610186578063a9059cbb146101555763dd62ed3e0361000e573461015057604036600319011261014b5761011361077c565b61011b610797565b6001600160a01b039182166000908152600160209081526040808320949093168252928352819020549051908152f35b6106e3565b610693565b3461015057604036600319011261014b5761017b61017161077c565b60243590336108d8565b602060405160018152f35b3461015057604036600319011261014b5761019f61077c565b60243590336000526001602052604060002060018060a01b038216600052602052604060002054918083106101da5761017b920390336107d0565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461015057600036600319011261014b5760405160006004548060011c90600181168015610344575b6020831081146103305782855290811561031457506001146102bd575b50819003601f01601f191681019067ffffffffffffffff8211818310176102a7576102a382918260405282610733565b0390f35b634e487b7160e01b600052604160045260246000fd5b905060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b6000905b8282106102fe57506020915082010182610273565b60018160209254838588010152019101906102e9565b90506020925060ff191682840152151560051b82010182610273565b634e487b7160e01b84526022600452602484fd5b91607f1691610256565b3461015057602036600319011261014b576001600160a01b0361036f61077c565b1660005260006020526020604060002054604051908152f35b3461015057604036600319011261014b576103a161077c565b6001600160a01b03166024358115610408577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020826103e56000946002546107ad565b600255848452838252604084206103fd8282546107ad565b9055604051908152a3005b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b3461015057604036600319011261014b5761017b61046961077c565b336000526001602052604060002060018060a01b038216600052602052610498604060002060243590546107ad565b90336107d0565b3461015057600036600319011261014b57602060405160128152f35b3461015057606036600319011261014b576104d461077c565b6104dc610797565b6001600160a01b0382166000908152600160208181526040808420338552909152909120549260443592918401610518575b61017b93506108d8565b8284106105345761052f8361017b950333836107d0565b61050e565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b3461015057600036600319011261014b576020600254604051908152f35b3461015057604036600319011261014b5761017b6105b361077c565b60243590336107d0565b3461069357600036600319011261014b5760405160006003548060011c90600181168015610689575b6020831081146103305782855290811561031457506001146106325750819003601f01601f191681019067ffffffffffffffff8211818310176102a7576102a382918260405282610733565b905060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6000905b82821061067357506020915082010182610273565b600181602092548385880101520191019061065e565b91607f16916105e6565b60405162461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b91909160208152825180602083015260005b818110610766575060409293506000838284010152601f8019910116010190565b8060208092870101516040828601015201610745565b600435906001600160a01b038216820361079257565b600080fd5b602435906001600160a01b038216820361079257565b919082018092116107ba57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0316908115610887576001600160a01b03169182156108375760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6001600160a01b0316908115610a0b576001600160a01b03169182156109ba5781600052600060205260406000205481811061096657817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928560005260008452036040600020558460005260008252604060002061095b8282546107ad565b9055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fdfea26469706673582212204b9dc8c4844f3c63f80dcf12a7c641db17d55b4acf9e114aa986fc5b893460ee64736f6c634300081a0033";

type ERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Mock__factory extends ContractFactory {
  constructor(...args: ERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ERC20Mock> {
    return super.deploy(overrides || {}) as Promise<ERC20Mock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20Mock {
    return super.attach(address) as ERC20Mock;
  }
  override connect(signer: Signer): ERC20Mock__factory {
    return super.connect(signer) as ERC20Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new utils.Interface(_abi) as ERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mock;
  }
}
