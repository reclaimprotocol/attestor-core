/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ECDSAStakeRegistry,
  ECDSAStakeRegistryInterface,
} from "../ECDSAStakeRegistry";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_delegationManager",
        type: "address",
        internalType: "contract IDelegationManager",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deregisterOperator",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getLastCheckpointOperatorWeight",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointThresholdWeight",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointThresholdWeightAtBlock",
    inputs: [
      {
        name: "_blockNumber",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointTotalWeight",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastCheckpointTotalWeightAtBlock",
    inputs: [
      {
        name: "_blockNumber",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getLastestOperatorSigningKey",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOperatorSigningKeyAtBlock",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "_blockNumber",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOperatorWeight",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOperatorWeightAtBlock",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "_blockNumber",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_serviceManager",
        type: "address",
        internalType: "address",
      },
      {
        name: "_thresholdWeight",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_quorum",
        type: "tuple",
        internalType: "struct Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "isValidSignature",
    inputs: [
      {
        name: "_dataHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_signatureData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "minimumWeight",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "operatorRegistered",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "quorum",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "registerOperatorWithSignature",
    inputs: [
      {
        name: "_operatorSignature",
        type: "tuple",
        internalType: "struct ISignatureUtils.SignatureWithSaltAndExpiry",
        components: [
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "salt",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "expiry",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "_signingKey",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateMinimumWeight",
    inputs: [
      {
        name: "_newMinimumWeight",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_operators",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateOperatorSigningKey",
    inputs: [
      {
        name: "_newSigningKey",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateOperators",
    inputs: [
      {
        name: "_operators",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateOperatorsForQuorum",
    inputs: [
      {
        name: "operatorsPerQuorum",
        type: "address[][]",
        internalType: "address[][]",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateQuorumConfig",
    inputs: [
      {
        name: "_quorum",
        type: "tuple",
        internalType: "struct Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
      {
        name: "_operators",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateStakeThreshold",
    inputs: [
      {
        name: "_thresholdWeight",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "MinimumWeightUpdated",
    inputs: [
      {
        name: "_old",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "_new",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorDeregistered",
    inputs: [
      {
        name: "_operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "_avs",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorRegistered",
    inputs: [
      {
        name: "_operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "_avs",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OperatorWeightUpdated",
    inputs: [
      {
        name: "_operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "oldWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "QuorumUpdated",
    inputs: [
      {
        name: "_old",
        type: "tuple",
        indexed: false,
        internalType: "struct Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
      {
        name: "_new",
        type: "tuple",
        indexed: false,
        internalType: "struct Quorum",
        components: [
          {
            name: "strategies",
            type: "tuple[]",
            internalType: "struct StrategyParams[]",
            components: [
              {
                name: "strategy",
                type: "address",
                internalType: "contract IStrategy",
              },
              {
                name: "multiplier",
                type: "uint96",
                internalType: "uint96",
              },
            ],
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SigningKeyUpdate",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "updateBlock",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "newSigningKey",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "oldSigningKey",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ThresholdWeightUpdated",
    inputs: [
      {
        name: "_thresholdWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TotalWeightUpdated",
    inputs: [
      {
        name: "oldTotalWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newTotalWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "UpdateMinimumWeight",
    inputs: [
      {
        name: "oldMinimumWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "newMinimumWeight",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InsufficientSignedStake",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientWeight",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidLength",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidQuorum",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReferenceBlock",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSignature",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSignedWeight",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidThreshold",
    inputs: [],
  },
  {
    type: "error",
    name: "LengthMismatch",
    inputs: [],
  },
  {
    type: "error",
    name: "MustUpdateAllOperators",
    inputs: [],
  },
  {
    type: "error",
    name: "NotSorted",
    inputs: [],
  },
  {
    type: "error",
    name: "OperatorAlreadyRegistered",
    inputs: [],
  },
  {
    type: "error",
    name: "OperatorNotRegistered",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a080604052346100dc57604051601f61297e38819003918201601f19168301916001600160401b038311848410176100c65780849260209460405283398101031261007657516001600160a01b038116810361007157608052604051612854908161012a8239608051816116e40152f35b600080fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b634e487b7160e01b600052604160045260246000fd5b62461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fdfe60806040526004361015610071575b60405162461bcd60e51b815260206004820152603560248201527f436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b206044820152746e6f7220726563656976652066756e6374696f6e7360581b6064820152608490fd5b6000803560e01c8062cf2ab514610fb45780630dba339414610f8b5780631626ba7e14610c4e5780631703a01814610bfe5780631e4cd85e14610bd5578063314f3a4914610bbb5780633b242e4a14610b825780633d5611f61461098f57806340bf2fb7146109725780635140a548146108665780635e1042e8146108205780635ef53329146107fb578063696255be14610780578063715018a614610723578063743c31f4146106db578063857dc190146105c45780638da5cb5b1461059c578063955f2d901461054b57806398ec1ac914610520578063ab1189951461038b578063b933fa7414610322578063cdcd3581146102d7578063dec5d1f614610268578063ec7fbb31146102295763f2fde38b1461018f575061000e565b3461022457602036600319011261021f576101a861120e565b6101b0611b83565b6001600160a01b038116156101cb576101c890611db2565b80f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b611038565b610fe8565b503461022457602036600319011261021f5760209060ff906040906001600160a01b0361025461120e565b168152606e84522054166040519015158152f35b503461022457604036600319011261021f576004356001600160401b0381116102d25761029990369060040161145d565b602435906001600160401b0382116102d2576102cd6102bf6101c8933690600401611229565b916102c8611b83565b611ee3565b6118c0565b611088565b503461022457602036600319011261021f576020906001600160a01b036102fc61120e565b168152606a8252604090206001600160a01b039061031990611b4f565b16604051908152f35b5034610224578060031936011261021f57606c54908161035457602091505b6040516001600160e01b03919091168152f35b6000198201918211610377575061036e602091606c611910565b5054811c610341565b634e487b7160e01b81526011600452602490fd5b503461022457606036600319011261021f576103a561120e565b6044356001600160401b0381116102d2576103c490369060040161145d565b82549060ff8260081c161592838094610513575b80156104fc575b156104a05760ff198316600117855561042f928461048f575b5061040960ff865460081c16611e83565b60018060a01b03166001600160601b0360a01b60685416176068556102c8602435611bdb565b61044860ff835460081c1661044381611e83565b611e83565b61045133611db2565b6104585780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b61ffff1916610101178555386103f8565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156103df5750600160ff8416146103df565b50600160ff8416106103d8565b3461022457602036600319011261021f57602061054361053e61120e565b61166a565b604051908152f35b503461022457604036600319011261021f5761056561120e565b6024359063ffffffff8216809203610598576001600160a01b03168252606d602090815260409092206105439190611aac565b8280fd5b50346102245736600319011261021f576033546040516001600160a01b039091168152602090f35b5034610224578060031936011261021f57338152606e60205260ff604082205416156106cc5760655480156106b85760001901606555338152606e6020526040812060ff19815416905561061f61061a33612065565b612299565b50506068546001600160a01b0316803b156106b357818080926024604051809481936351b27a6d60e11b83523360048401525af180156106a857610693575b506068546001600160a01b0316337f31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed5808380a380f35b8161069d9161117d565b61021f57803861065e565b6040513d84823e3d90fd5b6115f4565b634e487b7160e01b82526011600452602482fd5b6325ec6c1f60e01b8152600490fd5b503461022457602036600319011261021f576106f561120e565b338252606e60205260ff60408320541615610714576101c89033611dfb565b6325ec6c1f60e01b8252600482fd5b5034610224578060031936011261021f5761073c611b83565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461022457604036600319011261021f576024356004356001600160401b0382116102d2577f713ca53b88d6eb63f5b1854cb8cbdd736ec51eda225e46791aa9298b0160648f60406107da6101c8943690600401611229565b926107e3611b83565b606754908060675582519182526020820152a16118c0565b503461022457602036600319011261021f57610815611b83565b6101c8600435611bdb565b503461022457604036600319011261021f576020906001600160a01b0361084561120e565b168152606a8252604090206001600160a01b03906103199060243590611aac565b503461022457604036600319011261021f576004356001600160401b0381116102d25736602382011215610968578060040135906108a38261119e565b906108b1604051928361117d565b82825260208201906024829460051b8201019036821161096d5760248101925b82841061093957505050506024356001600160401b0381116102d2576108fb90369060040161131a565b5051156109255751805160655403610916576101c8906118c0565b63169efb5b60e11b8252600482fd5b634e487b7160e01b82526032600452602482fd5b83356001600160401b0381116109685760209161095d839260243691870101611229565b8152019301926108d1565b6110d8565b6111b5565b50346102245736600319011261021f576020606754604051908152f35b503461022457604036600319011261021f576004356001600160401b0381116102d25760606003198236030112610b7d5760405190606082018281106001600160401b03821117610b695760405280600401356001600160401b038111610b6457610a00906004369184010161131a565b8252602082019160248201358352604460408201920135825260243560018060a01b0381168103610b6057338552606e60205260ff604086205416610b51576065546000198114610b3d57906001610a819201606555338652606e60205260408620600160ff19825416179055610a7961061a33612065565b505033611dfb565b6068546001600160a01b031691823b156106b3578492610ad084809460405197889586948593639926ee7d60e01b855233600486015260406024860152516060604486015260a4850190611b5e565b9151606484015251608483015203925af18015610b3057610b20575b6068546001600160a01b0316337fa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c18380a380f35b610b299161117d565b3881610aec565b50604051903d90823e3d90fd5b634e487b7160e01b86526011600452602486fd5b6342ee68b560e01b8552600485fd5b8480fd5b61140c565b634e487b7160e01b84526041600452602484fd5b6113bb565b503461022457602036600319011261021f57602090610543906040906001600160a01b03610bae61120e565b168152606d845220611b4f565b50346102245736600319011261021f576020610543611b41565b3461022457602036600319011261021f57602061054363ffffffff610bf8611297565b16611a16565b50346102245736600319011261021f576060604051610c1c81611131565b52610c4a604051610c2c81611131565b610c34611551565b8152604051918291602083526020830190611361565b0390f35b503461022457604036600319011261021f576004356024356001600160401b0381116102d257610c8290369060040161131a565b9081518201906060836020840193031261021f5760208301516001600160401b0381116102d25783019282603f85011215610968576020840151610cc58161119e565b94610cd3604051968761117d565b8186526020808088019360051b830101019085821161096d57604001915b818310610f675750505060408101516001600160401b0381116102d257810183603f8201121561096857602081015190610d2a8261119e565b94610d38604051968761117d565b8286526020808088019460051b840101019181831161096d5760408101935b838510610ef5575050505050606001519063ffffffff8216809203610b60578351908590869480518403610ee3578315610ed45794959394438610159488935b858510610e0457505050505050610df557610db181611928565b8211610de657610dc090611a16565b11610dd757604051630b135d3f60e11b8152602090f35b63e121632f60e01b8152600490fd5b634b05a0f760e11b8352600483fd5b63e64f180f60e01b8352600483fd5b60018060a09a939495969998979a1b03610e1e89856115ca565b511695610ec557858a52606a60205260408a2086906001600160a01b0390610e47908a90611aac565b16916001600160a01b03161015610eb657610e6e9085610e678a876115ca565b519161255b565b15610ea757906001610e9a8a959493610e948960408a99809b8152606d60205220611aac565b90611647565b9701939794959697610d97565b638baa579f60e01b8952600489fd5b63ba50f91160e01b8a5260048afd5b63e64f180f60e01b8a5260048afd5b63251f56a160e21b8852600488fd5b6001621398b960e31b03198852600488fd5b84516001600160401b038111610968576020908301019083603f8301121561096857602082015190610f26826112ff565b610f33604051918261117d565b8281526040848401018610610f6257610f576020949385946040868501910161152e565b815201940193610d57565b6112aa565b82516001600160a01b0381168103610f8757815260209283019201610cf1565b8880fd5b3461022457602036600319011261021f57602061054363ffffffff610fae611297565b16611928565b5034610fe857602036600319011261021f576004356001600160401b0381116102d2576102cd6101c8913690600401611229565b60405162461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a20696e76616c6964207475706c65206f666673604482015261195d60f21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a1c9c985e481bd9999cd95d60aa1b6064820152608490fd5b602081019081106001600160401b0382111761114c57604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761114c57604052565b90601f801991011681019081106001600160401b0382111761114c57604052565b6001600160401b03811161114c5760051b60200190565b60405162461bcd60e51b815260206004820152602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a727261792073747269646560a81b6064820152608490fd5b600435906001600160a01b038216820361122457565b600080fd5b9080601f83011215610968578135906112418261119e565b9261124f604051948561117d565b82845260208085019360051b82010191821161096d57602001915b8183106112775750505090565b82356001600160a01b03811681036112245781526020928301920161126a565b6004359063ffffffff8216820361122457565b60405162461bcd60e51b815260206004820152602760248201527f414249206465636f64696e673a20696e76616c69642062797465206172726179604482015266040d8cadccee8d60cb1b6064820152608490fd5b6001600160401b03811161114c57601f01601f191660200190565b81601f8201121561096857803590611331826112ff565b9261133f604051948561117d565b82845260208383010111610f6257816000926020809301838601378301015290565b6020604081840192519382815284518094520192019060005b8181106113875750505090565b825180516001600160a01b031685526020908101516001600160601b0316818601526040909401939092019160010161137a565b60405162461bcd60e51b815260206004820152602360248201527f414249206465636f64696e673a20737472756374206461746120746f6f2073686044820152621bdc9d60ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f414249206465636f64696e673a20696e76616c696420737472756374206f66666044820152621cd95d60ea1b6064820152608490fd5b9190602083820312610b7d5760405161147581611131565b80938035906001600160401b038211610b64570182601f82011215610968578035906114a08261119e565b936114ae604051958661117d565b82855260208086019360061b8301019181831161096d57602001925b8284106114d8575050505052565b604084830312610b7d57604051906114ef82611162565b84356001600160a01b03811681036112245782526020850135906001600160601b038216820361122457826020928360409501528152019301926114ca565b60005b8381106115415750506000910152565b8181015183820152602001611531565b6066549061155e8261119e565b9161156c604051938461117d565b808352606660009081526000805160206127ff833981519152602085015b8383106115975750505050565b6001602081926040516115a981611162565b8554848060a01b038116825260a01c8382015281520192019201919061158a565b80518210156115de5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b815260206004820152602560248201527f54617267657420636f6e747261637420646f6573206e6f7420636f6e7461696e60448201526420636f646560d81b6064820152608490fd5b9190820180921161165457565b634e487b7160e01b600052601160045260246000fd5b611672611551565b80519092600061169a6116848461119e565b93611692604051958661117d565b80855261119e565b602084019490601f190136863760005b86518110156116dc576001906001600160a01b036116c8828a6115ca565b5151166116d582886115ca565b52016116aa565b5091939092917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190823b156106b35760408051639004134760e01b81526001600160a01b03909216600483015260248201529251604484018190528391606483019160005b8181106118825750505091818060009403915afa908115611876576000916117e5575b506000915b84518310156117c55761178683836115ca565b51906001600160601b03602061179c86896115ca565b5101511691828102928184041490151715611654576001916117bd91611647565b920191611773565b915050612710919250046067548110156000146117df5790565b50600090565b90503d806000833e6117f7818361117d565b81019060208183031261021f578051906001600160401b0382116102d257019080601f8301121561096857815161182d8161119e565b9261183b604051948561117d565b81845260208085019260051b82010192831161096d57602001905b828210611866575050503861176e565b8151815260209182019101611856565b6040513d6000823e3d90fd5b82516001600160a01b031684528694506020938401939092019160010161174b565b9190916000838201938412911290801582169115161761165457565b906000805b83518210156118ff576001906118f7906118f16001600160a01b036118ea86896115ca565b5116612065565b906118a4565b9101906118c5565b905061190c919250612299565b5050565b80548210156115de5760005260206000200190600090565b438110156119d257606b54906000905b82821061197757505080611956575060005b6001600160e01b031690565b60001981019081116116545761196d90606b611910565b505460201c61194a565b909161198a81841860011c828516611647565b908263ffffffff61199c84606b611910565b50541611156119ae5750915b90611938565b925060018101809111156119a857634e487b7160e01b600052601160045260246000fd5b606460405162461bcd60e51b815260206004820152602060248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152fd5b438110156119d257606c54906000905b828210611a5157505080611a3a5750600090565b60001981019081116116545761196d90606c611910565b9091611a6481841860011c828516611647565b908263ffffffff611a7684606c611910565b5054161115611a885750915b90611a26565b92506001810180911115611a8257634e487b7160e01b600052601160045260246000fd5b90438110156119d2578154906000905b828210611ae757505080611ad257506000919050565b60001981019081116116545761196d91611910565b9091611afa81841860011c828516611647565b908263ffffffff611b0b8488611910565b5054161115611b1d5750915b90611abc565b92506001810180911115611b1757634e487b7160e01b600052601160045260246000fd5b606b54806119565750600090565b805480611ad257506000919050565b90602091611b778151809281855285808601910161152e565b601f01601f1916010190565b6033546001600160a01b03163303611b9757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000606c5490611beb606c611b4f565b9180151580611d77575b15611c6757611c0384612677565b916000198201918211610377575091611c5d7f9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b9492611c45602095606c611910565b509063ffffffff82549181199060201b169116179055565b50604051908152a1565b63ffffffff4311611d2357611c7b84612677565b9060405190611c8982611162565b4363ffffffff1682526001600160e01b039092166020820190815291600160401b811015610b6957806001611cc39201606c55606c611910565b939093611d0f575051905163ffffffff90911663ffffffff19602092831b16179091557f9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b929091611c5d565b634e487b7160e01b81526004819052602490fd5b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608490fd5b506000198101818111611d9e57611d9463ffffffff91606c611910565b5054164314611bf5565b634e487b7160e01b83526011600452602483fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6001600160a01b039081166000818152606a6020526040902090929190611e2190611b4f565b6001600160a01b0390921692911690828214611e7e5780600052606a602052611e4e8360406000206123cd565b50506040519182527fd061168252f441733658f09e4d8f5b2d998ed4ef24a2bbfd6ceca52ea131500260204393a4565b505050565b15611e8a57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b611eec816124ce565b1561203b5760405191611efe83611131565b611f06611551565b8352606654600060665580611ffd575b5060005b82518051821015611faa5781611f2f916115ca565b51606654600160401b81101561114c57600181016066556000606654821015611f965760669052815160209092015160a01b6001600160a01b0319166001600160a01b0392909216919091176000805160206127ff83398151915290910155600101611f1a565b634e487b7160e01b81526032600452602490fd5b505091611fea90611ff87f23aad4e61744ece164130aa415c1616e80136b0f0770e56589438b90b269265e93604051938493604085526040850190611361565b908382036020850152611361565b0390a1565b60666000526000805160206127ff833981519152016000805160206127ff8339815191525b81811061202f5750611f16565b60008155600101612022565b63d173577960e01b60005260046000fd5b8181039291600013801582851316918412161761165457565b6001600160a01b0381166000818152606d60205260408120909290839061208b90611b4f565b9183600052606e60205260ff60406000205416156000146122385750816120b19161204c565b9283156122325782600052606d6020526040600020600081546120d383611b4f565b92811515806121f8575b1561213d576120eb83612677565b926000198301928311610377575060409492611c457f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe59497959361212d93611910565b505b82519182526020820152a290565b63ffffffff4311611d235761215183612677565b916040519161215f83611162565b4363ffffffff1683526001600160e01b039093166020830190815292600160401b8210156121e4579061219791600182018155611910565b939093611d0f575051905160201b63ffffffff191663ffffffff919091161790557f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe59492604092909161212d565b634e487b7160e01b85526041600452602485fd5b50600019820182811161221e5761221463ffffffff9183611910565b50541643146120dd565b634e487b7160e01b84526011600452602484fd5b50505090565b905061224591935061166a565b91612250818461204c565b928315612232577f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe5949160409184600052606d60205261229281846000206123cd565b505061212f565b906122ac6122a5611b41565b92836118a4565b906000606b54906122bd606b611b4f565b91801515806123a6575b15612324576122d585612677565b916000198201918211610377575090611c456122f292606b611910565b507f86dcf86b12dfeedea74ae9300dbdaa193bcce5809369c8177ea2f4eaaa65729b60408051858152846020820152a1565b63ffffffff4311611d235761233885612677565b906040519061234682611162565b4363ffffffff1682526001600160e01b039092166020820190815291600160401b811015610b69578060016123809201606b55606b611910565b939093611d0f575051905160201b63ffffffff191663ffffffff919091161790556122f2565b506000198101818111611d9e576123c363ffffffff91606b611910565b50541643146122c7565b91909180546123db82611b4f565b91811515806124a8575b15612411576123f385612677565b9060001983019283116116545761240d92611c4591611910565b9190565b63ffffffff4311611d235761242585612677565b906040519261243384611162565b4363ffffffff1684526001600160e01b039092166020840190815291600160401b81101561114c5761246a91600182018155611910565b919091612492579151915160201b63ffffffff191663ffffffff929092169190911790559190565b634e487b7160e01b600052600060045260246000fd5b506000198201828111611654576124c463ffffffff9183611910565b50541643146123e5565b5190600080805b8451821015612543576001600160a01b036124f083876115ca565b515116906001600160a01b031681111561253257612529600191936001600160601b03602061251f868a6115ca565b5101511690611647565b910190916124d5565b63ba50f91160e01b60005260046000fd5b5091925061271014905061255657600090565b600190565b91909161256882846126e6565b60058110156126615715908161264b575b50612643576000926125b46125c285946040519283916020830195630b135d3f60e11b87526024840152604060448401526064830190611b5e565b03601f19810183528261117d565b51915afa3d1561263c573d6125d6816112ff565b906125e4604051928361117d565b81523d6000602083013e5b81612630575b816125fe575090565b905060208180518101031261021f57602001516001600160e01b031981169081900361122457630b135d3f60e11b1490565b805160201491506125f5565b60606125ef565b505050600190565b6001600160a01b03838116911614905038612579565b634e487b7160e01b600052602160045260246000fd5b6001600160e01b038111612691576001600160e01b031690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608490fd5b81516041810361271357509061270f916020820151906060604084015193015160001a90612756565b9091565b60400361274c5760406020830151920151918260ff1c91601b83018093116116545761270f936001600160ff1b03169260ff1690612756565b5050600090600290565b907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084116127f25760ff1690601b821415806127e7575b6127db57602093600093608093604051938452868401526040830152606082015282805260015afa15611876576000516001600160a01b038116156127d25790600090565b50600090600190565b50505050600090600490565b50601c82141561278d565b5050505060009060039056fe46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354a2646970667358221220bf9b771c1ed8ae1b372153e924d4124619e09577f9575822be560dad4886565f64736f6c634300081a0033";

type ECDSAStakeRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECDSAStakeRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ECDSAStakeRegistry__factory extends ContractFactory {
  constructor(...args: ECDSAStakeRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _delegationManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ECDSAStakeRegistry> {
    return super.deploy(
      _delegationManager,
      overrides || {}
    ) as Promise<ECDSAStakeRegistry>;
  }
  override getDeployTransaction(
    _delegationManager: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_delegationManager, overrides || {});
  }
  override attach(address: string): ECDSAStakeRegistry {
    return super.attach(address) as ECDSAStakeRegistry;
  }
  override connect(signer: Signer): ECDSAStakeRegistry__factory {
    return super.connect(signer) as ECDSAStakeRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECDSAStakeRegistryInterface {
    return new utils.Interface(_abi) as ECDSAStakeRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ECDSAStakeRegistry {
    return new Contract(address, _abi, signerOrProvider) as ECDSAStakeRegistry;
  }
}
