/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IReclaimTaskManager {
  export type ClaimRequestStruct = {
    provider: string;
    claimUserId: BytesLike;
    claimHash: BytesLike;
    requestedAt: BigNumberish;
    owner: string;
    fee: BigNumberish;
  };

  export type ClaimRequestStructOutput = [
    string,
    string,
    string,
    number,
    string,
    BigNumber
  ] & {
    provider: string;
    claimUserId: string;
    claimHash: string;
    requestedAt: number;
    owner: string;
    fee: BigNumber;
  };

  export type TaskCreationMetadataStruct = {
    maxTaskLifetimeS: BigNumberish;
    minSignaturesPerTask: BigNumberish;
    maxTaskCreationDelayS: BigNumberish;
    minFee: BigNumberish;
  };

  export type TaskCreationMetadataStructOutput = [
    number,
    number,
    number,
    BigNumber
  ] & {
    maxTaskLifetimeS: number;
    minSignaturesPerTask: number;
    maxTaskCreationDelayS: number;
    minFee: BigNumber;
  };

  export type ReclaimOperatorStruct = { addr: string; url: string };

  export type ReclaimOperatorStructOutput = [string, string] & {
    addr: string;
    url: string;
  };

  export type TaskStruct = {
    request: IReclaimTaskManager.ClaimRequestStruct;
    createdAt: BigNumberish;
    expiresAt: BigNumberish;
    minimumSignatures: BigNumberish;
    operators: IReclaimTaskManager.ReclaimOperatorStruct[];
    feePaid: BigNumberish;
  };

  export type TaskStructOutput = [
    IReclaimTaskManager.ClaimRequestStructOutput,
    number,
    number,
    number,
    IReclaimTaskManager.ReclaimOperatorStructOutput[],
    BigNumber
  ] & {
    request: IReclaimTaskManager.ClaimRequestStructOutput;
    createdAt: number;
    expiresAt: number;
    minimumSignatures: number;
    operators: IReclaimTaskManager.ReclaimOperatorStructOutput[];
    feePaid: BigNumber;
  };

  export type CompletedTaskStruct = {
    task: IReclaimTaskManager.TaskStruct;
    signatures: BytesLike[];
  };

  export type CompletedTaskStructOutput = [
    IReclaimTaskManager.TaskStructOutput,
    string[]
  ] & { task: IReclaimTaskManager.TaskStructOutput; signatures: string[] };
}

export declare namespace OperatorStateRetriever {
  export type CheckSignaturesIndicesStruct = {
    nonSignerQuorumBitmapIndices: BigNumberish[];
    quorumApkIndices: BigNumberish[];
    totalStakeIndices: BigNumberish[];
    nonSignerStakeIndices: BigNumberish[][];
  };

  export type CheckSignaturesIndicesStructOutput = [
    number[],
    number[],
    number[],
    number[][]
  ] & {
    nonSignerQuorumBitmapIndices: number[];
    quorumApkIndices: number[];
    totalStakeIndices: number[];
    nonSignerStakeIndices: number[][];
  };

  export type OperatorStruct = {
    operator: string;
    operatorId: BytesLike;
    stake: BigNumberish;
  };

  export type OperatorStructOutput = [string, string, BigNumber] & {
    operator: string;
    operatorId: string;
    stake: BigNumber;
  };
}

export interface ReclaimTaskManagerInterface extends utils.Interface {
  functions: {
    "allTaskHashes(uint32)": FunctionFragment;
    "createNewTask((string,bytes32,bytes32,uint32,address,uint256),bytes)": FunctionFragment;
    "defaultStrategy()": FunctionFragment;
    "encodeClaimRequest((string,bytes32,bytes32,uint32,address,uint256))": FunctionFragment;
    "getBatchOperatorFromId(address,bytes32[])": FunctionFragment;
    "getBatchOperatorId(address,address[])": FunctionFragment;
    "getCheckSignaturesIndices(address,uint32,bytes,bytes32[])": FunctionFragment;
    "getLatestTaskNum()": FunctionFragment;
    "getOperatorState(address,bytes,uint32)": FunctionFragment;
    "getOperatorState(address,bytes32,uint32)": FunctionFragment;
    "getQuorumBitmapsAtBlockNumber(address,bytes32[],uint32)": FunctionFragment;
    "getTaskCreationMetadata()": FunctionFragment;
    "getToken()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "latestTaskNum()": FunctionFragment;
    "operatorHasMinimumWeight(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "pauseAll()": FunctionFragment;
    "paused(uint8)": FunctionFragment;
    "paused()": FunctionFragment;
    "pauserRegistry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsCoordinator()": FunctionFragment;
    "setRewardsCoordinator(address)": FunctionFragment;
    "setStakeRegistry(address)": FunctionFragment;
    "stakeRegistry()": FunctionFragment;
    "taskCompleted((((string,bytes32,bytes32,uint32,address,uint256),uint32,uint32,uint8,(address,string)[],uint256),bytes[]),uint32)": FunctionFragment;
    "taskCreationMetadata()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause(uint256)": FunctionFragment;
    "updateTaskCreationMetadata((uint32,uint8,uint32,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allTaskHashes"
      | "createNewTask"
      | "defaultStrategy"
      | "encodeClaimRequest"
      | "getBatchOperatorFromId"
      | "getBatchOperatorId"
      | "getCheckSignaturesIndices"
      | "getLatestTaskNum"
      | "getOperatorState(address,bytes,uint32)"
      | "getOperatorState(address,bytes32,uint32)"
      | "getQuorumBitmapsAtBlockNumber"
      | "getTaskCreationMetadata"
      | "getToken"
      | "initialize"
      | "latestTaskNum"
      | "operatorHasMinimumWeight"
      | "owner"
      | "pause"
      | "pauseAll"
      | "paused(uint8)"
      | "paused()"
      | "pauserRegistry"
      | "renounceOwnership"
      | "rewardsCoordinator"
      | "setRewardsCoordinator"
      | "setStakeRegistry"
      | "stakeRegistry"
      | "taskCompleted"
      | "taskCreationMetadata"
      | "transferOwnership"
      | "unpause"
      | "updateTaskCreationMetadata"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allTaskHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewTask",
    values: [IReclaimTaskManager.ClaimRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeClaimRequest",
    values: [IReclaimTaskManager.ClaimRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchOperatorFromId",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchOperatorId",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCheckSignaturesIndices",
    values: [string, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestTaskNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorState(address,bytes,uint32)",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorState(address,bytes32,uint32)",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuorumBitmapsAtBlockNumber",
    values: [string, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskCreationMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestTaskNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorHasMinimumWeight",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pauseAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paused(uint8)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauserRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsCoordinator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taskCompleted",
    values: [IReclaimTaskManager.CompletedTaskStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taskCreationMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTaskCreationMetadata",
    values: [IReclaimTaskManager.TaskCreationMetadataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "allTaskHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeClaimRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchOperatorFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchOperatorId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCheckSignaturesIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestTaskNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorState(address,bytes,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorState(address,bytes32,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuorumBitmapsAtBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskCreationMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestTaskNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorHasMinimumWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paused(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskCreationMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTaskCreationMetadata",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "NewTaskCreated(uint32,((string,bytes32,bytes32,uint32,address,uint256),uint32,uint32,uint8,(address,string)[],uint256))": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address,uint256)": EventFragment;
    "TaskCompleted(uint32,(((string,bytes32,bytes32,uint32,address,uint256),uint32,uint32,uint8,(address,string)[],uint256),bytes[]))": EventFragment;
    "Unpaused(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTaskCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewTaskCreatedEventObject {
  taskIndex: number;
  task: IReclaimTaskManager.TaskStructOutput;
}
export type NewTaskCreatedEvent = TypedEvent<
  [number, IReclaimTaskManager.TaskStructOutput],
  NewTaskCreatedEventObject
>;

export type NewTaskCreatedEventFilter = TypedEventFilter<NewTaskCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type PausedEvent = TypedEvent<[string, BigNumber], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TaskCompletedEventObject {
  taskIndex: number;
  task: IReclaimTaskManager.CompletedTaskStructOutput;
}
export type TaskCompletedEvent = TypedEvent<
  [number, IReclaimTaskManager.CompletedTaskStructOutput],
  TaskCompletedEventObject
>;

export type TaskCompletedEventFilter = TypedEventFilter<TaskCompletedEvent>;

export interface UnpausedEventObject {
  account: string;
  newPausedStatus: BigNumber;
}
export type UnpausedEvent = TypedEvent<
  [string, BigNumber],
  UnpausedEventObject
>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ReclaimTaskManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReclaimTaskManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allTaskHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createNewTask(
      request: IReclaimTaskManager.ClaimRequestStruct,
      requestSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    defaultStrategy(overrides?: CallOverrides): Promise<[string]>;

    encodeClaimRequest(
      request: IReclaimTaskManager.ClaimRequestStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBatchOperatorFromId(
      registryCoordinator: string,
      operatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { operators: string[] }>;

    getBatchOperatorId(
      registryCoordinator: string,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { operatorIds: string[] }>;

    getCheckSignaturesIndices(
      registryCoordinator: string,
      referenceBlockNumber: BigNumberish,
      quorumNumbers: BytesLike,
      nonSignerOperatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[OperatorStateRetriever.CheckSignaturesIndicesStructOutput]>;

    getLatestTaskNum(overrides?: CallOverrides): Promise<[number]>;

    "getOperatorState(address,bytes,uint32)"(
      registryCoordinator: string,
      quorumNumbers: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OperatorStateRetriever.OperatorStructOutput[][]]>;

    "getOperatorState(address,bytes32,uint32)"(
      registryCoordinator: string,
      operatorId: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, OperatorStateRetriever.OperatorStructOutput[][]]>;

    getQuorumBitmapsAtBlockNumber(
      registryCoordinator: string,
      operatorIds: BytesLike[],
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTaskCreationMetadata(
      overrides?: CallOverrides
    ): Promise<[IReclaimTaskManager.TaskCreationMetadataStructOutput]>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      initialOwner: string,
      strategy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    latestTaskNum(overrides?: CallOverrides): Promise<[number]>;

    operatorHasMinimumWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pauserRegistry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardsCoordinator(overrides?: CallOverrides): Promise<[string]>;

    setRewardsCoordinator(
      _rewardsCoordinator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setStakeRegistry(
      _stakeRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeRegistry(overrides?: CallOverrides): Promise<[string]>;

    taskCompleted(
      completedTask: IReclaimTaskManager.CompletedTaskStruct,
      referenceTaskIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    taskCreationMetadata(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, BigNumber] & {
        maxTaskLifetimeS: number;
        minSignaturesPerTask: number;
        maxTaskCreationDelayS: number;
        minFee: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTaskCreationMetadata(
      newMetadata: IReclaimTaskManager.TaskCreationMetadataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  allTaskHashes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  createNewTask(
    request: IReclaimTaskManager.ClaimRequestStruct,
    requestSignature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  defaultStrategy(overrides?: CallOverrides): Promise<string>;

  encodeClaimRequest(
    request: IReclaimTaskManager.ClaimRequestStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getBatchOperatorFromId(
    registryCoordinator: string,
    operatorIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBatchOperatorId(
    registryCoordinator: string,
    operators: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getCheckSignaturesIndices(
    registryCoordinator: string,
    referenceBlockNumber: BigNumberish,
    quorumNumbers: BytesLike,
    nonSignerOperatorIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<OperatorStateRetriever.CheckSignaturesIndicesStructOutput>;

  getLatestTaskNum(overrides?: CallOverrides): Promise<number>;

  "getOperatorState(address,bytes,uint32)"(
    registryCoordinator: string,
    quorumNumbers: BytesLike,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OperatorStateRetriever.OperatorStructOutput[][]>;

  "getOperatorState(address,bytes32,uint32)"(
    registryCoordinator: string,
    operatorId: BytesLike,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, OperatorStateRetriever.OperatorStructOutput[][]]>;

  getQuorumBitmapsAtBlockNumber(
    registryCoordinator: string,
    operatorIds: BytesLike[],
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTaskCreationMetadata(
    overrides?: CallOverrides
  ): Promise<IReclaimTaskManager.TaskCreationMetadataStructOutput>;

  getToken(overrides?: CallOverrides): Promise<string>;

  initialize(
    initialOwner: string,
    strategy: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  latestTaskNum(overrides?: CallOverrides): Promise<number>;

  operatorHasMinimumWeight(
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseAll(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "paused(uint8)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

  pauserRegistry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardsCoordinator(overrides?: CallOverrides): Promise<string>;

  setRewardsCoordinator(
    _rewardsCoordinator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setStakeRegistry(
    _stakeRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeRegistry(overrides?: CallOverrides): Promise<string>;

  taskCompleted(
    completedTask: IReclaimTaskManager.CompletedTaskStruct,
    referenceTaskIndex: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  taskCreationMetadata(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, BigNumber] & {
      maxTaskLifetimeS: number;
      minSignaturesPerTask: number;
      maxTaskCreationDelayS: number;
      minFee: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    newPausedStatus: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTaskCreationMetadata(
    newMetadata: IReclaimTaskManager.TaskCreationMetadataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    allTaskHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createNewTask(
      request: IReclaimTaskManager.ClaimRequestStruct,
      requestSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultStrategy(overrides?: CallOverrides): Promise<string>;

    encodeClaimRequest(
      request: IReclaimTaskManager.ClaimRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getBatchOperatorFromId(
      registryCoordinator: string,
      operatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBatchOperatorId(
      registryCoordinator: string,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCheckSignaturesIndices(
      registryCoordinator: string,
      referenceBlockNumber: BigNumberish,
      quorumNumbers: BytesLike,
      nonSignerOperatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<OperatorStateRetriever.CheckSignaturesIndicesStructOutput>;

    getLatestTaskNum(overrides?: CallOverrides): Promise<number>;

    "getOperatorState(address,bytes,uint32)"(
      registryCoordinator: string,
      quorumNumbers: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OperatorStateRetriever.OperatorStructOutput[][]>;

    "getOperatorState(address,bytes32,uint32)"(
      registryCoordinator: string,
      operatorId: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, OperatorStateRetriever.OperatorStructOutput[][]]>;

    getQuorumBitmapsAtBlockNumber(
      registryCoordinator: string,
      operatorIds: BytesLike[],
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTaskCreationMetadata(
      overrides?: CallOverrides
    ): Promise<IReclaimTaskManager.TaskCreationMetadataStructOutput>;

    getToken(overrides?: CallOverrides): Promise<string>;

    initialize(
      initialOwner: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    latestTaskNum(overrides?: CallOverrides): Promise<number>;

    operatorHasMinimumWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseAll(overrides?: CallOverrides): Promise<void>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsCoordinator(overrides?: CallOverrides): Promise<string>;

    setRewardsCoordinator(
      _rewardsCoordinator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakeRegistry(
      _stakeRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeRegistry(overrides?: CallOverrides): Promise<string>;

    taskCompleted(
      completedTask: IReclaimTaskManager.CompletedTaskStruct,
      referenceTaskIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taskCreationMetadata(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, BigNumber] & {
        maxTaskLifetimeS: number;
        minSignaturesPerTask: number;
        maxTaskCreationDelayS: number;
        minFee: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTaskCreationMetadata(
      newMetadata: IReclaimTaskManager.TaskCreationMetadataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewTaskCreated(uint32,((string,bytes32,bytes32,uint32,address,uint256),uint32,uint32,uint8,(address,string)[],uint256))"(
      taskIndex?: BigNumberish | null,
      task?: null
    ): NewTaskCreatedEventFilter;
    NewTaskCreated(
      taskIndex?: BigNumberish | null,
      task?: null
    ): NewTaskCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): PausedEventFilter;
    Paused(account?: string | null, newPausedStatus?: null): PausedEventFilter;

    "TaskCompleted(uint32,(((string,bytes32,bytes32,uint32,address,uint256),uint32,uint32,uint8,(address,string)[],uint256),bytes[]))"(
      taskIndex?: BigNumberish | null,
      task?: null
    ): TaskCompletedEventFilter;
    TaskCompleted(
      taskIndex?: BigNumberish | null,
      task?: null
    ): TaskCompletedEventFilter;

    "Unpaused(address,uint256)"(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
    Unpaused(
      account?: string | null,
      newPausedStatus?: null
    ): UnpausedEventFilter;
  };

  estimateGas: {
    allTaskHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewTask(
      request: IReclaimTaskManager.ClaimRequestStruct,
      requestSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    defaultStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    encodeClaimRequest(
      request: IReclaimTaskManager.ClaimRequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatchOperatorFromId(
      registryCoordinator: string,
      operatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatchOperatorId(
      registryCoordinator: string,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCheckSignaturesIndices(
      registryCoordinator: string,
      referenceBlockNumber: BigNumberish,
      quorumNumbers: BytesLike,
      nonSignerOperatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestTaskNum(overrides?: CallOverrides): Promise<BigNumber>;

    "getOperatorState(address,bytes,uint32)"(
      registryCoordinator: string,
      quorumNumbers: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOperatorState(address,bytes32,uint32)"(
      registryCoordinator: string,
      operatorId: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumBitmapsAtBlockNumber(
      registryCoordinator: string,
      operatorIds: BytesLike[],
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaskCreationMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initialOwner: string,
      strategy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    latestTaskNum(overrides?: CallOverrides): Promise<BigNumber>;

    operatorHasMinimumWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseAll(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauserRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardsCoordinator(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardsCoordinator(
      _rewardsCoordinator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setStakeRegistry(
      _stakeRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    taskCompleted(
      completedTask: IReclaimTaskManager.CompletedTaskStruct,
      referenceTaskIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    taskCreationMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTaskCreationMetadata(
      newMetadata: IReclaimTaskManager.TaskCreationMetadataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allTaskHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewTask(
      request: IReclaimTaskManager.ClaimRequestStruct,
      requestSignature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    defaultStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeClaimRequest(
      request: IReclaimTaskManager.ClaimRequestStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchOperatorFromId(
      registryCoordinator: string,
      operatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchOperatorId(
      registryCoordinator: string,
      operators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCheckSignaturesIndices(
      registryCoordinator: string,
      referenceBlockNumber: BigNumberish,
      quorumNumbers: BytesLike,
      nonSignerOperatorIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestTaskNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOperatorState(address,bytes,uint32)"(
      registryCoordinator: string,
      quorumNumbers: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOperatorState(address,bytes32,uint32)"(
      registryCoordinator: string,
      operatorId: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuorumBitmapsAtBlockNumber(
      registryCoordinator: string,
      operatorIds: BytesLike[],
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskCreationMetadata(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      initialOwner: string,
      strategy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    latestTaskNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorHasMinimumWeight(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "paused(uint8)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauserRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardsCoordinator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardsCoordinator(
      _rewardsCoordinator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setStakeRegistry(
      _stakeRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taskCompleted(
      completedTask: IReclaimTaskManager.CompletedTaskStruct,
      referenceTaskIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    taskCreationMetadata(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      newPausedStatus: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTaskCreationMetadata(
      newMetadata: IReclaimTaskManager.TaskCreationMetadataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
